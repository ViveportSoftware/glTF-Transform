{"version":3,"file":"functions.modern.js","sources":["../src/utils.ts","../src/center.ts","../src/list-node-scenes.ts","../src/clear-node-parent.ts","../../../node_modules/gl-matrix/esm/common.js","../../../node_modules/gl-matrix/esm/mat4.js","../../../node_modules/gl-matrix/esm/mat3.js","../../../node_modules/gl-matrix/esm/vec3.js","../../../node_modules/gl-matrix/esm/vec4.js","../src/clean-primitive.ts","../src/dedup.ts","../src/get-texture-color-space.ts","../src/list-texture-info.ts","../src/list-texture-slots.ts","../src/prune.ts","../src/weld.ts","../src/transform-primitive.ts","../src/transform-mesh.ts","../src/clear-node-transform.ts","../src/dequantize.ts","../src/draco.ts","../src/flatten.ts","../src/inspect.ts","../src/instance.ts","../src/join-primitives.ts","../src/join.ts","../src/list-texture-channels.ts","../src/reorder.ts","../src/sort-primitive-weights.ts","../src/quantize.ts","../src/meshopt.ts","../src/metal-rough.ts","../src/unweld.ts","../src/normals.ts","../src/palette.ts","../src/partition.ts","../../../node_modules/keyframe-resample/dist/keyframe-resample-browser.modern.js","../src/resample.ts","../src/sequence.ts","../src/simplify.ts","../src/sparse.ts","../src/texture-compress.ts","../src/tangents.ts","../src/unlit.ts","../src/unpartition.ts","../src/vertex-color-space.ts"],"sourcesContent":["import type { NdArray } from 'ndarray';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport {\n\tAccessor,\n\tDocument,\n\tPrimitive,\n\tProperty,\n\tPropertyType,\n\tTexture,\n\tTransform,\n\tTransformContext,\n\tvec2,\n} from '@gltf-transform/core';\n\n/**\n * Prepares a function used in an {@link Document.transform} pipeline. Use of this wrapper is\n * optional, and plain functions may be used in transform pipelines just as well. The wrapper is\n * used internally so earlier pipeline stages can detect and optimize based on later stages.\n * @hidden\n */\nexport function createTransform(name: string, fn: Transform): Transform {\n\tObject.defineProperty(fn, 'name', { value: name });\n\treturn fn;\n}\n\n/** @hidden */\nexport function isTransformPending(context: TransformContext | undefined, initial: string, pending: string): boolean {\n\tif (!context) return false;\n\tconst initialIndex = context.stack.lastIndexOf(initial);\n\tconst pendingIndex = context.stack.lastIndexOf(pending);\n\treturn initialIndex < pendingIndex;\n}\n\n/**\n * Maps pixels from source to target textures, with a per-pixel callback.\n * @hidden\n */\nexport async function rewriteTexture(\n\tsource: Texture,\n\ttarget: Texture,\n\tfn: (pixels: NdArray, i: number, j: number) => void,\n): Promise<Texture | null> {\n\tif (!source) return null;\n\n\tconst srcImage = source.getImage();\n\tif (!srcImage) return null;\n\n\tconst pixels = await getPixels(srcImage, source.getMimeType());\n\n\tfor (let i = 0; i < pixels.shape[0]; ++i) {\n\t\tfor (let j = 0; j < pixels.shape[1]; ++j) {\n\t\t\tfn(pixels, i, j);\n\t\t}\n\t}\n\n\tconst dstImage = await savePixels(pixels, 'image/png');\n\treturn target.setImage(dstImage).setMimeType('image/png');\n}\n\n/** @hidden */\nexport function getGLPrimitiveCount(prim: Primitive): number {\n\tconst indices = prim.getIndices();\n\tconst position = prim.getAttribute('POSITION')!;\n\n\t// Reference: https://www.khronos.org/opengl/wiki/Primitive\n\tswitch (prim.getMode()) {\n\t\tcase Primitive.Mode.POINTS:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINES:\n\t\t\treturn indices ? indices.getCount() / 2 : position.getCount() / 2;\n\t\tcase Primitive.Mode.LINE_LOOP:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINE_STRIP:\n\t\t\treturn position.getCount() - 1;\n\t\tcase Primitive.Mode.TRIANGLES:\n\t\t\treturn indices ? indices.getCount() / 3 : position.getCount() / 3;\n\t\tcase Primitive.Mode.TRIANGLE_STRIP:\n\t\tcase Primitive.Mode.TRIANGLE_FAN:\n\t\t\treturn position.getCount() - 2;\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected mode: ' + prim.getMode());\n\t}\n}\n\n/** @hidden */\nexport class SetMap<K, V> {\n\tprivate _map = new Map<K, Set<V>>();\n\tpublic get size(): number {\n\t\treturn this._map.size;\n\t}\n\tpublic has(k: K): boolean {\n\t\treturn this._map.has(k);\n\t}\n\tpublic add(k: K, v: V): this {\n\t\tlet entry = this._map.get(k);\n\t\tif (!entry) {\n\t\t\tentry = new Set();\n\t\t\tthis._map.set(k, entry);\n\t\t}\n\t\tentry.add(v);\n\t\treturn this;\n\t}\n\tpublic get(k: K): Set<V> {\n\t\treturn this._map.get(k) || new Set();\n\t}\n\tpublic keys(): Iterable<K> {\n\t\treturn this._map.keys();\n\t}\n}\n\n/** @hidden */\nexport function formatBytes(bytes: number, decimals = 2): string {\n\tif (bytes === 0) return '0 Bytes';\n\n\tconst k = 1000;\n\tconst dm = decimals < 0 ? 0 : decimals;\n\tconst sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\n\n\treturn parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n/** @hidden */\nexport function formatLong(x: number): string {\n\treturn x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\n/** @hidden */\nexport function formatDelta(a: number, b: number, decimals = 2): string {\n\tconst prefix = a > b ? '–' : '+';\n\tconst suffix = '%';\n\treturn prefix + ((Math.abs(a - b) / a) * 100).toFixed(decimals) + suffix;\n}\n\n/** @hidden */\nexport function formatDeltaOp(a: number, b: number) {\n\treturn `${formatLong(a)} → ${formatLong(b)} (${formatDelta(a, b)})`;\n}\n\n/**\n * Returns a list of all unique vertex attributes on the given primitive and\n * its morph targets.\n * @hidden\n */\nexport function deepListAttributes(prim: Primitive): Accessor[] {\n\tconst accessors: Accessor[] = [];\n\n\tfor (const attribute of prim.listAttributes()) {\n\t\taccessors.push(attribute);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const attribute of target.listAttributes()) {\n\t\t\taccessors.push(attribute);\n\t\t}\n\t}\n\n\treturn Array.from(new Set(accessors));\n}\n\n/** @hidden */\nexport function deepSwapAttribute(prim: Primitive, src: Accessor, dst: Accessor): void {\n\tprim.swap(src, dst);\n\tfor (const target of prim.listTargets()) {\n\t\ttarget.swap(src, dst);\n\t}\n}\n\n/** @hidden */\nexport function shallowEqualsArray(a: ArrayLike<unknown> | null, b: ArrayLike<unknown> | null) {\n\tif (a == null && b == null) return true;\n\tif (a == null || b == null) return false;\n\tif (a.length !== b.length) return false;\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) return false;\n\t}\n\treturn true;\n}\n\n/** @hidden */\nexport function remapAttribute(attribute: Accessor, remap: Uint32Array, dstCount: number) {\n\tconst elementSize = attribute.getElementSize();\n\tconst srcCount = attribute.getCount();\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = srcArray.slice(0, dstCount * elementSize);\n\n\tfor (let i = 0; i < srcCount; i++) {\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tdstArray[remap[i] * elementSize + j] = srcArray[i * elementSize + j];\n\t\t}\n\t}\n\n\tattribute.setArray(dstArray);\n}\n\n/** @hidden */\nexport function createIndices(count: number, maxIndex = count): Uint16Array | Uint32Array {\n\tconst array = maxIndex <= 65534 ? new Uint16Array(count) : new Uint32Array(count);\n\tfor (let i = 0; i < array.length; i++) array[i] = i;\n\treturn array;\n}\n\n/** @hidden */\nexport function isUsed(prop: Property): boolean {\n\treturn prop.listParents().some((parent) => parent.propertyType !== PropertyType.ROOT);\n}\n\n/**\n * Creates a unique key associated with the structure and draw call characteristics of\n * a {@link Primitive}, independent of its vertex content. Helper method, used to\n * identify candidate Primitives for joining.\n * @hidden\n */\nexport function createPrimGroupKey(prim: Primitive): string {\n\tconst document = Document.fromGraph(prim.getGraph())!;\n\tconst material = prim.getMaterial();\n\tconst materialIndex = document.getRoot().listMaterials().indexOf(material!);\n\tconst mode = prim.getMode();\n\tconst indices = !!prim.getIndices();\n\n\tconst attributes = prim\n\t\t.listSemantics()\n\t\t.sort()\n\t\t.map((semantic) => {\n\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\tconst elementSize = attribute.getElementSize();\n\t\t\tconst componentType = attribute.getComponentType();\n\t\t\treturn `${semantic}:${elementSize}:${componentType}`;\n\t\t})\n\t\t.join('+');\n\n\tconst targets = prim\n\t\t.listTargets()\n\t\t.map((target) => {\n\t\t\treturn target\n\t\t\t\t.listSemantics()\n\t\t\t\t.sort()\n\t\t\t\t.map((semantic) => {\n\t\t\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\t\t\tconst elementSize = attribute.getElementSize();\n\t\t\t\t\tconst componentType = attribute.getComponentType();\n\t\t\t\t\treturn `${semantic}:${elementSize}:${componentType}`;\n\t\t\t\t})\n\t\t\t\t.join('+');\n\t\t})\n\t\t.join('~');\n\n\treturn `${materialIndex}|${mode}|${indices}|${attributes}|${targets}`;\n}\n\n/** @hidden */\nexport function fitWithin(size: vec2, limit: vec2): vec2 {\n\tconst [maxWidth, maxHeight] = limit;\n\tconst [srcWidth, srcHeight] = size;\n\n\tif (srcWidth <= maxWidth && srcHeight <= maxHeight) return size;\n\n\tlet dstWidth = srcWidth;\n\tlet dstHeight = srcHeight;\n\n\tif (dstWidth > maxWidth) {\n\t\tdstHeight = Math.floor(dstHeight * (maxWidth / dstWidth));\n\t\tdstWidth = maxWidth;\n\t}\n\n\tif (dstHeight > maxHeight) {\n\t\tdstWidth = Math.floor(dstWidth * (maxHeight / dstHeight));\n\t\tdstHeight = maxHeight;\n\t}\n\n\treturn [dstWidth, dstHeight];\n}\n","import type { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { getBounds } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'center';\n\n/** Options for the {@link center} function. */\nexport interface CenterOptions {\n\t/** Location on the model to be considered the pivot, and recentered at the origin. */\n\tpivot?: 'center' | 'above' | 'below' | vec3;\n}\n\nconst CENTER_DEFAULTS: Required<CenterOptions> = { pivot: 'center' };\n\n/**\n * Centers the {@link Scene} at the origin, or above/below it. Transformations from animation,\n * skinning, and morph targets are not taken into account.\n *\n * Example:\n *\n * ```ts\n * await document.transform(center({pivot: 'below'}));\n * ```\n *\n * @category Transforms\n */\nexport function center(_options: CenterOptions = CENTER_DEFAULTS): Transform {\n\tconst options = { ...CENTER_DEFAULTS, ..._options } as Required<CenterOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst isAnimated = root.listAnimations().length > 0 || root.listSkins().length > 0;\n\n\t\tdoc.getRoot()\n\t\t\t.listScenes()\n\t\t\t.forEach((scene, index) => {\n\t\t\t\tlogger.debug(`${NAME}: Scene ${index + 1} / ${root.listScenes().length}.`);\n\n\t\t\t\tlet pivot: vec3;\n\t\t\t\tif (typeof options.pivot === 'string') {\n\t\t\t\t\tconst bbox = getBounds(scene);\n\t\t\t\t\tpivot = [\n\t\t\t\t\t\t(bbox.max[0] - bbox.min[0]) / 2 + bbox.min[0],\n\t\t\t\t\t\t(bbox.max[1] - bbox.min[1]) / 2 + bbox.min[1],\n\t\t\t\t\t\t(bbox.max[2] - bbox.min[2]) / 2 + bbox.min[2],\n\t\t\t\t\t];\n\t\t\t\t\tif (options.pivot === 'above') pivot[1] = bbox.max[1];\n\t\t\t\t\tif (options.pivot === 'below') pivot[1] = bbox.min[1];\n\t\t\t\t} else {\n\t\t\t\t\tpivot = options.pivot as vec3;\n\t\t\t\t}\n\n\t\t\t\tlogger.debug(`${NAME}: Pivot \"${pivot.join(', ')}\".`);\n\n\t\t\t\tconst offset: vec3 = [-1 * pivot[0], -1 * pivot[1], -1 * pivot[2]];\n\n\t\t\t\tif (isAnimated) {\n\t\t\t\t\tlogger.debug(`${NAME}: Model contains animation or skin. Adding a wrapper node.`);\n\t\t\t\t\tconst offsetNode = doc.createNode('Pivot').setTranslation(offset);\n\t\t\t\t\tscene.listChildren().forEach((child) => offsetNode.addChild(child));\n\t\t\t\t\tscene.addChild(offsetNode);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug(`${NAME}: Skipping wrapper, offsetting all root nodes.`);\n\t\t\t\t\tscene.listChildren().forEach((child) => {\n\t\t\t\t\t\tconst t = child.getTranslation();\n\t\t\t\t\t\tchild.setTranslation([t[0] + offset[0], t[1] + offset[1], t[2] + offset[2]]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { Node, Scene } from '@gltf-transform/core';\n\n/**\n * Finds the parent {@link Scene Scenes} associated with the given {@link Node}.\n * In most cases a Node is associated with only one Scene, but it is possible\n * for a Node to be located in two or more Scenes, or none at all.\n *\n * Example:\n *\n * ```typescript\n * import { listNodeScenes } from '@gltf-transform/functions';\n *\n * const node = document.getRoot().listNodes()\n *  .find((node) => node.getName() === 'MyNode');\n *\n * const scenes = listNodeScenes(node);\n * ```\n */\nexport function listNodeScenes(node: Node): Scene[] {\n\tconst visited = new Set<Node>();\n\n\tlet child = node;\n\tlet parent: Node | null;\n\n\twhile ((parent = child.getParentNode() as Node | null)) {\n\t\tif (visited.has(parent)) {\n\t\t\tthrow new Error('Circular dependency in scene graph.');\n\t\t}\n\t\tvisited.add(parent);\n\t\tchild = parent;\n\t}\n\n\treturn child.listParents().filter((parent) => parent instanceof Scene) as Scene[];\n}\n","import type { Node } from '@gltf-transform/core';\nimport { listNodeScenes } from './list-node-scenes.js';\n\n/**\n * Clears the parent of the given {@link Node}, leaving it attached\n * directly to its {@link Scene}. Inherited transforms will be applied\n * to the Node. This operation changes the Node's local transform,\n * but leaves its world transform unchanged.\n *\n * Example:\n *\n * ```typescript\n * import { clearNodeParent } from '@gltf-transform/functions';\n *\n * scene.traverse((node) => { ... }); // Scene → … → Node\n *\n * clearNodeParent(node);\n *\n * scene.traverse((node) => { ... }); // Scene → Node\n * ```\n *\n * To clear _all_ transforms of a Node, first clear its inherited transforms with\n * {@link clearNodeParent}, then clear the local transform with {@link clearNodeTransform}.\n */\nexport function clearNodeParent(node: Node): Node {\n\tconst scenes = listNodeScenes(node);\n\tconst parent = node.getParentNode();\n\n\tif (!parent) return node;\n\n\t// Apply inherited transforms to local matrix. Skinned meshes are not affected\n\t// by the node parent's transform, and can be ignored. Updates to IBMs and TRS\n\t// animations are out of scope in this context.\n\tnode.setMatrix(node.getWorldMatrix());\n\n\t// Add to Scene roots.\n\tparent.removeChild(node);\n\tfor (const scene of scenes) scene.addChild(node);\n\n\treturn node;\n}\n","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import type { Primitive } from '@gltf-transform/core';\nimport { createIndices } from './utils.js';\n\n/**\n * Removes degenerate triangles from the {@link Primitive}. Any triangle containing fewer than\n * three different vertex indices is considered degenerate. This method does not merge/weld\n * different vertices containing identical data — use {@link weld} first for that purpose.\n *\n * @internal\n */\nexport function cleanPrimitive(prim: Primitive): void {\n\tconst indices = prim.getIndices();\n\tif (!indices) return;\n\n\tconst tmpIndicesArray = [];\n\tlet maxIndex = -Infinity;\n\n\tfor (let i = 0, il = indices.getCount(); i < il; i += 3) {\n\t\tconst a = indices.getScalar(i);\n\t\tconst b = indices.getScalar(i + 1);\n\t\tconst c = indices.getScalar(i + 2);\n\n\t\tif (a === b || a === c || b === c) continue;\n\n\t\ttmpIndicesArray.push(a, b, c);\n\t\tmaxIndex = Math.max(maxIndex, a, b, c);\n\t}\n\n\tconst dstIndicesArray = createIndices(tmpIndicesArray.length, maxIndex);\n\tdstIndicesArray.set(tmpIndicesArray);\n\tindices.setArray(dstIndicesArray);\n}\n","import {\n\tAccessor,\n\tBufferUtils,\n\tDocument,\n\tMaterial,\n\tMesh,\n\tPrimitive,\n\tPrimitiveTarget,\n\tProperty,\n\tPropertyType,\n\tRoot,\n\tSkin,\n\tTexture,\n\tTransform,\n} from '@gltf-transform/core';\nimport { createTransform, shallowEqualsArray } from './utils.js';\n\nconst NAME = 'dedup';\n\nexport interface DedupOptions {\n\t/** Keep properties with unique names, even if they are duplicates. */\n\tkeepUniqueNames?: boolean;\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes?: string[];\n}\n\nconst DEDUP_DEFAULTS: Required<DedupOptions> = {\n\tkeepUniqueNames: false,\n\tpropertyTypes: [\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.MESH,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.MATERIAL,\n\t\tPropertyType.SKIN,\n\t],\n};\n\n/**\n * Removes duplicate {@link Accessor}, {@link Mesh}, {@link Texture}, and {@link Material}\n * properties. Partially based on a\n * [gist by mattdesl](https://gist.github.com/mattdesl/aea40285e2d73916b6b9101b36d84da8). Only\n * accessors in mesh primitives, morph targets, and animation samplers are processed.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listMeshes(); // → [Mesh, Mesh, Mesh]\n *\n * await document.transform(dedup({propertyTypes: [PropertyType.MESH]}));\n *\n * document.getRoot().listMeshes(); // → [Mesh]\n * ```\n *\n * @category Transforms\n */\nexport function dedup(_options: DedupOptions = DEDUP_DEFAULTS): Transform {\n\tconst options = { ...DEDUP_DEFAULTS, ..._options } as Required<DedupOptions>;\n\n\tconst propertyTypes = new Set(options.propertyTypes);\n\tfor (const propertyType of options.propertyTypes) {\n\t\tif (!DEDUP_DEFAULTS.propertyTypes.includes(propertyType)) {\n\t\t\tthrow new Error(`${NAME}: Unsupported deduplication on type \"${propertyType}\".`);\n\t\t}\n\t}\n\n\treturn createTransform(NAME, (document: Document): void => {\n\t\tconst logger = document.getLogger();\n\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) dedupAccessors(document);\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) dedupImages(document, options);\n\t\tif (propertyTypes.has(PropertyType.MATERIAL)) dedupMaterials(document, options);\n\t\tif (propertyTypes.has(PropertyType.MESH)) dedupMeshes(document, options);\n\t\tif (propertyTypes.has(PropertyType.SKIN)) dedupSkins(document, options);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction dedupAccessors(document: Document): void {\n\tconst logger = document.getLogger();\n\n\t// Find all accessors used for mesh and animation data.\n\tconst indicesMap = new Map<string, Set<Accessor>>();\n\tconst attributeMap = new Map<string, Set<Accessor>>();\n\tconst inputMap = new Map<string, Set<Accessor>>();\n\tconst outputMap = new Map<string, Set<Accessor>>();\n\n\tconst meshes = document.getRoot().listMeshes();\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => hashAccessor(accessor, attributeMap));\n\t\t\thashAccessor(primitive.getIndices(), indicesMap);\n\t\t});\n\t});\n\n\tfor (const animation of document.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\thashAccessor(sampler.getInput(), inputMap);\n\t\t\thashAccessor(sampler.getOutput(), outputMap);\n\t\t}\n\t}\n\n\t// Add accessor to the appropriate hash group. Hashes are _non-unique_,\n\t// intended to quickly compare everything accept the underlying array.\n\tfunction hashAccessor(accessor: Accessor | null, group: Map<string, Set<Accessor>>): void {\n\t\tif (!accessor) return;\n\n\t\tconst hash = [\n\t\t\taccessor.getCount(),\n\t\t\taccessor.getType(),\n\t\t\taccessor.getComponentType(),\n\t\t\taccessor.getNormalized(),\n\t\t\taccessor.getSparse(),\n\t\t].join(':');\n\n\t\tlet hashSet = group.get(hash);\n\t\tif (!hashSet) group.set(hash, (hashSet = new Set<Accessor>()));\n\t\thashSet.add(accessor);\n\t}\n\n\t// Find duplicate accessors of a given type.\n\tfunction detectDuplicates(accessors: Accessor[], duplicates: Map<Accessor, Accessor>): void {\n\t\tfor (let i = 0; i < accessors.length; i++) {\n\t\t\tconst a = accessors[i];\n\t\t\tconst aData = BufferUtils.toView(a.getArray()!);\n\n\t\t\tif (duplicates.has(a)) continue;\n\n\t\t\tfor (let j = i + 1; j < accessors.length; j++) {\n\t\t\t\tconst b = accessors[j];\n\n\t\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t\t// Just compare the arrays — everything else was covered by the\n\t\t\t\t// hash. Comparing uint8 views is faster than comparing the\n\t\t\t\t// original typed arrays.\n\t\t\t\tif (BufferUtils.equals(aData, BufferUtils.toView(b.getArray()!))) {\n\t\t\t\t\tduplicates.set(b, a);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tlet total = 0;\n\tconst duplicates = new Map<Accessor, Accessor>();\n\tfor (const group of [attributeMap, indicesMap, inputMap, outputMap]) {\n\t\tfor (const hashGroup of group.values()) {\n\t\t\ttotal += hashGroup.size;\n\t\t\tdetectDuplicates(Array.from(hashGroup), duplicates);\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${total} accessors.`);\n\n\t// Dissolve duplicate vertex attributes and indices.\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => {\n\t\t\t\tif (duplicates.has(accessor)) {\n\t\t\t\t\tprimitive.swap(accessor, duplicates.get(accessor) as Accessor);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst indices = primitive.getIndices();\n\t\t\tif (indices && duplicates.has(indices)) {\n\t\t\t\tprimitive.swap(indices, duplicates.get(indices) as Accessor);\n\t\t\t}\n\t\t});\n\t});\n\n\t// Dissolve duplicate animation sampler inputs and outputs.\n\tfor (const animation of document.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (input && duplicates.has(input)) {\n\t\t\t\tsampler.swap(input, duplicates.get(input) as Accessor);\n\t\t\t}\n\t\t\tif (output && duplicates.has(output)) {\n\t\t\t\tsampler.swap(output, duplicates.get(output) as Accessor);\n\t\t\t}\n\t\t}\n\t}\n\n\tArray.from(duplicates.keys()).forEach((accessor) => accessor.dispose());\n}\n\nfunction dedupMeshes(document: Document, options: Required<DedupOptions>): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\n\t// Create Reference -> ID lookup table.\n\tconst refs = new Map<Accessor | Material, number>();\n\troot.listAccessors().forEach((accessor, index) => refs.set(accessor, index));\n\troot.listMaterials().forEach((material, index) => refs.set(material, index));\n\n\t// For each mesh, create a hashkey.\n\tconst numMeshes = root.listMeshes().length;\n\tconst uniqueMeshes = new Map<string, Mesh>();\n\tfor (const src of root.listMeshes()) {\n\t\t// For each mesh, create a hashkey.\n\t\tconst srcKeyItems = [];\n\t\tfor (const prim of src.listPrimitives()) {\n\t\t\tsrcKeyItems.push(createPrimitiveKey(prim, refs));\n\t\t}\n\n\t\t// If another mesh exists with the same key, replace all instances with that, and dispose\n\t\t// of the duplicate. If not, just cache it.\n\t\tlet meshKey = '';\n\t\tif (options.keepUniqueNames) meshKey += src.getName() + ';';\n\t\tmeshKey += srcKeyItems.join(';');\n\n\t\tif (uniqueMeshes.has(meshKey)) {\n\t\t\tconst targetMesh = uniqueMeshes.get(meshKey)!;\n\t\t\tsrc.listParents().forEach((parent) => {\n\t\t\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\t\t\tparent.swap(src, targetMesh);\n\t\t\t\t}\n\t\t\t});\n\t\t\tsrc.dispose();\n\t\t} else {\n\t\t\tuniqueMeshes.set(meshKey, src);\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${numMeshes - uniqueMeshes.size} of ${numMeshes} meshes.`);\n}\n\nfunction dedupImages(document: Document, options: Required<DedupOptions>): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\tconst textures = root.listTextures();\n\tconst duplicates: Map<Texture, Texture> = new Map();\n\n\t// Compare each texture to every other texture — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < textures.length; i++) {\n\t\tconst a = textures[i];\n\t\tconst aData = a.getImage();\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = i + 1; j < textures.length; j++) {\n\t\t\tconst b = textures[j];\n\t\t\tconst bData = b.getImage();\n\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t// URIs are intentionally not compared.\n\t\t\tif (a.getMimeType() !== b.getMimeType()) continue;\n\t\t\tif (options.keepUniqueNames && a.getName() !== b.getName()) continue;\n\n\t\t\tconst aSize = a.getSize();\n\t\t\tconst bSize = b.getSize();\n\t\t\tif (!aSize || !bSize) continue;\n\t\t\tif (aSize[0] !== bSize[0]) continue;\n\t\t\tif (aSize[1] !== bSize[1]) continue;\n\t\t\tif (!aData || !bData) continue;\n\t\t\tif (BufferUtils.equals(aData, bData)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${root.listTextures().length} textures.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\nfunction dedupMaterials(document: Document, options: Required<DedupOptions>): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\tconst materials = root.listMaterials();\n\tconst duplicates = new Map<Material, Material>();\n\tconst modifierCache = new Map<Material, boolean>();\n\tconst skip = new Set<string>();\n\n\tif (!options.keepUniqueNames) {\n\t\tskip.add('name');\n\t}\n\n\t// Compare each material to every other material — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < materials.length; i++) {\n\t\tconst a = materials[i];\n\n\t\tif (duplicates.has(a)) continue;\n\t\tif (hasModifier(a, modifierCache)) continue;\n\n\t\tfor (let j = i + 1; j < materials.length; j++) {\n\t\t\tconst b = materials[j];\n\n\t\t\tif (duplicates.has(b)) continue;\n\t\t\tif (hasModifier(b, modifierCache)) continue;\n\n\t\t\tif (a.equals(b, skip)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${materials.length} materials.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\nfunction dedupSkins(document: Document, options: Required<DedupOptions>): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\tconst skins = root.listSkins();\n\tconst duplicates = new Map<Skin, Skin>();\n\tconst skip = new Set(['joints']);\n\n\tif (!options.keepUniqueNames) {\n\t\tskip.add('name');\n\t}\n\n\tfor (let i = 0; i < skins.length; i++) {\n\t\tconst a = skins[i];\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = i + 1; j < skins.length; j++) {\n\t\t\tconst b = skins[j];\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t// Check joints with shallow equality, not deep equality.\n\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/RecursiveSkeletons\n\t\t\tif (a.equals(b, skip) && shallowEqualsArray(a.listJoints(), b.listJoints())) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${skins.length} skins.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\n/** Generates a key unique to the content of a primitive or target. */\nfunction createPrimitiveKey(prim: Primitive | PrimitiveTarget, refs: Map<Accessor | Material, number>): string {\n\tconst primKeyItems = [];\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tprimKeyItems.push(semantic + ':' + refs.get(attribute));\n\t}\n\tif (prim instanceof Primitive) {\n\t\tconst indices = prim.getIndices();\n\t\tif (indices) {\n\t\t\tprimKeyItems.push('indices:' + refs.get(indices));\n\t\t}\n\t\tconst material = prim.getMaterial();\n\t\tif (material) {\n\t\t\tprimKeyItems.push('material:' + refs.get(material));\n\t\t}\n\t\tprimKeyItems.push('mode:' + prim.getMode());\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tprimKeyItems.push('target:' + createPrimitiveKey(target, refs));\n\t\t}\n\t}\n\treturn primKeyItems.join(',');\n}\n\n/**\n * Detects dependencies modified by a parent reference, to conservatively prevent merging. When\n * implementing extensions like KHR_animation_pointer, the 'modifyChild' attribute should be added\n * to graph edges connecting the animation channel to the animated target property.\n *\n * NOTICE: Implementation is conservative, and could prevent merging two materials sharing the\n * same animated \"Clearcoat\" ExtensionProperty. While that scenario is possible for an in-memory\n * glTF Transform graph, valid glTF input files do not have that risk.\n */\nfunction hasModifier(prop: Property, cache: Map<Property, boolean>): boolean {\n\tif (cache.has(prop)) return cache.get(prop)!;\n\n\tconst graph = prop.getGraph();\n\tconst visitedNodes = new Set<Property>();\n\tconst edgeQueue = graph.listParentEdges(prop);\n\n\t// Search dependency subtree for 'modifyChild' attribute.\n\twhile (edgeQueue.length > 0) {\n\t\tconst edge = edgeQueue.pop()!;\n\t\tif (edge.getAttributes().modifyChild === true) {\n\t\t\tcache.set(prop, true);\n\t\t\treturn true;\n\t\t}\n\n\t\tconst child = edge.getChild();\n\t\tif (visitedNodes.has(child)) continue;\n\n\t\tfor (const childEdge of graph.listChildEdges(child)) {\n\t\t\tedgeQueue.push(childEdge);\n\t\t}\n\t}\n\n\tcache.set(prop, false);\n\treturn false;\n}\n","import { Texture } from '@gltf-transform/core';\n\nconst SRGB_PATTERN = /color|emissive|diffuse/i;\n\n/**\n * Returns the color space (if any) implied by the {@link Material} slots to\n * which a texture is assigned, or null for non-color textures. If the texture\n * is not connected to any {@link Material}, this function will also return\n * null — any metadata in the image file will be ignored.\n *\n * Under current glTF specifications, only 'srgb' and non-color (null) textures\n * are used.\n *\n * Example:\n *\n * ```typescript\n * import { getTextureColorSpace } from '@gltf-transform/functions';\n *\n * const baseColorTexture = material.getBaseColorTexture();\n * const normalTexture = material.getNormalTexture();\n *\n * getTextureColorSpace(baseColorTexture); // → 'srgb'\n * getTextureColorSpace(normalTexture); // → null\n * ```\n */\nexport function getTextureColorSpace(texture: Texture): string | null {\n\tconst graph = texture.getGraph();\n\tconst edges = graph.listParentEdges(texture);\n\tconst isSRGB = edges.some((edge) => {\n\t\treturn edge.getAttributes().isColor || SRGB_PATTERN.test(edge.getName());\n\t});\n\treturn isSRGB ? 'srgb' : null;\n}\n","import { ExtensionProperty, Material, Property, Texture, TextureInfo } from '@gltf-transform/core';\n\n/**\n * Lists all {@link TextureInfo} definitions associated with a given\n * {@link Texture}. May be used to determine which UV transforms\n * and texCoord indices are applied to the material, without explicitly\n * checking the material properties and extensions.\n *\n * Example:\n *\n * ```typescript\n * // Find TextureInfo instances associated with the texture.\n * const results = listTextureInfo(texture);\n *\n * // Find which UV sets (TEXCOORD_0, TEXCOORD_1, ...) are required.\n * const texCoords = results.map((info) => info.getTexCoord());\n * // → [0, 1]\n * ```\n */\nexport function listTextureInfo(texture: Texture): TextureInfo[] {\n\tconst graph = texture.getGraph();\n\tconst results = new Set<TextureInfo>();\n\n\tfor (const textureEdge of graph.listParentEdges(texture)) {\n\t\tconst parent = textureEdge.getParent();\n\t\tconst name = textureEdge.getName() + 'Info';\n\n\t\tfor (const edge of graph.listChildEdges(parent)) {\n\t\t\tconst child = edge.getChild();\n\t\t\tif (child instanceof TextureInfo && edge.getName() === name) {\n\t\t\t\tresults.add(child);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn Array.from(results);\n}\n\n/**\n * Lists all {@link TextureInfo} definitions associated with any {@link Texture}\n * on the given {@link Material}. May be used to determine which UV transforms\n * and texCoord indices are applied to the material, without explicitly\n * checking the material properties and extensions.\n *\n * Example:\n *\n * ```typescript\n * const results = listTextureInfoByMaterial(material);\n *\n * const texCoords = results.map((info) => info.getTexCoord());\n * // → [0, 1]\n * ```\n */\nexport function listTextureInfoByMaterial(material: Material): TextureInfo[] {\n\tconst graph = material.getGraph();\n\tconst visited = new Set<Property>();\n\tconst results = new Set<TextureInfo>();\n\n\tfunction traverse(prop: Material | ExtensionProperty) {\n\t\tconst textureInfoNames = new Set<string>();\n\n\t\tfor (const edge of graph.listChildEdges(prop)) {\n\t\t\tif (edge.getChild() instanceof Texture) {\n\t\t\t\ttextureInfoNames.add(edge.getName() + 'Info');\n\t\t\t}\n\t\t}\n\n\t\tfor (const edge of graph.listChildEdges(prop)) {\n\t\t\tconst child = edge.getChild();\n\t\t\tif (visited.has(child)) continue;\n\t\t\tvisited.add(child);\n\n\t\t\tif (child instanceof TextureInfo && textureInfoNames.has(edge.getName())) {\n\t\t\t\tresults.add(child);\n\t\t\t} else if (child instanceof ExtensionProperty) {\n\t\t\t\ttraverse(child);\n\t\t\t}\n\t\t}\n\t}\n\n\ttraverse(material);\n\treturn Array.from(results);\n}\n","import { Document, Texture } from '@gltf-transform/core';\n\n/**\n * Returns names of all texture slots using the given texture.\n *\n * Example:\n *\n * ```js\n * const slots = listTextureSlots(texture);\n * // → ['occlusionTexture', 'metallicRoughnesTexture']\n * ```\n */\nexport function listTextureSlots(texture: Texture): string[] {\n\tconst document = Document.fromGraph(texture.getGraph())!;\n\tconst root = document.getRoot();\n\tconst slots = texture\n\t\t.getGraph()\n\t\t.listParentEdges(texture)\n\t\t.filter((edge) => edge.getParent() !== root)\n\t\t.map((edge) => edge.getName());\n\treturn Array.from(new Set(slots));\n}\n","import {\n\tAnimationChannel,\n\tColorUtils,\n\tDocument,\n\tExtensionProperty,\n\tGraph,\n\tILogger,\n\tMaterial,\n\tNode,\n\tPrimitive,\n\tPrimitiveTarget,\n\tProperty,\n\tPropertyType,\n\tRoot,\n\tScene,\n\tTexture,\n\tTextureInfo,\n\tTransform,\n\tvec3,\n\tvec4,\n} from '@gltf-transform/core';\nimport { mul as mulVec3 } from 'gl-matrix/vec3';\nimport { add, create, len, mul, scale, sub } from 'gl-matrix/vec4';\nimport { NdArray } from 'ndarray';\nimport { getPixels } from 'ndarray-pixels';\nimport { getTextureColorSpace } from './get-texture-color-space.js';\nimport { listTextureInfoByMaterial } from './list-texture-info.js';\nimport { listTextureSlots } from './list-texture-slots.js';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'prune';\n\nconst EPS = 3 / 255;\n\nexport interface PruneOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes?: string[];\n\t/** Whether to keep empty leaf nodes. */\n\tkeepLeaves?: boolean;\n\t/** Whether to keep unused vertex attributes, such as UVs without an assigned texture. */\n\tkeepAttributes?: boolean;\n\t/** Whether to keep redundant mesh indices, where vertex count equals index count. */\n\tkeepIndices?: boolean;\n\t/** Whether to keep single-color textures that can be converted to material factors. */\n\tkeepSolidTextures?: boolean;\n}\nconst PRUNE_DEFAULTS: Required<PruneOptions> = {\n\tpropertyTypes: [\n\t\tPropertyType.NODE,\n\t\tPropertyType.SKIN,\n\t\tPropertyType.MESH,\n\t\tPropertyType.CAMERA,\n\t\tPropertyType.PRIMITIVE,\n\t\tPropertyType.PRIMITIVE_TARGET,\n\t\tPropertyType.ANIMATION,\n\t\tPropertyType.MATERIAL,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.BUFFER,\n\t],\n\tkeepLeaves: false,\n\tkeepAttributes: true,\n\tkeepIndices: true,\n\tkeepSolidTextures: true,\n};\n\n/**\n * Removes properties from the file if they are not referenced by a {@link Scene}. Commonly helpful\n * for cleaning up after other operations, e.g. allowing a node to be detached and any unused\n * meshes, materials, or other resources to be removed automatically.\n *\n * Example:\n *\n * ```javascript\n * document.getRoot().listMaterials(); // → [Material, Material]\n *\n * await document.transform(prune());\n *\n * document.getRoot().listMaterials(); // → [Material]\n * ```\n *\n * Use {@link PruneOptions} to control what content should be pruned. For example, you can preserve\n * empty objects in the scene hierarchy using the option `keepLeaves`.\n *\n * @category Transforms\n */\nexport function prune(_options: PruneOptions = PRUNE_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...PRUNE_DEFAULTS, ..._options } as Required<PruneOptions>;\n\tconst propertyTypes = new Set(options.propertyTypes);\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tconst root = document.getRoot();\n\t\tconst graph = document.getGraph();\n\n\t\tconst counter = new DisposeCounter();\n\n\t\t// Prune top-down, so that low-level properties like accessors can be removed if the\n\t\t// properties referencing them are removed.\n\n\t\t// Prune empty Meshes.\n\t\tif (propertyTypes.has(PropertyType.MESH)) {\n\t\t\tfor (const mesh of root.listMeshes()) {\n\t\t\t\tif (mesh.listPrimitives().length > 0) continue;\n\t\t\t\tcounter.dispose(mesh);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.NODE)) {\n\t\t\tif (!options.keepLeaves) {\n\t\t\t\tfor (const scene of root.listScenes()) {\n\t\t\t\t\tnodeTreeShake(graph, scene, counter);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const node of root.listNodes()) {\n\t\t\t\ttreeShake(node, counter);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.SKIN)) {\n\t\t\tfor (const skin of root.listSkins()) {\n\t\t\t\ttreeShake(skin, counter);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.MESH)) {\n\t\t\tfor (const mesh of root.listMeshes()) {\n\t\t\t\ttreeShake(mesh, counter);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.CAMERA)) {\n\t\t\tfor (const camera of root.listCameras()) {\n\t\t\t\ttreeShake(camera, counter);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.PRIMITIVE)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE, counter);\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.PRIMITIVE_TARGET)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE_TARGET, counter);\n\t\t}\n\n\t\t// Prune unused vertex attributes.\n\t\tif (!options.keepAttributes && propertyTypes.has(PropertyType.ACCESSOR)) {\n\t\t\tconst materialPrims = new Map<Material, Set<Primitive>>();\n\t\t\tfor (const mesh of root.listMeshes()) {\n\t\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\t\tconst material = prim.getMaterial();\n\t\t\t\t\tconst required = listRequiredSemantics(document, material);\n\t\t\t\t\tconst unused = listUnusedSemantics(prim, required);\n\t\t\t\t\tpruneAttributes(prim, unused);\n\t\t\t\t\tprim.listTargets().forEach((target) => pruneAttributes(target, unused));\n\t\t\t\t\tif (material) {\n\t\t\t\t\t\tmaterialPrims.has(material)\n\t\t\t\t\t\t\t? materialPrims.get(material)!.add(prim)\n\t\t\t\t\t\t\t: materialPrims.set(material, new Set([prim]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const [material, prims] of materialPrims) {\n\t\t\t\tshiftTexCoords(material, Array.from(prims));\n\t\t\t}\n\t\t}\n\n\t\t// Prune unused mesh indices.\n\t\tif (!options.keepIndices && propertyTypes.has(PropertyType.ACCESSOR)) {\n\t\t\tfor (const mesh of root.listMeshes()) {\n\t\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\t\tpruneIndices(prim);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Pruning animations is a bit more complicated:\n\t\t// (1) Remove channels without target nodes.\n\t\t// (2) Remove animations without channels.\n\t\t// (3) Remove samplers orphaned in the process.\n\t\tif (propertyTypes.has(PropertyType.ANIMATION)) {\n\t\t\tfor (const anim of root.listAnimations()) {\n\t\t\t\tfor (const channel of anim.listChannels()) {\n\t\t\t\t\tif (!channel.getTargetNode()) {\n\t\t\t\t\t\tcounter.dispose(channel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!anim.listChannels().length) {\n\t\t\t\t\tconst samplers = anim.listSamplers();\n\t\t\t\t\ttreeShake(anim, counter);\n\t\t\t\t\tsamplers.forEach((sampler) => treeShake(sampler, counter));\n\t\t\t\t} else {\n\t\t\t\t\tanim.listSamplers().forEach((sampler) => treeShake(sampler, counter));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.MATERIAL)) {\n\t\t\troot.listMaterials().forEach((material) => treeShake(material, counter));\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) {\n\t\t\troot.listTextures().forEach((texture) => treeShake(texture, counter));\n\t\t\tif (!options.keepSolidTextures) {\n\t\t\t\tawait pruneSolidTextures(document, counter);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) {\n\t\t\troot.listAccessors().forEach((accessor) => treeShake(accessor, counter));\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.BUFFER)) {\n\t\t\troot.listBuffers().forEach((buffer) => treeShake(buffer, counter));\n\t\t}\n\n\t\t// TODO(bug): This process does not identify unused ExtensionProperty instances. That could\n\t\t// be a future enhancement, either tracking unlinked properties as if they were connected\n\t\t// to the Graph, or iterating over a property list provided by the Extension. Properties in\n\t\t// use by an Extension are correctly preserved, in the meantime.\n\n\t\tif (!counter.empty()) {\n\t\t\tconst str = counter\n\t\t\t\t.entries()\n\t\t\t\t.map(([type, count]) => `${type} (${count})`)\n\t\t\t\t.join(', ');\n\t\t\tlogger.info(`${NAME}: Removed types... ${str}`);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No unused properties found.`);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**********************************************************************************************\n * Utility for disposing properties and reporting statistics afterward.\n */\n\nclass DisposeCounter {\n\tpublic readonly disposed: Record<string, number> = {};\n\n\tempty(): boolean {\n\t\tfor (const key in this.disposed) return false;\n\t\treturn true;\n\t}\n\n\tentries(): [string, number][] {\n\t\treturn Object.entries(this.disposed);\n\t}\n\n\t/** Records properties disposed by type. */\n\tdispose(prop: Property): void {\n\t\tthis.disposed[prop.propertyType] = this.disposed[prop.propertyType] || 0;\n\t\tthis.disposed[prop.propertyType]++;\n\t\tprop.dispose();\n\t}\n}\n\n/**********************************************************************************************\n * Helper functions for the {@link prune} transform.\n *\n * IMPORTANT: These functions were previously declared in function scope, but\n * broke in the CommonJS build due to a buggy Babel transform. See:\n * https://github.com/donmccurdy/glTF-Transform/issues/1140\n */\n\n/** Disposes of the given property if it is unused. */\nfunction treeShake(prop: Property, counter: DisposeCounter): void {\n\t// Consider a property unused if it has no references from another property, excluding\n\t// types Root and AnimationChannel.\n\tconst parents = prop.listParents().filter((p) => !(p instanceof Root || p instanceof AnimationChannel));\n\tif (!parents.length) {\n\t\tcounter.dispose(prop);\n\t}\n}\n\n/**\n * For property types the Root does not maintain references to, we'll need to search the\n * graph. It's possible that objects may have been constructed without any outbound links,\n * but since they're not on the graph they don't need to be tree-shaken.\n */\nfunction indirectTreeShake(graph: Graph<Property>, propertyType: string, counter: DisposeCounter): void {\n\tfor (const edge of graph.listEdges()) {\n\t\tconst parent = edge.getParent();\n\t\tif (parent.propertyType === propertyType) {\n\t\t\ttreeShake(parent, counter);\n\t\t}\n\t}\n}\n\n/** Iteratively prunes leaf Nodes without contents. */\nfunction nodeTreeShake(graph: Graph<Property>, prop: Node | Scene, counter: DisposeCounter): void {\n\tprop.listChildren().forEach((child) => nodeTreeShake(graph, child, counter));\n\n\tif (prop instanceof Scene) return;\n\n\tconst isUsed = graph.listParentEdges(prop).some((e) => {\n\t\tconst ptype = e.getParent().propertyType;\n\t\treturn ptype !== PropertyType.ROOT && ptype !== PropertyType.SCENE && ptype !== PropertyType.NODE;\n\t});\n\tconst isEmpty = graph.listChildren(prop).length === 0;\n\tif (isEmpty && !isUsed) {\n\t\tcounter.dispose(prop);\n\t}\n}\n\nfunction pruneAttributes(prim: Primitive | PrimitiveTarget, unused: string[]) {\n\tfor (const semantic of unused) {\n\t\tprim.setAttribute(semantic, null);\n\t}\n}\n\nfunction pruneIndices(prim: Primitive) {\n\tconst indices = prim.getIndices();\n\tconst attribute = prim.listAttributes()[0];\n\tif (indices && attribute && indices.getCount() === attribute.getCount()) {\n\t\tprim.setIndices(null);\n\t}\n}\n\n/**\n * Lists vertex attribute semantics that are unused when rendering a given primitive.\n */\nfunction listUnusedSemantics(prim: Primitive | PrimitiveTarget, required: Set<string>): string[] {\n\tconst unused = [];\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (semantic === 'TANGENT' && !required.has(semantic)) {\n\t\t\tunused.push(semantic);\n\t\t} else if (semantic.startsWith('TEXCOORD_') && !required.has(semantic)) {\n\t\t\tunused.push(semantic);\n\t\t} else if (semantic.startsWith('COLOR_') && semantic !== 'COLOR_0') {\n\t\t\tunused.push(semantic);\n\t\t}\n\t}\n\treturn unused;\n}\n\n/**\n * Lists vertex attribute semantics required by a material. Does not include\n * attributes that would be used unconditionally, like POSITION or NORMAL.\n */\nfunction listRequiredSemantics(\n\tdocument: Document,\n\tmaterial: Material | ExtensionProperty | null,\n\tsemantics = new Set<string>(),\n): Set<string> {\n\tif (!material) return semantics;\n\n\tconst graph = document.getGraph();\n\n\tconst edges = graph.listChildEdges(material);\n\tconst textureNames = new Set<string>();\n\n\tfor (const edge of edges) {\n\t\tif (edge.getChild() instanceof Texture) {\n\t\t\ttextureNames.add(edge.getName());\n\t\t}\n\t}\n\n\tfor (const edge of edges) {\n\t\tconst name = edge.getName();\n\t\tconst child = edge.getChild();\n\n\t\tif (child instanceof TextureInfo) {\n\t\t\tif (textureNames.has(name.replace(/Info$/, ''))) {\n\t\t\t\tsemantics.add(`TEXCOORD_${child.getTexCoord()}`);\n\t\t\t}\n\t\t}\n\n\t\tif (child instanceof Texture && name.match(/normalTexture/i)) {\n\t\t\tsemantics.add('TANGENT');\n\t\t}\n\n\t\tif (child instanceof ExtensionProperty) {\n\t\t\tlistRequiredSemantics(document, child, semantics);\n\t\t}\n\n\t\t// TODO(#748): Does KHR_materials_anisotropy imply required vertex attributes?\n\t}\n\n\treturn semantics;\n}\n\n/**\n * Shifts texCoord indices on the given material and primitives assigned to\n * that material, such that indices start at zero and ascend without gaps.\n * Prior to calling this function, the implementation must ensure that:\n * - All TEXCOORD_n attributes on these prims are used by the material.\n * - Material does not require any unavailable TEXCOORD_n attributes.\n *\n * TEXCOORD_n attributes on morph targets are shifted alongside the parent\n * prim, but gaps may remain in their semantic lists.\n */\nfunction shiftTexCoords(material: Material, prims: Primitive[]) {\n\t// Create map from srcTexCoord → dstTexCoord.\n\tconst textureInfoList = listTextureInfoByMaterial(material);\n\tconst texCoordSet = new Set(textureInfoList.map((info: TextureInfo) => info.getTexCoord()));\n\tconst texCoordList = Array.from(texCoordSet).sort();\n\tconst texCoordMap = new Map(texCoordList.map((texCoord, index) => [texCoord, index]));\n\tconst semanticMap = new Map(texCoordList.map((texCoord, index) => [`TEXCOORD_${texCoord}`, `TEXCOORD_${index}`]));\n\n\t// Update material.\n\tfor (const textureInfo of textureInfoList) {\n\t\tconst texCoord = textureInfo.getTexCoord();\n\t\ttextureInfo.setTexCoord(texCoordMap.get(texCoord)!);\n\t}\n\n\t// Update prims.\n\tfor (const prim of prims) {\n\t\tconst semantics = prim\n\t\t\t.listSemantics()\n\t\t\t.filter((semantic) => semantic.startsWith('TEXCOORD_'))\n\t\t\t.sort();\n\t\tupdatePrim(prim, semantics);\n\t\tprim.listTargets().forEach((target) => updatePrim(target, semantics));\n\t}\n\n\tfunction updatePrim(prim: Primitive | PrimitiveTarget, srcSemantics: string[]) {\n\t\tfor (const srcSemantic of srcSemantics) {\n\t\t\tconst uv = prim.getAttribute(srcSemantic);\n\t\t\tif (!uv) continue;\n\n\t\t\tconst dstSemantic = semanticMap.get(srcSemantic)!;\n\t\t\tif (dstSemantic === srcSemantic) continue;\n\n\t\t\tprim.setAttribute(dstSemantic, uv);\n\t\t\tprim.setAttribute(srcSemantic, null);\n\t\t}\n\t}\n}\n\n/**********************************************************************************************\n * Prune solid (single-color) textures.\n */\n\nasync function pruneSolidTextures(document: Document, counter: DisposeCounter): Promise<void> {\n\tconst root = document.getRoot();\n\tconst graph = document.getGraph();\n\tconst logger = document.getLogger();\n\tconst textures = root.listTextures();\n\n\tconst pending = textures.map(async (texture) => {\n\t\tconst factor = await getTextureFactor(texture);\n\t\tif (!factor) return;\n\n\t\tif (getTextureColorSpace(texture) === 'srgb') {\n\t\t\tColorUtils.convertSRGBToLinear(factor, factor);\n\t\t}\n\n\t\tconst name = texture.getName() || texture.getURI();\n\t\tconst size = texture.getSize()?.join('x');\n\t\tconst slots = listTextureSlots(texture);\n\n\t\tfor (const edge of graph.listParentEdges(texture)) {\n\t\t\tconst parent = edge.getParent();\n\t\t\tif (parent !== root && applyMaterialFactor(parent as Material, factor, edge.getName(), logger)) {\n\t\t\t\tedge.dispose();\n\t\t\t}\n\t\t}\n\n\t\tif (texture.listParents().length === 1) {\n\t\t\tcounter.dispose(texture);\n\t\t\tlogger.debug(`${NAME}: Removed solid-color texture \"${name}\" (${size}px ${slots.join(', ')})`);\n\t\t}\n\t});\n\n\tawait Promise.all(pending);\n}\n\nfunction applyMaterialFactor(\n\tmaterial: Material | ExtensionProperty,\n\tfactor: vec4,\n\tslot: string,\n\tlogger: ILogger,\n): boolean {\n\tif (material instanceof Material) {\n\t\tswitch (slot) {\n\t\t\tcase 'baseColorTexture':\n\t\t\t\tmaterial.setBaseColorFactor(mul(factor, factor, material.getBaseColorFactor()) as vec4);\n\t\t\t\treturn true;\n\t\t\tcase 'emissiveTexture':\n\t\t\t\tmaterial.setEmissiveFactor(\n\t\t\t\t\tmulVec3([0, 0, 0], factor.slice(0, 3) as vec3, material.getEmissiveFactor()) as vec3,\n\t\t\t\t);\n\t\t\t\treturn true;\n\t\t\tcase 'occlusionTexture':\n\t\t\t\treturn Math.abs(factor[0] - 1) <= EPS;\n\t\t\tcase 'metallicRoughnessTexture':\n\t\t\t\tmaterial.setRoughnessFactor(factor[1] * material.getRoughnessFactor());\n\t\t\t\tmaterial.setMetallicFactor(factor[2] * material.getMetallicFactor());\n\t\t\t\treturn true;\n\t\t\tcase 'normalTexture':\n\t\t\t\treturn len(sub(create(), factor, [0.5, 0.5, 1, 1])) <= EPS;\n\t\t}\n\t}\n\n\tlogger.warn(`${NAME}: Detected single-color ${slot} texture. Pruning ${slot} not yet supported.`);\n\treturn false;\n}\n\nasync function getTextureFactor(texture: Texture): Promise<vec4 | null> {\n\tconst pixels = await maybeGetPixels(texture);\n\tif (!pixels) return null;\n\n\tconst min: vec4 = [Infinity, Infinity, Infinity, Infinity];\n\tconst max: vec4 = [-Infinity, -Infinity, -Infinity, -Infinity];\n\tconst target: vec4 = [0, 0, 0, 0];\n\n\tconst [width, height] = pixels.shape;\n\n\tfor (let i = 0; i < width; i++) {\n\t\tfor (let j = 0; j < height; j++) {\n\t\t\tfor (let k = 0; k < 4; k++) {\n\t\t\t\tmin[k] = Math.min(min[k], pixels.get(i, j, k));\n\t\t\t\tmax[k] = Math.max(max[k], pixels.get(i, j, k));\n\t\t\t}\n\t\t}\n\n\t\tif (len(sub(target, max, min)) / 255 > EPS) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn scale(target, add(target, max, min), 0.5 / 255) as vec4;\n}\n\nasync function maybeGetPixels(texture: Texture): Promise<NdArray<Uint8Array> | null> {\n\ttry {\n\t\treturn await getPixels(texture.getImage()!, texture.getMimeType());\n\t} catch (e) {\n\t\treturn null;\n\t}\n}\n","import {\n\tAccessor,\n\tDocument,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tTransform,\n\tTypedArray,\n\tvec3,\n} from '@gltf-transform/core';\nimport { cleanPrimitive } from './clean-primitive.js';\nimport { dedup } from './dedup.js';\nimport { prune } from './prune.js';\nimport { createIndices, createTransform, formatDeltaOp } from './utils.js';\n\n// DEVELOPER NOTES: Ideally a weld() implementation should be fast, robust,\n// and tunable. The writeup below tracks my attempts to solve for these\n// constraints.\n//\n// (Approach #1) Follow the mergeVertices() implementation of three.js,\n// hashing vertices with a string concatenation of all vertex attributes.\n// The approach does not allow per-attribute tolerance in local units.\n//\n// (Approach #2) Sort points along the X axis, then make cheaper\n// searches up/down the sorted list for merge candidates. While this allows\n// simpler comparison based on specified tolerance, it's much slower, even\n// for cases where choice of the X vs. Y or Z axes is reasonable.\n//\n// (Approach #3) Attempted a Delaunay triangulation in three dimensions,\n// expecting it would be an n * log(n) algorithm, but the only implementation\n// I found (with delaunay-triangulate) appeared to be much slower than that,\n// and was notably slower than the sort-based approach, just building the\n// Delaunay triangulation alone.\n//\n// (Approach #4) Hybrid of (1) and (2), assigning vertices to a spatial\n// grid, then searching the local neighborhood (27 cells) for weld candidates.\n//\n// RESULTS: For the \"Lovecraftian\" sample model, after joining, a primitive\n// with 873,000 vertices can be welded down to 230,000 vertices. Results:\n// - (1) Not tested, but prior results suggest not robust enough.\n// - (2) 30 seconds\n// - (3) 660 seconds\n// - (4) 5 seconds exhaustive, 1.5s non-exhaustive\n\nconst NAME = 'weld';\n\nconst Tolerance = {\n\tDEFAULT: 0.0001,\n\tTEXCOORD: 0.0001, // [0, 1]\n\tCOLOR: 0.01, // [0, 1]\n\tNORMAL: 0.05, // [-1, 1], ±3º\n\tJOINTS: 0.0, // [0, ∞]\n\tWEIGHTS: 0.01, // [0, ∞]\n};\n\n/** Options for the {@link weld} function. */\nexport interface WeldOptions {\n\t/** Tolerance for vertex positions, as a fraction of primitive AABB. */\n\ttolerance?: number;\n\t/** Tolerance for vertex normals, in radians. */\n\ttoleranceNormal?: number;\n\t/** Whether to overwrite existing indices. */\n\toverwrite?: boolean;\n\t/** Enables a more thorough, but slower, search for vertices to weld. */\n\texhaustive?: boolean;\n}\n\nexport const WELD_DEFAULTS: Required<WeldOptions> = {\n\ttolerance: Tolerance.DEFAULT,\n\ttoleranceNormal: Tolerance.NORMAL,\n\toverwrite: true,\n\texhaustive: false, // donmccurdy/glTF-Transform#886\n};\n\n/**\n * Index {@link Primitive Primitives} and (optionally) merge similar vertices. When merged\n * and indexed, data is shared more efficiently between vertices. File size can\n * be reduced, and the GPU can sometimes use the vertex cache more efficiently.\n *\n * When welding, the 'tolerance' threshold determines which vertices qualify for\n * welding based on distance between the vertices as a fraction of the primitive's\n * bounding box (AABB). For example, tolerance=0.01 welds vertices within +/-1%\n * of the AABB's longest dimension. Other vertex attributes are also compared\n * during welding, with attribute-specific thresholds. For `tolerance=0`, geometry\n * is indexed in place, without merging.\n *\n * To preserve visual appearance consistently, use low `toleranceNormal` thresholds\n * around 0.1 (±3º). To pre-processing a scene before simplification or LOD creation,\n * use higher thresholds around 0.5 (±30º).\n *\n * Example:\n *\n * ```javascript\n * import { weld } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tweld({ tolerance: 0.001, toleranceNormal: 0.5 })\n * );\n * ```\n *\n * @category Transforms\n */\nexport function weld(_options: WeldOptions = WELD_DEFAULTS): Transform {\n\tconst options = expandWeldOptions(_options);\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tweldPrimitive(prim, options);\n\n\t\t\t\tif (isPrimEmpty(prim)) prim.dispose();\n\t\t\t}\n\n\t\t\tif (mesh.listPrimitives().length === 0) mesh.dispose();\n\t\t}\n\n\t\tif (options.tolerance > 0) {\n\t\t\t// If tolerance is greater than 0, welding may remove a mesh, so we prune\n\t\t\tawait doc.transform(\n\t\t\t\tprune({\n\t\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR, PropertyType.NODE],\n\t\t\t\t\tkeepAttributes: true,\n\t\t\t\t\tkeepIndices: true,\n\t\t\t\t\tkeepLeaves: false,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tawait doc.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**\n * Index a {@link Primitive} and (optionally) weld similar vertices. When merged\n * and indexed, data is shared more efficiently between vertices. File size can\n * be reduced, and the GPU can sometimes use the vertex cache more efficiently.\n *\n * When welding, the 'tolerance' threshold determines which vertices qualify for\n * welding based on distance between the vertices as a fraction of the primitive's\n * bounding box (AABB). For example, tolerance=0.01 welds vertices within +/-1%\n * of the AABB's longest dimension. Other vertex attributes are also compared\n * during welding, with attribute-specific thresholds. For tolerance=0, geometry\n * is indexed in place, without merging.\n *\n * Example:\n *\n * ```javascript\n * import { weldPrimitive } from '@gltf-transform/functions';\n *\n * const mesh = document.getRoot().listMeshes()\n * \t.find((mesh) => mesh.getName() === 'Gizmo');\n *\n * for (const prim of mesh.listPrimitives()) {\n *   weldPrimitive(prim, {tolerance: 0.0001});\n * }\n * ```\n */\nexport function weldPrimitive(prim: Primitive, _options: WeldOptions = WELD_DEFAULTS): void {\n\tconst graph = prim.getGraph();\n\tconst document = Document.fromGraph(graph)!;\n\tconst options = expandWeldOptions(_options);\n\n\tif (prim.getIndices() && !_options.overwrite) return;\n\tif (prim.getMode() === Primitive.Mode.POINTS) return;\n\n\tif (_options.tolerance === 0) {\n\t\t_indexPrimitive(document, prim);\n\t} else {\n\t\t_weldPrimitive(document, prim, options);\n\t}\n}\n\n/** @internal Adds indices, if missing. Does not merge vertices. */\nfunction _indexPrimitive(doc: Document, prim: Primitive): void {\n\t// No need to overwrite here, even if options.overwrite=true.\n\tif (prim.getIndices()) return;\n\n\tconst attr = prim.listAttributes()[0];\n\tconst numVertices = attr.getCount();\n\tconst buffer = attr.getBuffer();\n\tconst indices = doc\n\t\t.createAccessor()\n\t\t.setBuffer(buffer)\n\t\t.setType(Accessor.Type.SCALAR)\n\t\t.setArray(createIndices(numVertices));\n\tprim.setIndices(indices);\n}\n\n/** @internal Weld and merge, combining vertices that are similar on all vertex attributes. */\nfunction _weldPrimitive(doc: Document, prim: Primitive, options: Required<WeldOptions>): void {\n\tconst logger = doc.getLogger();\n\n\tconst srcPosition = prim.getAttribute('POSITION')!;\n\tconst srcIndices = prim.getIndices() || doc.createAccessor().setArray(createIndices(srcPosition.getCount()));\n\tconst uniqueIndices = new Uint32Array(new Set(srcIndices.getArray()!)).sort();\n\n\t// (1) Compute per-attribute tolerance and spatial grid for vertices.\n\n\tconst attributeTolerance: Record<string, number> = {};\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tattributeTolerance[semantic] = getAttributeTolerance(semantic, attribute, options);\n\t}\n\n\tlogger.debug(`${NAME}: Tolerance thresholds: ${formatKV(attributeTolerance)}`);\n\n\t// (2) Compare and identify vertices to weld.\n\n\tconst posA: vec3 = [0, 0, 0];\n\tconst posB: vec3 = [0, 0, 0];\n\n\tconst grid = {} as Record<string, number[]>;\n\tconst cellSize = attributeTolerance.POSITION;\n\n\tfor (let i = 0; i < uniqueIndices.length; i++) {\n\t\tsrcPosition.getElement(uniqueIndices[i], posA);\n\t\tconst key = getGridKey(posA, cellSize);\n\t\tgrid[key] = grid[key] || [];\n\t\tgrid[key].push(uniqueIndices[i]);\n\t}\n\n\t// (2) Compare and identify vertices to weld.\n\n\tconst srcMaxIndex = uniqueIndices[uniqueIndices.length - 1];\n\tconst weldMap = createIndices(srcMaxIndex + 1); // oldIndex → oldCommonIndex\n\tconst writeMap = new Array(uniqueIndices.length).fill(-1); // oldIndex → newIndex\n\n\tconst srcVertexCount = srcPosition.getCount();\n\tlet dstVertexCount = 0;\n\n\tfor (let i = 0; i < uniqueIndices.length; i++) {\n\t\tconst a = uniqueIndices[i];\n\t\tsrcPosition.getElement(a, posA);\n\n\t\tconst cellKeys = options.exhaustive ? getGridNeighborhoodKeys(posA, cellSize) : [getGridKey(posA, cellSize)];\n\n\t\tcells: for (const cellKey of cellKeys) {\n\t\t\tif (!grid[cellKey]) continue cells; // May occur in exhaustive search.\n\n\t\t\tneighbors: for (const j of grid[cellKey]) {\n\t\t\t\tconst b = weldMap[j];\n\n\t\t\t\t// Only weld to lower indices, preventing two-way match.\n\t\t\t\tif (a <= b) continue neighbors;\n\n\t\t\t\tsrcPosition.getElement(b, posB);\n\n\t\t\t\t// Weld if base attributes and morph target attributes match.\n\t\t\t\tconst isBaseMatch = prim.listSemantics().every((semantic) => {\n\t\t\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\t\t\tconst tolerance = attributeTolerance[semantic];\n\t\t\t\t\treturn compareAttributes(attribute, a, b, tolerance, semantic);\n\t\t\t\t});\n\t\t\t\tconst isTargetMatch = prim.listTargets().every((target) => {\n\t\t\t\t\treturn target.listSemantics().every((semantic) => {\n\t\t\t\t\t\tconst attribute = target.getAttribute(semantic)!;\n\t\t\t\t\t\tconst tolerance = attributeTolerance[semantic];\n\t\t\t\t\t\treturn compareAttributes(attribute, a, b, tolerance, semantic);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tif (isBaseMatch && isTargetMatch) {\n\t\t\t\t\tweldMap[a] = b;\n\t\t\t\t\tbreak cells;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Output the vertex if we didn't find a match, else record the index of the match. Because\n\t\t// we iterate vertices in ascending order, and only match to lower indices, we're\n\t\t// guaranteed the source vertex for a weld has already been marked for output.\n\t\tif (weldMap[a] === a) {\n\t\t\twriteMap[a] = dstVertexCount++;\n\t\t} else {\n\t\t\twriteMap[a] = writeMap[weldMap[a]];\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: ${formatDeltaOp(srcVertexCount, dstVertexCount)} vertices.`);\n\n\t// (3) Update indices.\n\n\tconst dstIndicesCount = srcIndices.getCount(); // # primitives does not change.\n\tconst dstIndicesArray = createIndices(dstIndicesCount, uniqueIndices.length);\n\tfor (let i = 0; i < dstIndicesCount; i++) {\n\t\tdstIndicesArray[i] = writeMap[srcIndices.getScalar(i)];\n\t}\n\tprim.setIndices(srcIndices.clone().setArray(dstIndicesArray));\n\tif (srcIndices.listParents().length === 1) srcIndices.dispose();\n\n\t// (4) Update vertex attributes.\n\n\tfor (const srcAttr of prim.listAttributes()) {\n\t\tswapAttributes(prim, srcAttr, writeMap, dstVertexCount);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const srcAttr of target.listAttributes()) {\n\t\t\tswapAttributes(target, srcAttr, writeMap, dstVertexCount);\n\t\t}\n\t}\n\n\t// (5) Clean up degenerate triangles.\n\n\tcleanPrimitive(prim);\n}\n\n/** Creates a new TypedArray of the same type as an original, with a new length. */\nfunction createArrayOfType<T extends TypedArray>(array: T, length: number): T {\n\tconst ArrayCtor = array.constructor as new (length: number) => T;\n\treturn new ArrayCtor(length);\n}\n\n/** Replaces an {@link Attribute}, creating a new one with the given elements. */\nfunction swapAttributes(\n\tparent: Primitive | PrimitiveTarget,\n\tsrcAttr: Accessor,\n\treorder: number[],\n\tdstCount: number,\n): void {\n\tconst dstAttrArray = createArrayOfType(srcAttr.getArray()!, dstCount * srcAttr.getElementSize());\n\tconst dstAttr = srcAttr.clone().setArray(dstAttrArray);\n\tconst done = new Uint8Array(dstCount);\n\n\tfor (let i = 0, el = [] as number[]; i < reorder.length; i++) {\n\t\tif (!done[reorder[i]]) {\n\t\t\tdstAttr.setElement(reorder[i], srcAttr.getElement(i, el));\n\t\t\tdone[reorder[i]] = 1;\n\t\t}\n\t}\n\n\tparent.swap(srcAttr, dstAttr);\n\n\t// Clean up.\n\tif (srcAttr.listParents().length === 1) srcAttr.dispose();\n}\n\nconst _a = [] as number[];\nconst _b = [] as number[];\n\n/** Computes a per-attribute tolerance, based on domain and usage of the attribute. */\nfunction getAttributeTolerance(semantic: string, attribute: Accessor, options: Required<WeldOptions>): number {\n\t// Attributes like NORMAL and COLOR_# do not vary in range like POSITION,\n\t// so do not apply the given tolerance factor to these attributes.\n\tif (semantic === 'NORMAL' || semantic === 'TANGENT') return options.toleranceNormal;\n\tif (semantic.startsWith('COLOR_')) return Tolerance.COLOR;\n\tif (semantic.startsWith('TEXCOORD_')) return Tolerance.TEXCOORD;\n\tif (semantic.startsWith('JOINTS_')) return Tolerance.JOINTS;\n\tif (semantic.startsWith('WEIGHTS_')) return Tolerance.WEIGHTS;\n\n\t_a.length = _b.length = 0;\n\tattribute.getMinNormalized(_a);\n\tattribute.getMaxNormalized(_b);\n\tconst diff = _b.map((bi, i) => bi - _a[i]);\n\tconst range = Math.max(...diff);\n\treturn options.tolerance * range;\n}\n\n/** Compares two vertex attributes against a tolerance threshold. */\nfunction compareAttributes(attribute: Accessor, a: number, b: number, tolerance: number, _semantic: string): boolean {\n\tattribute.getElement(a, _a);\n\tattribute.getElement(b, _b);\n\tfor (let i = 0, il = attribute.getElementSize(); i < il; i++) {\n\t\tif (Math.abs(_a[i] - _b[i]) > tolerance) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction formatKV(kv: Record<string, unknown>): string {\n\treturn Object.entries(kv)\n\t\t.map(([k, v]) => `${k}=${v}`)\n\t\t.join(', ');\n}\n\n// Order to search nearer cells first.\nconst CELL_OFFSETS = [0, -1, 1];\n\nfunction getGridNeighborhoodKeys(p: vec3, cellSize: number): string[] {\n\tconst keys = [] as string[];\n\tconst _p = [0, 0, 0] as vec3;\n\tfor (const i of CELL_OFFSETS) {\n\t\tfor (const j of CELL_OFFSETS) {\n\t\t\tfor (const k of CELL_OFFSETS) {\n\t\t\t\t_p[0] = p[0] + i * cellSize;\n\t\t\t\t_p[1] = p[1] + j * cellSize;\n\t\t\t\t_p[2] = p[2] + k * cellSize;\n\t\t\t\tkeys.push(getGridKey(_p, cellSize));\n\t\t\t}\n\t\t}\n\t}\n\treturn keys;\n}\n\nfunction getGridKey(p: vec3, cellSize: number): string {\n\tconst cellX = Math.round(p[0] / cellSize);\n\tconst cellY = Math.round(p[1] / cellSize);\n\tconst cellZ = Math.round(p[2] / cellSize);\n\treturn cellX + ':' + cellY + ':' + cellZ;\n}\n\nfunction expandWeldOptions(_options: WeldOptions): Required<WeldOptions> {\n\tconst options = { ...WELD_DEFAULTS, ..._options } as Required<WeldOptions>;\n\n\tif (options.tolerance < 0 || options.tolerance > 0.1) {\n\t\tthrow new Error(`${NAME}: Requires 0 <= tolerance <= 0.1`);\n\t}\n\n\tif (options.toleranceNormal < 0 || options.toleranceNormal > Math.PI / 2) {\n\t\tthrow new Error(`${NAME}: Requires 0 <= toleranceNormal <= ${(Math.PI / 2).toFixed(2)}`);\n\t}\n\n\tif (options.tolerance > 0) {\n\t\toptions.tolerance = Math.max(options.tolerance, Number.EPSILON);\n\t\toptions.toleranceNormal = Math.max(options.toleranceNormal, Number.EPSILON);\n\t}\n\n\treturn options;\n}\n\n/**\n * For purposes of welding, we consider a primitive to be 'empty' or degenerate\n * if (1) it has an index, and (2) that index is empty. In some cases\n * (mode=POINTS) the index may be missing — this is outside the scope of welding.\n */\nfunction isPrimEmpty(prim: Primitive): boolean {\n\tconst indices = prim.getIndices();\n\treturn !!indices && indices.getCount() === 0;\n}\n","import { vec3, vec4, mat4, Accessor, Primitive } from '@gltf-transform/core';\nimport { create as createMat3, fromMat4, invert, transpose } from 'gl-matrix/mat3';\nimport { create as createVec3, normalize as normalizeVec3, transformMat3, transformMat4 } from 'gl-matrix/vec3';\nimport { create as createVec4 } from 'gl-matrix/vec4';\nimport { createIndices } from './utils.js';\nimport { weldPrimitive } from './weld.js';\nimport { determinant } from 'gl-matrix/mat4';\n\n/**\n * Applies a transform matrix to a {@link Primitive}.\n *\n * When calling {@link transformPrimitive}, any un-masked vertices are overwritten\n * directly in the underlying vertex streams. If streams should be detached instead,\n * see {@link transformMesh}.\n *\n * Example:\n *\n * ```javascript\n * import { fromTranslation } from 'gl-matrix/mat4';\n * import { transformPrimitive } from '@gltf-transform/functions';\n *\n * // offset vertices, y += 10.\n * transformPrimitive(prim, fromTranslation([], [0, 10, 0]));\n * ```\n *\n * @param prim\n * @param matrix\n * @param skipIndices Vertices, specified by index, to be _excluded_ from the transformation.\n */\nexport function transformPrimitive(prim: Primitive, matrix: mat4, skipIndices = new Set<number>()): void {\n\tconst position = prim.getAttribute('POSITION')!;\n\tconst indices = (prim.getIndices()?.getArray() || createIndices(position!.getCount())) as Uint32Array;\n\n\t// Apply transform to base attributes.\n\tif (position) {\n\t\tapplyMatrix(matrix, position, indices, new Set(skipIndices));\n\t}\n\n\tconst normal = prim.getAttribute('NORMAL');\n\tif (normal) {\n\t\tapplyNormalMatrix(matrix, normal, indices, new Set(skipIndices));\n\t}\n\n\tconst tangent = prim.getAttribute('TANGENT');\n\tif (tangent) {\n\t\tapplyTangentMatrix(matrix, tangent, indices, new Set(skipIndices));\n\t}\n\n\t// Apply transform to morph attributes.\n\tfor (const target of prim.listTargets()) {\n\t\tconst position = target.getAttribute('POSITION');\n\t\tif (position) {\n\t\t\tapplyMatrix(matrix, position, indices, new Set(skipIndices));\n\t\t}\n\n\t\tconst normal = target.getAttribute('NORMAL');\n\t\tif (normal) {\n\t\t\tapplyNormalMatrix(matrix, normal, indices, new Set(skipIndices));\n\t\t}\n\n\t\tconst tangent = target.getAttribute('TANGENT');\n\t\tif (tangent) {\n\t\t\tapplyTangentMatrix(matrix, tangent, indices, new Set(skipIndices));\n\t\t}\n\t}\n\n\t// Reverse winding order if scale is negative.\n\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/NegativeScaleTest\n\tif (determinant(matrix) < 0) {\n\t\treversePrimitiveWindingOrder(prim);\n\t}\n\n\t// Update mask.\n\tfor (let i = 0; i < indices.length; i++) skipIndices.add(indices[i]);\n}\n\nfunction applyMatrix(matrix: mat4, attribute: Accessor, indices: Uint32Array, skipIndices: Set<number>) {\n\t// An arbitrary transform may not keep vertex positions in the required\n\t// range of a normalized attribute. Replace the array, instead.\n\tconst dstArray = new Float32Array(attribute.getCount() * 3);\n\tconst elementSize = attribute.getElementSize();\n\n\tfor (let i = 0, el: number[] = [], il = attribute.getCount(); i < il; i++) {\n\t\tdstArray.set(attribute.getElement(i, el), i * elementSize);\n\t}\n\n\tconst vector = createVec3() as vec3;\n\tfor (let i = 0; i < indices.length; i++) {\n\t\tconst index = indices[i];\n\t\tif (skipIndices.has(index)) continue;\n\n\t\tattribute.getElement(index, vector);\n\t\ttransformMat4(vector, vector, matrix);\n\t\tdstArray.set(vector, index * 3);\n\n\t\tskipIndices.add(index);\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(false);\n}\n\nfunction applyNormalMatrix(matrix: mat4, attribute: Accessor, indices: Uint32Array, skipIndices: Set<number>) {\n\tconst normalMatrix = createMat3();\n\tfromMat4(normalMatrix, matrix);\n\tinvert(normalMatrix, normalMatrix);\n\ttranspose(normalMatrix, normalMatrix);\n\n\tconst vector = createVec3() as vec3;\n\tfor (let i = 0; i < indices.length; i++) {\n\t\tconst index = indices[i];\n\t\tif (skipIndices.has(index)) continue;\n\n\t\tattribute.getElement(index, vector);\n\t\ttransformMat3(vector, vector, normalMatrix);\n\t\tnormalizeVec3(vector, vector);\n\t\tattribute.setElement(index, vector);\n\n\t\tskipIndices.add(index);\n\t}\n}\n\nfunction applyTangentMatrix(matrix: mat4, attribute: Accessor, indices: Uint32Array, skipIndices: Set<number>) {\n\tconst v3 = createVec3() as vec3;\n\tconst v4 = createVec4() as vec4;\n\tfor (let i = 0; i < indices.length; i++) {\n\t\tconst index = indices[i];\n\t\tif (skipIndices.has(index)) continue;\n\n\t\tattribute.getElement(index, v4);\n\n\t\t// mat4 affine matrix applied to vector, vector interpreted as a direction.\n\t\t// Reference: https://github.com/mrdoob/three.js/blob/9f4de99828c05e71c47e6de0beb4c6e7652e486a/src/math/Vector3.js#L286-L300\n\t\tconst [x, y, z] = v4;\n\t\tv3[0] = matrix[0] * x + matrix[4] * y + matrix[8] * z;\n\t\tv3[1] = matrix[1] * x + matrix[5] * y + matrix[9] * z;\n\t\tv3[2] = matrix[2] * x + matrix[6] * y + matrix[10] * z;\n\t\tnormalizeVec3(v3, v3);\n\n\t\t(v4[0] = v3[0]), (v4[1] = v3[1]), (v4[2] = v3[2]);\n\n\t\tattribute.setElement(index, v4);\n\n\t\tskipIndices.add(index);\n\t}\n}\n\nfunction reversePrimitiveWindingOrder(prim: Primitive) {\n\tif (prim.getMode() !== Primitive.Mode.TRIANGLES) return;\n\tif (!prim.getIndices()) weldPrimitive(prim, { tolerance: 0 });\n\n\tconst indices = prim.getIndices()!;\n\tfor (let i = 0, il = indices.getCount(); i < il; i += 3) {\n\t\tconst a = indices.getScalar(i);\n\t\tconst c = indices.getScalar(i + 2);\n\t\tindices.setScalar(i, c);\n\t\tindices.setScalar(i + 2, a);\n\t}\n}\n","import { mat4, Accessor, Primitive, Mesh, PropertyType, PrimitiveTarget } from '@gltf-transform/core';\nimport { transformPrimitive } from './transform-primitive.js';\nimport { deepListAttributes } from './utils.js';\n\n/**\n * Applies a transform matrix to every {@link Primitive} in the given {@link Mesh}.\n *\n * Method:\n * - If any primitives are shared by other meshes, they will be detached.\n * - If any vertex streams are shared by primitives of other meshes, vertex data\n *  will be overwritten unless _overwrite=false_ or the indices are masked. If\n * \t_overwrite=false_, a detached copy of the vertex stream is made before applying\n * \tthe transform.\n * - Primitives within the mesh sharing vertex streams will continue to share those streams.\n * - For indexed primitives, only indexed vertices are modified.\n *\n * Example:\n *\n * ```javascript\n * import { fromTranslation } from 'gl-matrix/mat4';\n * import { transformMesh } from '@gltf-transform/functions';\n *\n * // offset vertices, y += 10.\n * transformMesh(mesh, fromTranslation([], [0, 10, 0]));\n * ```\n *\n * @param mesh\n * @param matrix\n * @param overwrite Whether to overwrite vertex streams in place. If false,\n * \t\tstreams shared with other meshes will be detached.\n * @param skipIndices Vertices, specified by index, to be _excluded_ from the transformation.\n */\nexport function transformMesh(mesh: Mesh, matrix: mat4, overwrite = false, skipIndices?: Set<number>): void {\n\t// (1) Detach shared prims.\n\tfor (const srcPrim of mesh.listPrimitives()) {\n\t\tconst isShared = srcPrim.listParents().some((p) => p.propertyType === PropertyType.MESH && p !== mesh);\n\t\tif (isShared) {\n\t\t\tconst dstPrim = srcPrim.clone();\n\t\t\tmesh.swap(srcPrim, dstPrim);\n\n\t\t\tfor (const srcTarget of dstPrim.listTargets()) {\n\t\t\t\tconst dstTarget = srcTarget.clone();\n\t\t\t\tdstPrim.swap(srcTarget, dstTarget);\n\t\t\t}\n\t\t}\n\t}\n\n\t// (2) Detach shared vertex streams.\n\tif (!overwrite) {\n\t\tconst parents = new Set<Primitive | PrimitiveTarget>([\n\t\t\t...mesh.listPrimitives(),\n\t\t\t...mesh.listPrimitives().flatMap((prim) => prim.listTargets()),\n\t\t]);\n\t\tconst attributes = new Map<Accessor, Accessor>();\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tfor (const srcAttribute of deepListAttributes(prim)) {\n\t\t\t\tconst isShared = srcAttribute\n\t\t\t\t\t.listParents()\n\t\t\t\t\t.some((a) => (a instanceof Primitive || a instanceof PrimitiveTarget) && !parents.has(a));\n\t\t\t\tif (isShared && !attributes.has(srcAttribute)) {\n\t\t\t\t\tattributes.set(srcAttribute, srcAttribute.clone());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const parent of parents) {\n\t\t\tfor (const [srcAttribute, dstAttribute] of attributes) {\n\t\t\t\tparent.swap(srcAttribute, dstAttribute);\n\t\t\t}\n\t\t}\n\t}\n\n\t// (3) Apply transform.\n\tconst attributeSkipIndices = new Map<Accessor, Set<number>>();\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tconst position = prim.getAttribute('POSITION')!;\n\n\t\tlet primSkipIndices;\n\t\tif (skipIndices) {\n\t\t\tprimSkipIndices = skipIndices;\n\t\t} else if (attributeSkipIndices.has(position)) {\n\t\t\tprimSkipIndices = attributeSkipIndices.get(position)!;\n\t\t} else {\n\t\t\tattributeSkipIndices.set(position, (primSkipIndices = new Set<number>()));\n\t\t}\n\n\t\ttransformPrimitive(prim, matrix, primSkipIndices);\n\t}\n}\n","import { mat4, MathUtils, Node } from '@gltf-transform/core';\nimport { multiply as multiplyMat4 } from 'gl-matrix/mat4';\nimport { transformMesh } from './transform-mesh.js';\n\n// prettier-ignore\nconst IDENTITY: mat4 = [\n  1, 0, 0, 0,\n  0, 1, 0, 0,\n  0, 0, 1, 0,\n  0, 0, 0, 1\n];\n\n/**\n * Clears local transform of the {@link Node}, applying the transform to children and meshes.\n *\n * - Applies transform to children\n * - Applies transform to {@link Mesh mesh}\n * - Resets {@link Light lights}, {@link Camera cameras}, and other attachments to the origin\n *\n * Example:\n *\n * ```typescript\n * import { clearNodeTransform } from '@gltf-transform/functions';\n *\n * node.getTranslation(); // → [ 5, 0, 0 ]\n * node.getMesh(); // → vertex data centered at origin\n *\n * clearNodeTransform(node);\n *\n * node.getTranslation(); // → [ 0, 0, 0 ]\n * node.getMesh(); // → vertex data centered at [ 5, 0, 0 ]\n * ```\n *\n * To clear _all_ transforms of a Node, first clear its inherited transforms with\n * {@link clearNodeParent}, then clear the local transform with {@link clearNodeTransform}.\n */\nexport function clearNodeTransform(node: Node): Node {\n\tconst mesh = node.getMesh();\n\tconst localMatrix = node.getMatrix();\n\n\tif (mesh && !MathUtils.eq(localMatrix, IDENTITY)) {\n\t\ttransformMesh(mesh, localMatrix);\n\t}\n\n\tfor (const child of node.listChildren()) {\n\t\tconst matrix = child.getMatrix();\n\t\tmultiplyMat4(matrix, matrix, localMatrix);\n\t\tchild.setMatrix(matrix);\n\t}\n\n\treturn node.setMatrix(IDENTITY);\n}\n","import type { Accessor, Document, Primitive, Transform } from '@gltf-transform/core';\nimport { KHRMeshQuantization } from '@gltf-transform/extensions';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'dequantize';\n\n/** Options for the {@link dequantize} function. */\nexport interface DequantizeOptions {\n\t/**\n\t * Pattern (regex) used to filter vertex attribute semantics for quantization.\n\t * Default: `/^((?!JOINTS_).)*$/`.\n\t */\n\tpattern?: RegExp;\n}\n\nconst DEQUANTIZE_DEFAULTS: DequantizeOptions = {\n\tpattern: /^((?!JOINTS_).)*$/,\n};\n\n/**\n * Dequantize {@link Primitive Primitives}, removing {@link KHRMeshQuantization `KHR_mesh_quantization`}\n * if present. Dequantization will increase the size of the mesh on disk and in memory, but may be\n * necessary for compatibility with applications that don't support quantization.\n *\n * Example:\n *\n * ```javascript\n * import { dequantizePrimitive } from '@gltf-transform/functions';\n *\n * await document.transform(dequantize());\n * ```\n *\n * @category Transforms\n */\nexport function dequantize(_options: DequantizeOptions = DEQUANTIZE_DEFAULTS): Transform {\n\tconst options = { ...DEQUANTIZE_DEFAULTS, ..._options } as Required<DequantizeOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tdequantizePrimitive(prim, options);\n\t\t\t}\n\t\t}\n\t\tdoc.createExtension(KHRMeshQuantization).dispose();\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**\n * Dequantize a single {@link Primitive}, converting all vertex attributes to float32. Dequantization\n * will increase the size of the mesh on disk and in memory, but may be necessary for compatibility\n * with applications that don't support quantization.\n *\n * Example:\n *\n * ```javascript\n * import { dequantizePrimitive } from '@gltf-transform/functions';\n *\n * const mesh = document.getRoot().listMeshes().find((mesh) => mesh.getName() === 'MyMesh');\n *\n * for (const prim of mesh.listPrimitives()) {\n * \tdequantizePrimitive(prim);\n * }\n * ```\n */\nexport function dequantizePrimitive(prim: Primitive, options: Required<DequantizeOptions>): void {\n\tfor (const semantic of prim.listSemantics()) {\n\t\tdequantizeAttribute(semantic, prim.getAttribute(semantic)!, options);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const semantic of target.listSemantics()) {\n\t\t\tdequantizeAttribute(semantic, target.getAttribute(semantic)!, options);\n\t\t}\n\t}\n}\n\nexport function dequantizeAttribute(semantic: string, attribute: Accessor, options: Required<DequantizeOptions>): void {\n\tif (!attribute.getArray()) return;\n\tif (!options.pattern.test(semantic)) return;\n\tif (attribute.getComponentSize() >= 4) return;\n\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = new Float32Array(srcArray.length);\n\n\tfor (let i = 0, il = attribute.getCount(), el = [] as number[]; i < il; i++) {\n\t\tel = attribute.getElement(i, el);\n\t\tattribute.setArray(dstArray).setElement(i, el).setArray(srcArray);\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(false);\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { KHRDracoMeshCompression } from '@gltf-transform/extensions';\nimport { createTransform } from './utils.js';\nimport { weld } from './weld.js';\n\nconst NAME = 'draco';\n\nexport interface DracoOptions {\n\tmethod?: 'edgebreaker' | 'sequential';\n\tencodeSpeed?: number;\n\tdecodeSpeed?: number;\n\tquantizePosition?: number;\n\tquantizeNormal?: number;\n\tquantizeColor?: number;\n\tquantizeTexcoord?: number;\n\tquantizeGeneric?: number;\n\tquantizationVolume?: 'mesh' | 'scene';\n}\n\nexport const DRACO_DEFAULTS: DracoOptions = {\n\tmethod: 'edgebreaker',\n\tencodeSpeed: 5,\n\tdecodeSpeed: 5,\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeColor: 8,\n\tquantizeTexcoord: 12,\n\tquantizeGeneric: 12,\n\tquantizationVolume: 'mesh',\n};\n\n/**\n * Applies Draco compression using {@link KHRDracoMeshCompression KHR_draco_mesh_compression}.\n * This type of compression can reduce the size of triangle geometry.\n *\n * This function is a thin wrapper around the {@link KHRDracoMeshCompression} extension itself.\n *\n * @category Transforms\n */\nexport function draco(_options: DracoOptions = DRACO_DEFAULTS): Transform {\n\tconst options = { ...DRACO_DEFAULTS, ..._options } as Required<DracoOptions>;\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tawait document.transform(weld({ tolerance: 0 }));\n\t\tdocument\n\t\t\t.createExtension(KHRDracoMeshCompression)\n\t\t\t.setRequired(true)\n\t\t\t.setEncoderOptions({\n\t\t\t\tmethod:\n\t\t\t\t\toptions.method === 'edgebreaker'\n\t\t\t\t\t\t? KHRDracoMeshCompression.EncoderMethod.EDGEBREAKER\n\t\t\t\t\t\t: KHRDracoMeshCompression.EncoderMethod.SEQUENTIAL,\n\t\t\t\tencodeSpeed: options.encodeSpeed,\n\t\t\t\tdecodeSpeed: options.decodeSpeed,\n\t\t\t\tquantizationBits: {\n\t\t\t\t\tPOSITION: options.quantizePosition,\n\t\t\t\t\tNORMAL: options.quantizeNormal,\n\t\t\t\t\tCOLOR: options.quantizeColor,\n\t\t\t\t\tTEX_COORD: options.quantizeTexcoord,\n\t\t\t\t\tGENERIC: options.quantizeGeneric,\n\t\t\t\t},\n\t\t\t\tquantizationVolume: options.quantizationVolume,\n\t\t\t});\n\t});\n}\n","import { Document, Node, PropertyType, Transform } from '@gltf-transform/core';\nimport { clearNodeParent } from './clear-node-parent.js';\nimport { prune } from './prune.js';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'flatten';\n\n/** Options for the {@link flatten} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface FlattenOptions {}\n\nexport const FLATTEN_DEFAULTS: Required<FlattenOptions> = {};\n\n/**\n * Flattens the scene graph, leaving {@link Node Nodes} with\n * {@link Mesh Meshes}, {@link Camera Cameras}, and other attachments\n * as direct children of the {@link Scene}. Skeletons and their\n * descendants are left in their original Node structure.\n *\n * {@link Animation} targeting a Node or its parents will\n * prevent that Node from being moved.\n *\n * Example:\n *\n * ```ts\n * import { flatten } from '@gltf-transform/functions';\n *\n * await document.transform(flatten());\n * ```\n *\n * @category Transforms\n */\nexport function flatten(_options: FlattenOptions = FLATTEN_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...FLATTEN_DEFAULTS, ..._options } as Required<FlattenOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst root = document.getRoot();\n\t\tconst logger = document.getLogger();\n\n\t\t// (1) Mark joints.\n\t\tconst joints = new Set<Node>();\n\t\tfor (const skin of root.listSkins()) {\n\t\t\tfor (const joint of skin.listJoints()) {\n\t\t\t\tjoints.add(joint);\n\t\t\t}\n\t\t}\n\n\t\t// (2) Mark nodes with TRS animation.\n\t\tconst animated = new Set<Node>();\n\t\tfor (const animation of root.listAnimations()) {\n\t\t\tfor (const channel of animation.listChannels()) {\n\t\t\t\tconst node = channel.getTargetNode();\n\t\t\t\tif (node && channel.getTargetPath() !== 'weights') {\n\t\t\t\t\tanimated.add(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (3) Mark descendants of joints and animated nodes.\n\t\tconst hasJointParent = new Set<Node>();\n\t\tconst hasAnimatedParent = new Set<Node>();\n\t\tfor (const scene of root.listScenes()) {\n\t\t\tscene.traverse((node) => {\n\t\t\t\tconst parent = node.getParentNode();\n\t\t\t\tif (!parent) return;\n\t\t\t\tif (joints.has(parent) || hasJointParent.has(parent)) {\n\t\t\t\t\thasJointParent.add(node);\n\t\t\t\t}\n\t\t\t\tif (animated.has(parent) || hasAnimatedParent.has(parent)) {\n\t\t\t\t\thasAnimatedParent.add(node);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// (4) For each affected node, in top-down order, clear parents.\n\t\tfor (const scene of root.listScenes()) {\n\t\t\tscene.traverse((node) => {\n\t\t\t\tif (animated.has(node)) return;\n\t\t\t\tif (hasJointParent.has(node)) return;\n\t\t\t\tif (hasAnimatedParent.has(node)) return;\n\n\t\t\t\tclearNodeParent(node);\n\t\t\t});\n\t\t}\n\n\t\t// TODO(feat): Transform animation channels, accounting for previously inherited transforms.\n\t\tif (animated.size) {\n\t\t\tlogger.debug(`${NAME}: Flattening node hierarchies with TRS animation not yet supported.`);\n\t\t}\n\n\t\t// (5) Clean up leaf nodes.\n\t\tawait document.transform(prune({ propertyTypes: [PropertyType.NODE], keepLeaves: false }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import {\n\tAccessor,\n\tDocument,\n\tExtensionProperty,\n\tGLTF,\n\tImageUtils,\n\tTexture,\n\tgetBounds,\n\tPropertyType,\n} from '@gltf-transform/core';\nimport { getGLPrimitiveCount } from './utils.js';\nimport { KHR_DF_MODEL_ETC1S, KHR_DF_MODEL_UASTC, read as readKTX } from 'ktx-parse';\n\n/** Inspects the contents of a glTF file and returns a JSON report. */\nexport function inspect(doc: Document): InspectReport {\n\treturn {\n\t\tscenes: listScenes(doc),\n\t\tmeshes: listMeshes(doc),\n\t\tmaterials: listMaterials(doc),\n\t\ttextures: listTextures(doc),\n\t\tanimations: listAnimations(doc),\n\t};\n}\n\n/** List scenes. */\nfunction listScenes(doc: Document): InspectPropertyReport<InspectSceneReport> {\n\tconst scenes = doc\n\t\t.getRoot()\n\t\t.listScenes()\n\t\t.map((scene) => {\n\t\t\tconst root = scene.listChildren()[0];\n\t\t\tconst sceneBounds = getBounds(scene);\n\t\t\treturn {\n\t\t\t\tname: scene.getName(),\n\t\t\t\trootName: root ? root.getName() : '',\n\t\t\t\tbboxMin: toPrecision(sceneBounds.min),\n\t\t\t\tbboxMax: toPrecision(sceneBounds.max),\n\t\t\t};\n\t\t});\n\treturn { properties: scenes };\n}\n\n/** List meshes. */\nfunction listMeshes(doc: Document): InspectPropertyReport<InspectMeshReport> {\n\tconst meshes: InspectMeshReport[] = doc\n\t\t.getRoot()\n\t\t.listMeshes()\n\t\t.map((mesh) => {\n\t\t\tconst instances = mesh.listParents().filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\t\t\tlet glPrimitives = 0;\n\t\t\tlet verts = 0;\n\t\t\tconst semantics = new Set<string>();\n\t\t\tconst meshIndices = new Set<string>();\n\t\t\tconst meshAccessors: Set<Accessor> = new Set();\n\n\t\t\tmesh.listPrimitives().forEach((prim) => {\n\t\t\t\tfor (const semantic of prim.listSemantics()) {\n\t\t\t\t\tconst attr = prim.getAttribute(semantic)!;\n\t\t\t\t\tsemantics.add(semantic + ':' + accessorToTypeLabel(attr));\n\t\t\t\t\tmeshAccessors.add(attr);\n\t\t\t\t}\n\t\t\t\tfor (const targ of prim.listTargets()) {\n\t\t\t\t\ttarg.listAttributes().forEach((attr) => meshAccessors.add(attr));\n\t\t\t\t}\n\t\t\t\tconst indices = prim.getIndices();\n\t\t\t\tif (indices) {\n\t\t\t\t\tmeshIndices.add(accessorToTypeLabel(indices));\n\t\t\t\t\tmeshAccessors.add(indices);\n\t\t\t\t}\n\t\t\t\tverts += prim.listAttributes()[0].getCount();\n\t\t\t\tglPrimitives += getGLPrimitiveCount(prim);\n\t\t\t});\n\n\t\t\tlet size = 0;\n\t\t\tArray.from(meshAccessors).forEach((a) => (size += a.getArray()!.byteLength));\n\n\t\t\tconst modes = mesh.listPrimitives().map((prim) => MeshPrimitiveModeLabels[prim.getMode()]);\n\n\t\t\treturn {\n\t\t\t\tname: mesh.getName(),\n\t\t\t\tmode: Array.from(new Set(modes)),\n\t\t\t\tprimitives: mesh.listPrimitives().length,\n\t\t\t\tglPrimitives: glPrimitives,\n\t\t\t\tvertices: verts,\n\t\t\t\tindices: Array.from(meshIndices).sort(),\n\t\t\t\tattributes: Array.from(semantics).sort(),\n\t\t\t\tinstances: instances,\n\t\t\t\tsize: size,\n\t\t\t};\n\t\t});\n\n\treturn { properties: meshes };\n}\n\n/** List materials. */\nfunction listMaterials(doc: Document): InspectPropertyReport<InspectMaterialReport> {\n\tconst materials: InspectMaterialReport[] = doc\n\t\t.getRoot()\n\t\t.listMaterials()\n\t\t.map((material) => {\n\t\t\tconst instances = material\n\t\t\t\t.listParents()\n\t\t\t\t.filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\n\t\t\t// Find all texture slots attached to this material or its extensions.\n\t\t\tconst extensions = new Set<ExtensionProperty>(material.listExtensions());\n\t\t\tconst slots = doc\n\t\t\t\t.getGraph()\n\t\t\t\t.listEdges()\n\t\t\t\t.filter((ref) => {\n\t\t\t\t\tconst child = ref.getChild();\n\t\t\t\t\tconst parent = ref.getParent();\n\t\t\t\t\tif (child instanceof Texture && parent === material) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (child instanceof Texture && parent instanceof ExtensionProperty && extensions.has(parent)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t})\n\t\t\t\t.map((ref) => ref.getName());\n\n\t\t\treturn {\n\t\t\t\tname: material.getName(),\n\t\t\t\tinstances,\n\t\t\t\ttextures: slots,\n\t\t\t\talphaMode: material.getAlphaMode(),\n\t\t\t\tdoubleSided: material.getDoubleSided(),\n\t\t\t};\n\t\t});\n\n\treturn { properties: materials };\n}\n\n/** List textures. */\nfunction listTextures(doc: Document): InspectPropertyReport<InspectTextureReport> {\n\tconst textures: InspectTextureReport[] = doc\n\t\t.getRoot()\n\t\t.listTextures()\n\t\t.map((texture) => {\n\t\t\tconst instances = texture\n\t\t\t\t.listParents()\n\t\t\t\t.filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\n\t\t\tconst slots = doc\n\t\t\t\t.getGraph()\n\t\t\t\t.listParentEdges(texture)\n\t\t\t\t.filter((edge) => edge.getParent().propertyType !== PropertyType.ROOT)\n\t\t\t\t.map((edge) => edge.getName());\n\n\t\t\tconst resolution = ImageUtils.getSize(texture.getImage()!, texture.getMimeType());\n\n\t\t\tlet compression = '';\n\t\t\tif (texture.getMimeType() === 'image/ktx2') {\n\t\t\t\tconst container = readKTX(texture.getImage()!);\n\t\t\t\tconst dfd = container.dataFormatDescriptor[0];\n\t\t\t\tif (dfd.colorModel === KHR_DF_MODEL_ETC1S) {\n\t\t\t\t\tcompression = 'ETC1S';\n\t\t\t\t} else if (dfd.colorModel === KHR_DF_MODEL_UASTC) {\n\t\t\t\t\tcompression = 'UASTC';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tname: texture.getName(),\n\t\t\t\turi: texture.getURI(),\n\t\t\t\tslots: Array.from(new Set(slots)),\n\t\t\t\tinstances,\n\t\t\t\tmimeType: texture.getMimeType(),\n\t\t\t\tcompression,\n\t\t\t\tresolution: resolution ? resolution.join('x') : '',\n\t\t\t\tsize: texture.getImage()!.byteLength,\n\t\t\t\tgpuSize: ImageUtils.getVRAMByteLength(texture.getImage()!, texture.getMimeType()),\n\t\t\t};\n\t\t});\n\n\treturn { properties: textures };\n}\n\n/** List animations. */\nfunction listAnimations(doc: Document): InspectPropertyReport<InspectAnimationReport> {\n\tconst animations: InspectAnimationReport[] = doc\n\t\t.getRoot()\n\t\t.listAnimations()\n\t\t.map((anim) => {\n\t\t\tlet minTime = Infinity;\n\t\t\tlet maxTime = -Infinity;\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tif (!input) return;\n\t\t\t\tminTime = Math.min(minTime, input.getMin([])[0]);\n\t\t\t\tmaxTime = Math.max(maxTime, input.getMax([])[0]);\n\t\t\t});\n\n\t\t\tlet size = 0;\n\t\t\tlet keyframes = 0;\n\t\t\tconst accessors: Set<Accessor> = new Set();\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\tif (!input) return;\n\t\t\t\tkeyframes += input.getCount();\n\t\t\t\taccessors.add(input);\n\t\t\t\tif (!output) return;\n\t\t\t\taccessors.add(output);\n\t\t\t});\n\t\t\tArray.from(accessors).forEach((accessor) => {\n\t\t\t\tsize += accessor.getArray()!.byteLength;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tname: anim.getName(),\n\t\t\t\tchannels: anim.listChannels().length,\n\t\t\t\tsamplers: anim.listSamplers().length,\n\t\t\t\tduration: Math.round((maxTime - minTime) * 1000) / 1000,\n\t\t\t\tkeyframes: keyframes,\n\t\t\t\tsize: size,\n\t\t\t};\n\t\t});\n\n\treturn { properties: animations };\n}\n\nexport interface InspectReport {\n\tscenes: InspectPropertyReport<InspectSceneReport>;\n\tmeshes: InspectPropertyReport<InspectMeshReport>;\n\tmaterials: InspectPropertyReport<InspectMaterialReport>;\n\ttextures: InspectPropertyReport<InspectTextureReport>;\n\tanimations: InspectPropertyReport<InspectAnimationReport>;\n}\n\nexport interface InspectPropertyReport<T> {\n\tproperties: T[];\n\terrors?: string[];\n\twarnings?: string[];\n}\n\nexport interface InspectSceneReport {\n\tname: string;\n\trootName: string;\n\tbboxMin: number[];\n\tbboxMax: number[];\n}\n\nexport interface InspectMeshReport {\n\tname: string;\n\tprimitives: number;\n\tmode: string[];\n\tvertices: number;\n\tglPrimitives: number;\n\tindices: string[];\n\tattributes: string[];\n\tinstances: number;\n\tsize: number;\n}\n\nexport interface InspectMaterialReport {\n\tname: string;\n\tinstances: number;\n\ttextures: string[];\n\talphaMode: GLTF.MaterialAlphaMode;\n\tdoubleSided: boolean;\n}\n\nexport interface InspectTextureReport {\n\tname: string;\n\turi: string;\n\tslots: string[];\n\tinstances: number;\n\tmimeType: string;\n\tresolution: string;\n\tcompression: string;\n\tsize: number;\n\tgpuSize: number | null;\n}\n\nexport interface InspectAnimationReport {\n\tname: string;\n\tchannels: number;\n\tsamplers: number;\n\tkeyframes: number;\n\tduration: number;\n\tsize: number;\n}\n\nconst MeshPrimitiveModeLabels = [\n\t'POINTS',\n\t'LINES',\n\t'LINE_LOOP',\n\t'LINE_STRIP',\n\t'TRIANGLES',\n\t'TRIANGLE_STRIP',\n\t'TRIANGLE_FAN',\n];\n\nconst NumericTypeLabels: Record<string, string> = {\n\tFloat32Array: 'f32',\n\tUint32Array: 'u32',\n\tUint16Array: 'u16',\n\tUint8Array: 'u8',\n\tInt32Array: 'i32',\n\tInt16Array: 'i16',\n\tInt8Array: 'i8',\n};\n\n/** Maps values in a vector to a finite precision. */\nfunction toPrecision(v: number[]): number[] {\n\tfor (let i = 0; i < v.length; i++) {\n\t\tif ((v[i] as number).toFixed) v[i] = Number(v[i].toFixed(5));\n\t}\n\treturn v;\n}\n\nfunction accessorToTypeLabel(accessor: Accessor): string {\n\tconst array = accessor.getArray()!;\n\tconst base = NumericTypeLabels[array.constructor.name] || '?';\n\tconst suffix = accessor.getNormalized() ? '_norm' : '';\n\treturn base + suffix;\n}\n","import { Document, ILogger, MathUtils, Mesh, Node, Primitive, Transform, vec3, vec4 } from '@gltf-transform/core';\nimport { InstancedMesh, EXTMeshGPUInstancing } from '@gltf-transform/extensions';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'instance';\n\nexport interface InstanceOptions {\n\t/** Minimum number of meshes considered eligible for instancing. Default: 2. */\n\tmin?: number;\n}\n\nconst INSTANCE_DEFAULTS: Required<InstanceOptions> = {\n\tmin: 2,\n};\n\n/**\n * Creates GPU instances (with `EXT_mesh_gpu_instancing`) for shared {@link Mesh} references. In\n * engines supporting the extension, reused Meshes will be drawn with GPU instancing, greatly\n * reducing draw calls and improving performance in many cases. If you're not sure that identical\n * Meshes share vertex data and materials (\"linked duplicates\"), run {@link dedup} first to link them.\n *\n * Example:\n *\n * ```javascript\n * import { dedup, instance } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tdedup(),\n * \tinstance({min: 2}),\n * );\n * ```\n *\n * @category Transforms\n */\nexport function instance(_options: InstanceOptions = INSTANCE_DEFAULTS): Transform {\n\tconst options = { ...INSTANCE_DEFAULTS, ..._options } as Required<InstanceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\n\t\tif (root.listAnimations().length) {\n\t\t\tlogger.warn(`${NAME}: Instancing is not currently supported for animated models.`);\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst batchExtension = doc.createExtension(EXTMeshGPUInstancing);\n\n\t\tlet numBatches = 0;\n\t\tlet numInstances = 0;\n\n\t\tfor (const scene of root.listScenes()) {\n\t\t\t// Gather a one-to-many Mesh/Node mapping, identifying what we can instance.\n\t\t\tconst meshInstances = new Map<Mesh, Set<Node>>();\n\t\t\tscene.traverse((node) => {\n\t\t\t\tconst mesh = node.getMesh();\n\t\t\t\tif (!mesh) return;\n\t\t\t\tmeshInstances.set(mesh, (meshInstances.get(mesh) || new Set<Node>()).add(node));\n\t\t\t});\n\n\t\t\t// For each Mesh, create an InstancedMesh and collect transforms.\n\t\t\tconst modifiedNodes = [];\n\t\t\tfor (const mesh of Array.from(meshInstances.keys())) {\n\t\t\t\tconst nodes = Array.from(meshInstances.get(mesh)!);\n\t\t\t\tif (nodes.length < options.min) continue;\n\t\t\t\tif (nodes.some((node) => node.getSkin())) continue;\n\n\t\t\t\t// Cannot preserve volumetric effects when instancing with varying scale.\n\t\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/AttenuationTest\n\t\t\t\tif (mesh.listPrimitives().some(hasVolume) && nodes.some(hasScale)) continue;\n\n\t\t\t\tconst batch = createBatch(doc, batchExtension, mesh, nodes.length);\n\t\t\t\tconst batchTranslation = batch.getAttribute('TRANSLATION')!;\n\t\t\t\tconst batchRotation = batch.getAttribute('ROTATION')!;\n\t\t\t\tconst batchScale = batch.getAttribute('SCALE')!;\n\n\t\t\t\tconst batchNode = doc.createNode().setMesh(mesh).setExtension('EXT_mesh_gpu_instancing', batch);\n\t\t\t\tscene.addChild(batchNode);\n\n\t\t\t\tlet needsTranslation = false;\n\t\t\t\tlet needsRotation = false;\n\t\t\t\tlet needsScale = false;\n\n\t\t\t\t// For each Node, write TRS properties into instance attributes.\n\t\t\t\tfor (let i = 0; i < nodes.length; i++) {\n\t\t\t\t\tlet t: vec3, r: vec4, s: vec3;\n\t\t\t\t\tconst node = nodes[i];\n\n\t\t\t\t\tbatchTranslation.setElement(i, (t = node.getWorldTranslation()));\n\t\t\t\t\tbatchRotation.setElement(i, (r = node.getWorldRotation()));\n\t\t\t\t\tbatchScale.setElement(i, (s = node.getWorldScale()));\n\n\t\t\t\t\tif (!MathUtils.eq(t, [0, 0, 0])) needsTranslation = true;\n\t\t\t\t\tif (!MathUtils.eq(r, [0, 0, 0, 1])) needsRotation = true;\n\t\t\t\t\tif (!MathUtils.eq(s, [1, 1, 1])) needsScale = true;\n\n\t\t\t\t\t// Mark the node for cleanup.\n\t\t\t\t\tnode.setMesh(null);\n\t\t\t\t\tmodifiedNodes.push(node);\n\t\t\t\t}\n\n\t\t\t\tif (!needsTranslation) batchTranslation.dispose();\n\t\t\t\tif (!needsRotation) batchRotation.dispose();\n\t\t\t\tif (!needsScale) batchScale.dispose();\n\n\t\t\t\tpruneUnusedNodes(modifiedNodes, logger);\n\n\t\t\t\tnumBatches++;\n\t\t\t\tnumInstances += nodes.length;\n\t\t\t}\n\t\t}\n\n\t\tif (numBatches > 0) {\n\t\t\tlogger.info(`${NAME}: Created ${numBatches} batches, with ${numInstances} total instances.`);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No meshes with >=${options.min} parent nodes were found.`);\n\t\t}\n\n\t\tif (batchExtension.listProperties().length === 0) {\n\t\t\tbatchExtension.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction pruneUnusedNodes(nodes: Node[], logger: ILogger): void {\n\tlet node: Node | undefined;\n\tlet unusedNodes = 0;\n\twhile ((node = nodes.pop())) {\n\t\tif (\n\t\t\tnode.listChildren().length ||\n\t\t\tnode.getCamera() ||\n\t\t\tnode.getMesh() ||\n\t\t\tnode.getSkin() ||\n\t\t\tnode.listExtensions().length\n\t\t) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst nodeParent = node.getParentNode();\n\t\tif (nodeParent) nodes.push(nodeParent);\n\t\tnode.dispose();\n\t\tunusedNodes++;\n\t}\n\n\tlogger.debug(`${NAME}: Removed ${unusedNodes} unused nodes.`);\n}\n\nfunction hasVolume(prim: Primitive) {\n\tconst material = prim.getMaterial();\n\treturn !!(material && material.getExtension('KHR_materials_volume'));\n}\n\nfunction hasScale(node: Node) {\n\tconst scale = node.getWorldScale();\n\treturn !MathUtils.eq(scale, [1, 1, 1]);\n}\n\nfunction createBatch(doc: Document, batchExtension: EXTMeshGPUInstancing, mesh: Mesh, count: number): InstancedMesh {\n\tconst buffer = mesh.listPrimitives()[0].getAttribute('POSITION')!.getBuffer();\n\n\tconst batchTranslation = doc\n\t\t.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\tconst batchRotation = doc\n\t\t.createAccessor()\n\t\t.setType('VEC4')\n\t\t.setArray(new Float32Array(4 * count))\n\t\t.setBuffer(buffer);\n\tconst batchScale = doc\n\t\t.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\n\treturn batchExtension\n\t\t.createInstancedMesh()\n\t\t.setAttribute('TRANSLATION', batchTranslation)\n\t\t.setAttribute('ROTATION', batchRotation)\n\t\t.setAttribute('SCALE', batchScale);\n}\n","import { Document, Primitive, ComponentTypeToTypedArray } from '@gltf-transform/core';\nimport { createIndices, createPrimGroupKey } from './utils.js';\n\ninterface JoinPrimitiveOptions {\n\tskipValidation?: boolean;\n}\n\nconst JOIN_PRIMITIVE_DEFAULTS: Required<JoinPrimitiveOptions> = {\n\tskipValidation: false,\n};\n\n/**\n * Given a list of compatible Mesh {@link Primitive Primitives}, returns new Primitive\n * containing their vertex data. Compatibility requires that all Primitives share the\n * same {@link Material Materials}, draw mode, and vertex attribute types. Primitives\n * using morph targets cannot currently be joined.\n *\n * Example:\n *\n * ```javascript\n * import { joinPrimitives } from '@gltf-transform/functions';\n *\n * // Succeeds if Primitives are compatible, or throws an error.\n * const result = joinPrimitives(mesh.listPrimitives());\n *\n * for (const prim of mesh.listPrimitives()) {\n * \tprim.dispose();\n * }\n *\n * mesh.addPrimitive(result);\n * ```\n */\nexport function joinPrimitives(prims: Primitive[], options: JoinPrimitiveOptions = {}): Primitive {\n\toptions = { ...JOIN_PRIMITIVE_DEFAULTS, ...options };\n\tconst templatePrim = prims[0]!;\n\tconst document = Document.fromGraph(templatePrim.getGraph())!;\n\n\t// (1) Validation.\n\tif (!options.skipValidation && new Set(prims.map(createPrimGroupKey)).size > 1) {\n\t\tthrow new Error(\n\t\t\t'' +\n\t\t\t\t'Requires >=2 Primitives, sharing the same Material ' +\n\t\t\t\t'and Mode, with compatible vertex attributes and indices.',\n\t\t);\n\t}\n\n\tconst remapList = [] as Uint32Array[]; // remap[srcIndex] → dstIndex, by prim\n\tconst countList = [] as number[]; // vertex count, by prim\n\tconst indicesList = [] as (Uint32Array | Uint16Array)[]; // indices, by prim\n\n\tlet dstVertexCount = 0;\n\tlet dstIndicesCount = 0;\n\n\t// (2) Build remap lists.\n\tfor (const srcPrim of prims) {\n\t\tconst indices = _getOrCreateIndices(srcPrim);\n\t\tconst remap = [];\n\t\tlet count = 0;\n\t\tfor (let i = 0; i < indices.length; i++) {\n\t\t\tconst index = indices[i];\n\t\t\tif (remap[index] === undefined) {\n\t\t\t\tremap[index] = dstVertexCount++;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tdstIndicesCount++;\n\t\t}\n\t\tremapList.push(new Uint32Array(remap));\n\t\tcountList.push(count);\n\t\tindicesList.push(indices);\n\t}\n\n\t// (3) Allocate joined attributes.\n\tconst dstPrim = document.createPrimitive().setMode(templatePrim.getMode()).setMaterial(templatePrim.getMaterial());\n\tfor (const semantic of templatePrim.listSemantics()) {\n\t\tconst tplAttribute = templatePrim.getAttribute(semantic)!;\n\t\tconst AttributeArray = ComponentTypeToTypedArray[tplAttribute.getComponentType()];\n\t\tconst dstAttribute = document\n\t\t\t.createAccessor()\n\t\t\t.setType(tplAttribute.getType())\n\t\t\t.setBuffer(tplAttribute.getBuffer())\n\t\t\t.setNormalized(tplAttribute.getNormalized())\n\t\t\t.setArray(new AttributeArray(dstVertexCount * tplAttribute.getElementSize()));\n\t\tdstPrim.setAttribute(semantic, dstAttribute);\n\t}\n\n\t// (4) Allocate joined indices.\n\tconst dstIndicesArray = templatePrim.getIndices() ? createIndices(dstVertexCount) : null;\n\tconst dstIndices =\n\t\tdstIndicesArray &&\n\t\tdocument\n\t\t\t.createAccessor()\n\t\t\t.setBuffer(templatePrim.getIndices()!.getBuffer())\n\t\t\t.setArray(createIndices(dstIndicesCount, dstVertexCount));\n\tdstPrim.setIndices(dstIndices);\n\n\t// (5) Remap attributes into joined Primitive.\n\tlet dstNextIndex = 0;\n\tfor (let primIndex = 0; primIndex < remapList.length; primIndex++) {\n\t\tconst srcPrim = prims[primIndex];\n\t\tconst remap = remapList[primIndex];\n\t\tconst indicesArray = indicesList[primIndex];\n\n\t\tconst primStartIndex = dstNextIndex;\n\t\tlet primNextIndex = primStartIndex;\n\n\t\tfor (const semantic of dstPrim.listSemantics()) {\n\t\t\tconst srcAttribute = srcPrim.getAttribute(semantic)!;\n\t\t\tconst dstAttribute = dstPrim.getAttribute(semantic)!;\n\t\t\tconst el = [] as number[];\n\n\t\t\tprimNextIndex = primStartIndex;\n\t\t\tfor (let i = 0; i < indicesArray.length; i++) {\n\t\t\t\tconst index = indicesArray[i];\n\t\t\t\tsrcAttribute.getElement(index, el);\n\t\t\t\tdstAttribute.setElement(remap[index], el);\n\t\t\t\tif (dstIndices) {\n\t\t\t\t\tdstIndices.setScalar(primNextIndex++, remap[index]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdstNextIndex = primNextIndex;\n\t}\n\n\treturn dstPrim;\n}\n\nfunction _getOrCreateIndices(prim: Primitive): Uint16Array | Uint32Array {\n\tconst indices = prim.getIndices();\n\tif (indices) return indices.getArray() as Uint32Array | Uint16Array;\n\tconst position = prim.getAttribute('POSITION')!;\n\treturn createIndices(position.getCount());\n}\n","import {\n\tAnimationChannel,\n\tDocument,\n\tmat4,\n\tMesh,\n\tNode,\n\tPrimitive,\n\tPropertyType,\n\tScene,\n\tTransform,\n} from '@gltf-transform/core';\nimport { invert, multiply } from 'gl-matrix/mat4';\nimport { joinPrimitives } from './join-primitives.js';\nimport { prune } from './prune.js';\nimport { transformPrimitive } from './transform-primitive.js';\nimport { createPrimGroupKey, createTransform, formatLong, isUsed } from './utils.js';\nimport { dequantizeAttribute } from './dequantize.js';\n\nconst NAME = 'join';\n\nconst { ROOT, NODE, MESH, PRIMITIVE, ACCESSOR } = PropertyType;\n\n// prettier-ignore\nconst _matrix = [\n\t0, 0, 0, 0,\n\t0, 0, 0, 0,\n\t0, 0, 0, 0,\n\t0, 0, 0, 0,\n] as mat4;\n\n/** Options for the {@link join} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface JoinOptions {\n\t/**\n\t * Prevents joining distinct {@link Mesh Meshes} and {@link Node Nodes}.\n\t * Joins only Primitives found within the same parent Mesh. To preserve\n\t * only _named_ Nodes and Meshes, use\n\t * {@link JoinOptions.keepNamed keepNamed} instead. Default: false.\n\t */\n\tkeepMeshes: boolean;\n\t/**\n\t * Prevents joining _named_ {@link Mesh Meshes} and {@link Node Nodes}.\n\t * If {@link JoinOptions.keepMeshes keepMeshes} is enabled, keepNamed will\n\t * have no effect. Default: false.\n\t */\n\tkeepNamed: boolean;\n}\n\nexport const JOIN_DEFAULTS: Required<JoinOptions> = {\n\tkeepMeshes: false,\n\tkeepNamed: false,\n};\n\n/**\n * Joins compatible {@link Primitive Primitives} and reduces draw calls.\n * Primitives are eligible for joining if they are members of the same\n * {@link Mesh} or, optionally, attached to sibling {@link Node Nodes}\n * in the scene hierarchy. For best results, apply {@link dedup} and\n * {@link flatten} first to maximize the number of Primitives that\n * can be joined.\n *\n * NOTE: In a Scene that heavily reuses the same Mesh data, joining may\n * increase vertex count. Consider alternatives, like\n * {@link instance instancing} with {@link EXTMeshGPUInstancing}.\n *\n * Example:\n *\n * ```ts\n * import { PropertyType } from '@gltf-transform/core';\n * import { join, flatten, dedup } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tdedup({ propertyTypes: [PropertyType.MATERIAL] }),\n * \tflatten(),\n * \tjoin({ keepNamed: false }),\n * );\n * ```\n *\n * @category Transforms\n */\nexport function join(_options: JoinOptions = JOIN_DEFAULTS): Transform {\n\tconst options = { ...JOIN_DEFAULTS, ..._options } as Required<JoinOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst root = document.getRoot();\n\t\tconst logger = document.getLogger();\n\n\t\t// Join.\n\t\tfor (const scene of root.listScenes()) {\n\t\t\t_joinLevel(document, scene, options);\n\t\t\tscene.traverse((node) => _joinLevel(document, node, options));\n\t\t}\n\n\t\t// Clean up.\n\t\tawait document.transform(\n\t\t\tprune({\n\t\t\t\tpropertyTypes: [NODE, MESH, PRIMITIVE, ACCESSOR],\n\t\t\t\tkeepAttributes: true,\n\t\t\t\tkeepIndices: true,\n\t\t\t\tkeepLeaves: false,\n\t\t\t}),\n\t\t);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\ninterface IJoinGroup {\n\tkey: string;\n\tprims: Primitive[];\n\tprimMeshes: Mesh[];\n\tprimNodes: Node[];\n\tdstNode: Node;\n\tdstMesh?: Mesh | undefined;\n}\n\nfunction _joinLevel(document: Document, parent: Node | Scene, options: Required<JoinOptions>) {\n\tconst logger = document.getLogger();\n\tconst groups = {} as Record<string, IJoinGroup>;\n\n\t// Scan for compatible Primitives.\n\tconst children = parent.listChildren();\n\tfor (let nodeIndex = 0; nodeIndex < children.length; nodeIndex++) {\n\t\tconst node = children[nodeIndex];\n\n\t\t// Skip animated nodes.\n\t\tconst isAnimated = node.listParents().some((p) => p instanceof AnimationChannel);\n\t\tif (isAnimated) continue;\n\n\t\t// Skip nodes without meshes.\n\t\tconst mesh = node.getMesh();\n\t\tif (!mesh) continue;\n\n\t\t// Skip nodes with instancing; unsupported.\n\t\tif (node.getExtension('EXT_mesh_gpu_instancing')) continue;\n\n\t\t// Skip nodes with skinning; unsupported.\n\t\tif (node.getSkin()) continue;\n\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t// Skip prims with morph targets; unsupported.\n\t\t\tif (prim.listTargets().length > 0) continue;\n\n\t\t\t// Skip prims with volumetric materials; unsupported.\n\t\t\tconst material = prim.getMaterial();\n\t\t\tif (material && material.getExtension('KHR_materials_volume')) continue;\n\n\t\t\tdequantizeTransformableAttributes(prim);\n\n\t\t\tlet key = createPrimGroupKey(prim);\n\n\t\t\tconst isNamed = mesh.getName() || node.getName();\n\t\t\tif (options.keepMeshes || (options.keepNamed && isNamed)) {\n\t\t\t\tkey += `|${nodeIndex}`;\n\t\t\t}\n\n\t\t\tif (!(key in groups)) {\n\t\t\t\tgroups[key] = {\n\t\t\t\t\tprims: [] as Primitive[],\n\t\t\t\t\tprimMeshes: [] as Mesh[],\n\t\t\t\t\tprimNodes: [] as Node[],\n\t\t\t\t\tdstNode: node,\n\t\t\t\t\tdstMesh: undefined,\n\t\t\t\t} as IJoinGroup;\n\t\t\t}\n\n\t\t\tconst group = groups[key];\n\t\t\tgroup.prims.push(prim);\n\t\t\tgroup.primNodes.push(node);\n\t\t}\n\t}\n\n\t// Discard single-Primitive groups.\n\tconst joinGroups = Object.values(groups).filter(({ prims }) => prims.length > 1);\n\n\t// Unlink all affected Meshes at current level, before modifying Primitives.\n\tconst srcNodes = new Set<Node>(joinGroups.flatMap((group) => group.primNodes));\n\tfor (const node of srcNodes) {\n\t\tconst mesh = node.getMesh()!;\n\t\tconst isSharedMesh = mesh.listParents().some((parent) => {\n\t\t\treturn parent.propertyType !== ROOT && node !== parent;\n\t\t});\n\t\tif (isSharedMesh) {\n\t\t\tnode.setMesh(mesh.clone());\n\t\t}\n\t}\n\n\t// Update Meshes in groups.\n\tfor (const group of joinGroups) {\n\t\tconst { dstNode, primNodes } = group;\n\t\tgroup.dstMesh = dstNode.getMesh()!;\n\t\tgroup.primMeshes = primNodes.map((node) => node.getMesh()!);\n\t}\n\n\t// Join Primitives.\n\tfor (const group of joinGroups) {\n\t\tconst { prims, primNodes, primMeshes, dstNode, dstMesh } = group as Required<IJoinGroup>;\n\t\tconst dstMatrix = dstNode.getMatrix();\n\n\t\tfor (let i = 0; i < prims.length; i++) {\n\t\t\tconst primNode = primNodes[i];\n\t\t\tconst primMesh = primMeshes[i];\n\n\t\t\tlet prim = prims[i];\n\t\t\tprimMesh.removePrimitive(prim);\n\n\t\t\t// Primitives may be reused directly, or their attributes may be\n\t\t\t// used in another Primitive with a different Material.\n\t\t\tif (isUsed(prim) || hasSharedAttributes(prim)) {\n\t\t\t\tprim = prims[i] = _deepClonePrimitive(prims[i]);\n\t\t\t}\n\n\t\t\t// Transform Primitive into new local coordinate space.\n\t\t\tif (primNode !== dstNode) {\n\t\t\t\tmultiply(_matrix, invert(_matrix, dstMatrix), primNode.getMatrix());\n\t\t\t\ttransformPrimitive(prim, _matrix);\n\t\t\t}\n\t\t}\n\n\t\tconst dstPrim = joinPrimitives(prims);\n\t\tconst dstVertexCount = dstPrim.listAttributes()[0].getCount();\n\t\tdstMesh.addPrimitive(dstPrim);\n\n\t\tlogger.debug(\n\t\t\t`${NAME}: Joined Primitives (${prims.length}) containing ` +\n\t\t\t\t`${formatLong(dstVertexCount)} vertices under Node \"${dstNode.getName()}\".`,\n\t\t);\n\t}\n}\n\nfunction _deepClonePrimitive(src: Primitive): Primitive {\n\tconst dst = src.clone();\n\tfor (const semantic of dst.listSemantics()) {\n\t\tdst.setAttribute(semantic, dst.getAttribute(semantic)!.clone());\n\t}\n\tconst indices = dst.getIndices();\n\tif (indices) dst.setIndices(indices.clone());\n\treturn dst;\n}\n\nfunction hasSharedAttributes(prim: Primitive): boolean {\n\tfor (const attribute of prim.listAttributes()) {\n\t\tfor (const parent of attribute.listParents()) {\n\t\t\tif (parent !== prim && parent.propertyType !== ROOT) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Dequantize attributes that would be affected by {@link transformPrimitive},\n * to avoid invalidating our primitive group keys.\n *\n * See: https://github.com/donmccurdy/glTF-Transform/issues/844\n */\nfunction dequantizeTransformableAttributes(prim: Primitive) {\n\tfor (const semantic of ['POSITION', 'NORMAL', 'TANGENT']) {\n\t\tconst attribute = prim.getAttribute(semantic);\n\t\tif (attribute && attribute.getComponentSize() < 4) {\n\t\t\tdequantizeAttribute(semantic, attribute, { pattern: /.*/ });\n\t\t}\n\t}\n}\n","import { Document, Texture } from '@gltf-transform/core';\nimport { Material, TextureChannel, PropertyType } from '@gltf-transform/core';\n\n/**\n * Returns a list of {@link TextureChannel TextureChannels} used by the given\n * texture. Determination is based only on the _role_ of the textures, e.g.\n * a texture used for the `occlusionTexture` will have (at least) a red channel\n * in use. See {@link getTextureChannelMask} for bitmask alternative.\n *\n * Example:\n *\n * ```js\n * const channels = listTextureChannels(texture);\n * if (channels.includes(TextureChannel.R)) {\n *   console.log('texture red channel used');\n * }\n * ```\n */\nexport function listTextureChannels(texture: Texture): TextureChannel[] {\n\tconst mask = getTextureChannelMask(texture);\n\tconst channels = [];\n\tif (mask & TextureChannel.R) channels.push(TextureChannel.R);\n\tif (mask & TextureChannel.G) channels.push(TextureChannel.G);\n\tif (mask & TextureChannel.B) channels.push(TextureChannel.B);\n\tif (mask & TextureChannel.A) channels.push(TextureChannel.A);\n\treturn channels;\n}\n\n/**\n * Returns bitmask of all {@link TextureChannel TextureChannels} used by the\n * given texture. Determination is based only on the _role_ of the textures, e.g.\n * a texture used for the `occlusionTexture` will have (at least) a red channel.\n * See {@link listTextureChannels} for an array alternative.\n *\n * Example:\n *\n * ```js\n * const mask = getTextureChannelMask(texture);\n * if (mask & TextureChannel.R) {\n *   console.log('texture red channel used');\n * }\n * ```\n */\nexport function getTextureChannelMask(texture: Texture): number {\n\tconst document = Document.fromGraph(texture.getGraph())!;\n\tlet mask = 0x0000;\n\tfor (const edge of document.getGraph().listParentEdges(texture)) {\n\t\tconst parent = edge.getParent();\n\t\tlet { channels } = edge.getAttributes() as { channels: number | undefined };\n\n\t\tif (\n\t\t\tchannels &&\n\t\t\tedge.getName() === 'baseColorTexture' &&\n\t\t\tparent instanceof Material &&\n\t\t\tparent.getAlphaMode() === Material.AlphaMode.OPAQUE\n\t\t) {\n\t\t\tchannels &= ~TextureChannel.A;\n\t\t}\n\n\t\tif (channels) {\n\t\t\tmask |= channels;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\tdocument.getLogger().warn(`Missing attribute \".channels\" on edge, \"${edge.getName()}\".`);\n\t\t}\n\t}\n\treturn mask;\n}\n","import { Accessor, Document, GLTF, Primitive, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune.js';\nimport { createTransform, deepListAttributes, remapAttribute, SetMap } from './utils.js';\nimport type { MeshoptEncoder } from 'meshoptimizer';\n\nconst NAME = 'reorder';\n\n/** Options for the {@link reorder} function. */\nexport interface ReorderOptions {\n\t/** MeshoptEncoder instance. */\n\tencoder: unknown;\n\t/**\n\t * Whether the order should be optimal for transmission size (recommended for Web)\n\t * or for GPU rendering performance. Default is 'size'.\n\t */\n\ttarget?: 'size' | 'performance';\n}\n\nconst REORDER_DEFAULTS: Required<Omit<ReorderOptions, 'encoder'>> = {\n\ttarget: 'size',\n};\n\n/**\n * Optimizes {@link Mesh} {@link Primitive Primitives} for locality of reference. Choose whether\n * the order should be optimal for transmission size (recommended for Web) or for GPU rendering\n * performance. Requires a MeshoptEncoder instance from the Meshoptimizer library.\n *\n * Example:\n *\n * ```ts\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await MeshoptEncoder.ready;\n *\n * await document.transform(\n * \treorder({encoder: MeshoptEncoder})\n * );\n * ```\n *\n * @category Transforms\n */\nexport function reorder(_options: ReorderOptions): Transform {\n\tconst options = { ...REORDER_DEFAULTS, ..._options } as Required<ReorderOptions>;\n\tconst encoder = options.encoder as typeof MeshoptEncoder | undefined;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${NAME}: encoder dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tawait encoder.ready;\n\n\t\tconst plan = createLayoutPlan(doc);\n\n\t\tfor (const srcIndices of plan.indicesToAttributes.keys()) {\n\t\t\tconst dstIndices = srcIndices.clone();\n\t\t\tlet indicesArray = dstIndices.getArray()!.slice();\n\t\t\tif (!(indicesArray instanceof Uint32Array)) {\n\t\t\t\tindicesArray = new Uint32Array(indicesArray);\n\t\t\t}\n\n\t\t\t// Compute optimal order.\n\t\t\tconst [remap, unique] = encoder.reorderMesh(\n\t\t\t\tindicesArray,\n\t\t\t\tplan.indicesToMode.get(srcIndices) === Primitive.Mode.TRIANGLES,\n\t\t\t\toptions.target === 'size',\n\t\t\t);\n\n\t\t\tdstIndices.setArray(unique <= 65534 ? new Uint16Array(indicesArray) : indicesArray);\n\n\t\t\t// Update affected primitives.\n\t\t\tfor (const srcAttribute of plan.indicesToAttributes.get(srcIndices)) {\n\t\t\t\tconst dstAttribute = srcAttribute.clone();\n\t\t\t\tremapAttribute(dstAttribute, remap, unique);\n\t\t\t\tfor (const prim of plan.attributesToPrimitives.get(srcAttribute)) {\n\t\t\t\t\tif (prim.getIndices() === srcIndices) {\n\t\t\t\t\t\tprim.swap(srcIndices, dstIndices);\n\t\t\t\t\t}\n\t\t\t\t\tif (prim.getIndices() === dstIndices) {\n\t\t\t\t\t\tprim.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\t\t\ttarget.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Clean up any attributes left unused by earlier cloning.\n\t\tawait doc.transform(\n\t\t\tprune({\n\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR],\n\t\t\t\tkeepAttributes: true,\n\t\t\t\tkeepIndices: true,\n\t\t\t}),\n\t\t);\n\n\t\tif (!plan.indicesToAttributes.size) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found; may need to weld first.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\n/** @hidden */\ninterface LayoutPlan {\n\tindicesToMode: Map<Accessor, GLTF.MeshPrimitiveMode>;\n\tindicesToAttributes: SetMap<Accessor, Accessor>;\n\tattributesToPrimitives: SetMap<Accessor, Primitive>;\n}\n\n/**\n * Constructs a plan for processing vertex streams, based on unique\n * index:attribute[] groups. Where different indices are used with the same\n * attributes, we'll end up splitting the primitives to not share attributes,\n * which appears to be consistent with the Meshopt implementation.\n *\n * @hidden\n */\nfunction createLayoutPlan(document: Document): LayoutPlan {\n\tconst indicesToAttributes = new SetMap<Accessor, Accessor>();\n\tconst indicesToMode = new Map<Accessor, GLTF.MeshPrimitiveMode>();\n\tconst attributesToPrimitives = new SetMap<Accessor, Primitive>();\n\n\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tconst indices = prim.getIndices();\n\t\t\tif (!indices) continue;\n\n\t\t\tindicesToMode.set(indices, prim.getMode());\n\n\t\t\tfor (const attribute of deepListAttributes(prim)) {\n\t\t\t\tindicesToAttributes.add(indices, attribute);\n\t\t\t\tattributesToPrimitives.add(attribute, prim);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { indicesToAttributes, indicesToMode, attributesToPrimitives };\n}\n","import { Accessor, GLTF, MathUtils, Primitive, PrimitiveTarget, TypedArray, vec4 } from '@gltf-transform/core';\n\n/**\n * Sorts skinning weights from high to low, for each vertex of the input\n * {@link Primitive} or {@link PrimitiveTarget}, and normalizes the weights.\n * Optionally, uses the given 'limit' to remove least-significant joint\n * influences such that no vertex has more than 'limit' influences.\n *\n * Most realtime engines support a limited number of joint influences per vertex,\n * often 4 or 8. Sorting and removing the additional influences can reduce file\n * size and improve compatibility.\n *\n * Example:\n *\n * ```javascript\n * import { sortPrimitiveWeights } from '@gltf-transform/functions';\n *\n * const limit = 4;\n * for (const mesh of document.getRoot().listMeshes()) {\n * \tfor (const prim of mesh.listPrimitives()) {\n * \t\tsortPrimitiveWeights(prim, limit);\n * \t}\n * }\n * ```\n *\n * @param prim Input, to be modified in place.\n * @param limit Maximum number of joint influences per vertex. Must be a multiple of four.\n */\nexport function sortPrimitiveWeights(prim: Primitive | PrimitiveTarget, limit = Infinity) {\n\tif ((Number.isFinite(limit) && limit % 4) || limit <= 0) {\n\t\tthrow new Error(`Limit must be positive multiple of four.`);\n\t}\n\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst setCount = prim.listSemantics().filter((name) => name.startsWith('WEIGHTS_')).length;\n\n\t// (1) Sort.\n\n\tconst indices = new Uint16Array(setCount * 4);\n\tconst srcWeights = new Float32Array(setCount * 4);\n\tconst dstWeights = new Float32Array(setCount * 4);\n\tconst srcJoints = new Uint32Array(setCount * 4);\n\tconst dstJoints = new Uint32Array(setCount * 4);\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tgetVertexArray(prim, i, 'WEIGHTS', srcWeights);\n\t\tgetVertexArray(prim, i, 'JOINTS', srcJoints);\n\n\t\t// Sort indices to create a lookup table, indices[dstIndex] → srcIndex,\n\t\t// indexed into the weights and joints arrays.\n\t\tfor (let j = 0; j < setCount * 4; j++) indices[j] = j;\n\t\tindices.sort((a, b) => (srcWeights[a] > srcWeights[b] ? -1 : 1));\n\n\t\t// Sort weights and joints.\n\t\tfor (let j = 0; j < indices.length; j++) {\n\t\t\tdstWeights[j] = srcWeights[indices[j]];\n\t\t\tdstJoints[j] = srcJoints[indices[j]];\n\t\t}\n\n\t\tsetVertexArray(prim, i, 'WEIGHTS', dstWeights);\n\t\tsetVertexArray(prim, i, 'JOINTS', dstJoints);\n\t}\n\n\t// (2) Limit.\n\tfor (let i = setCount; i * 4 > limit; i--) {\n\t\tconst weights = prim.getAttribute(`WEIGHTS_${i - 1}`)!;\n\t\tconst joints = prim.getAttribute(`JOINTS_${i - 1}`)!;\n\t\tprim.setAttribute(`WEIGHTS_${i - 1}`, null);\n\t\tprim.setAttribute(`JOINTS_${i - 1}`, null);\n\t\tif (weights.listParents().length === 1) weights.dispose();\n\t\tif (joints.listParents().length === 1) joints.dispose();\n\t}\n\n\t// (3) Normalize.\n\tnormalizePrimitiveWeights(prim);\n}\n\n// Utilities.\n\ntype PrimLike = Primitive | PrimitiveTarget;\n\nfunction normalizePrimitiveWeights(prim: PrimLike): void {\n\t// Would prefer to warn if unsafe, but no logger accessible in this scope.\n\tif (!isNormalizeSafe(prim)) return;\n\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst setCount = prim.listSemantics().filter((name) => name.startsWith('WEIGHTS_')).length;\n\n\tconst templateAttribute = prim.getAttribute('WEIGHTS_0')!;\n\tconst templateArray = templateAttribute.getArray()!;\n\tconst componentType = templateAttribute.getComponentType();\n\tconst normalized = templateAttribute.getNormalized();\n\tconst normalizedComponentType = normalized ? componentType : undefined;\n\tconst delta = normalized ? MathUtils.decodeNormalizedInt(1, componentType) : Number.EPSILON;\n\tconst joints = new Uint32Array(setCount * 4).fill(0);\n\tconst weights = templateArray.slice(0, setCount * 4).fill(0);\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tgetVertexArray(prim, i, 'JOINTS', joints);\n\t\tgetVertexArray(prim, i, 'WEIGHTS', weights, normalizedComponentType);\n\n\t\tlet weightsSum = sum(weights, normalizedComponentType);\n\t\tif (weightsSum === 0) continue;\n\n\t\t// (1) If sum of weights not within δ of 1, renormalize all weights.\n\t\tif (Math.abs(1 - weightsSum) > delta) {\n\t\t\tfor (let j = 0; j < weights.length; j++) {\n\t\t\t\tif (normalized) {\n\t\t\t\t\tconst intValue = MathUtils.encodeNormalizedInt(weights[j] / weightsSum, componentType);\n\t\t\t\t\tweights[j] = MathUtils.decodeNormalizedInt(intValue, componentType);\n\t\t\t\t} else {\n\t\t\t\t\tweights[j] /= weightsSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tweightsSum = sum(weights, normalizedComponentType);\n\n\t\t// (2) Sum of normalized weights may still be off by δ. Compensate\n\t\t// in least-significant weight.\n\t\tif (normalized && weightsSum !== 1) {\n\t\t\tfor (let j = weights.length - 1; j >= 0; j--) {\n\t\t\t\tif (weights[j] > 0) {\n\t\t\t\t\tweights[j] += MathUtils.encodeNormalizedInt(1 - weightsSum, componentType);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (3) Remove joint indices whose weights have fallen to zero.\n\t\tfor (let j = weights.length - 1; j >= 0; j--) {\n\t\t\tif (weights[j] === 0) {\n\t\t\t\tjoints[j] = 0;\n\t\t\t}\n\t\t}\n\n\t\tsetVertexArray(prim, i, 'JOINTS', joints);\n\t\tsetVertexArray(prim, i, 'WEIGHTS', weights, normalizedComponentType);\n\t}\n}\n\n/** Lists all values of a multi-set vertex attribute (WEIGHTS_#, ...) for given vertex. */\nfunction getVertexArray(\n\tprim: PrimLike,\n\tvertexIndex: number,\n\tprefix: string,\n\ttarget: TypedArray,\n\tnormalizedComponentType?: GLTF.AccessorComponentType\n): TypedArray {\n\tlet weights: Accessor | null;\n\tconst el = [0, 0, 0, 0] as vec4;\n\tfor (let i = 0; (weights = prim.getAttribute(`${prefix}_${i}`)); i++) {\n\t\tweights.getElement(vertexIndex, el);\n\t\tfor (let j = 0; j < 4; j++) {\n\t\t\tif (normalizedComponentType) {\n\t\t\t\ttarget[i * 4 + j] = MathUtils.encodeNormalizedInt(el[j], normalizedComponentType);\n\t\t\t} else {\n\t\t\t\ttarget[i * 4 + j] = el[j];\n\t\t\t}\n\t\t}\n\t}\n\treturn target;\n}\n\n/** Sets all values of a multi-set vertex attribute (WEIGHTS_#, ...) for given vertex. */\nfunction setVertexArray(\n\tprim: PrimLike,\n\tvertexIndex: number,\n\tprefix: string,\n\tvalues: TypedArray,\n\tnormalizedComponentType?: GLTF.AccessorComponentType\n): void {\n\tlet weights: Accessor | null;\n\tconst el = [0, 0, 0, 0] as vec4;\n\tfor (let i = 0; (weights = prim.getAttribute(`${prefix}_${i}`)); i++) {\n\t\tfor (let j = 0; j < 4; j++) {\n\t\t\tif (normalizedComponentType) {\n\t\t\t\tel[j] = MathUtils.decodeNormalizedInt(values[i * 4 + j], normalizedComponentType);\n\t\t\t} else {\n\t\t\t\tel[j] = values[i * 4 + j];\n\t\t\t}\n\t\t}\n\t\tweights.setElement(vertexIndex, el);\n\t}\n}\n\n/** Sum an array of numbers. */\nfunction sum(values: TypedArray, normalizedComponentType?: GLTF.AccessorComponentType): number {\n\tlet sum = 0;\n\tfor (let i = 0; i < values.length; i++) {\n\t\tif (normalizedComponentType) {\n\t\t\tsum += MathUtils.decodeNormalizedInt(values[i], normalizedComponentType);\n\t\t} else {\n\t\t\tsum += values[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\n/** Returns true if attribute normalization is supported for this primitive. */\nfunction isNormalizeSafe(prim: PrimLike): boolean {\n\tconst attributes = prim\n\t\t.listSemantics()\n\t\t.filter((name) => name.startsWith('WEIGHTS_'))\n\t\t.map((name) => prim.getAttribute(name)!);\n\tconst normList = attributes.map((a) => a.getNormalized());\n\tconst typeList = attributes.map((a) => a.getComponentType());\n\treturn new Set(normList).size === 1 && new Set(typeList).size === 1;\n}\n","import {\n\tAccessor,\n\tAnimationChannel,\n\tbbox,\n\tDocument,\n\tILogger,\n\tmat4,\n\tMathUtils,\n\tMesh,\n\tNode,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tSkin,\n\tTransform,\n\tvec2,\n\tvec3,\n\tvec4,\n} from '@gltf-transform/core';\nimport { dedup } from './dedup.js';\nimport { fromRotationTranslationScale, fromScaling, invert, multiply as multiplyMat4 } from 'gl-matrix/mat4';\nimport { max, min, scale, transformMat4 } from 'gl-matrix/vec3';\nimport { InstancedMesh, KHRMeshQuantization } from '@gltf-transform/extensions';\nimport type { Volume } from '@gltf-transform/extensions';\nimport { prune } from './prune.js';\nimport { createTransform } from './utils.js';\nimport { sortPrimitiveWeights } from './sort-primitive-weights.js';\n\nconst NAME = 'quantize';\n\ntype TypedArrayConstructor =\n\t| Int8ArrayConstructor\n\t| Int16ArrayConstructor\n\t| Uint8ArrayConstructor\n\t| Uint16ArrayConstructor;\nconst SIGNED_INT = [Int8Array, Int16Array, Int32Array] as TypedArrayConstructor[];\n\nconst { TRANSLATION, ROTATION, SCALE, WEIGHTS } = AnimationChannel.TargetPath;\nconst TRS_CHANNELS = [TRANSLATION, ROTATION, SCALE];\n\n/** Options for the {@link quantize} function. */\nexport interface QuantizeOptions {\n\t/** Pattern (regex) used to filter vertex attribute semantics for quantization. Default: all. */\n\tpattern?: RegExp;\n\t/** Pattern (regex) used to filter morph target semantics for quantization. Default: `options.pattern`. */\n\tpatternTargets?: RegExp;\n\t/** Bounds for quantization grid. */\n\tquantizationVolume?: 'mesh' | 'scene';\n\t/** Quantization bits for `POSITION` attributes. */\n\tquantizePosition?: number;\n\t/** Quantization bits for `NORMAL` attributes. */\n\tquantizeNormal?: number;\n\t/** Quantization bits for `TEXCOORD_*` attributes. */\n\tquantizeTexcoord?: number;\n\t/** Quantization bits for `COLOR_*` attributes. */\n\tquantizeColor?: number;\n\t/** Quantization bits for `WEIGHT_*` attributes. */\n\tquantizeWeight?: number;\n\t/** Quantization bits for application-specific (`_*`) attributes. */\n\tquantizeGeneric?: number;\n\t/** Normalize weight attributes. */\n\tnormalizeWeights?: boolean;\n}\n\nexport const QUANTIZE_DEFAULTS: Required<Omit<QuantizeOptions, 'patternTargets'>> = {\n\tpattern: /.*/,\n\tquantizationVolume: 'mesh',\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeTexcoord: 12,\n\tquantizeColor: 8,\n\tquantizeWeight: 8,\n\tquantizeGeneric: 12,\n\tnormalizeWeights: true,\n};\n\n/**\n * References:\n * - https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n * - http://www.aclockworkberry.com/normal-unpacking-quantization-errors/\n * - https://www.mathworks.com/help/dsp/ref/uniformencoder.html\n * - https://oroboro.com/compressed-unit-vectors/\n */\n\n/**\n * Quantizes vertex attributes with `KHR_mesh_quantization`, reducing the size and memory footprint\n * of the file.\n *\n * @category Transforms\n */\nexport function quantize(_options: QuantizeOptions = QUANTIZE_DEFAULTS): Transform {\n\tconst options = { ...QUANTIZE_DEFAULTS, ..._options } as Required<QuantizeOptions>;\n\n\toptions.patternTargets = options.patternTargets || options.pattern;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\n\t\tdoc.createExtension(KHRMeshQuantization).setRequired(true);\n\n\t\t// Compute vertex position quantization volume.\n\t\tlet nodeTransform: VectorTransform<vec3> | undefined = undefined;\n\t\tif (options.quantizationVolume === 'scene') {\n\t\t\tnodeTransform = getNodeTransform(expandBounds(root.listMeshes().map(getPositionQuantizationVolume)));\n\t\t}\n\n\t\t// Quantize mesh primitives.\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tif (options.quantizationVolume === 'mesh') {\n\t\t\t\tnodeTransform = getNodeTransform(getPositionQuantizationVolume(mesh));\n\t\t\t}\n\n\t\t\tif (nodeTransform && options.pattern.test('POSITION')) {\n\t\t\t\ttransformMeshParents(doc, mesh, nodeTransform);\n\t\t\t\ttransformMeshMaterials(mesh, 1 / nodeTransform.scale);\n\t\t\t}\n\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tquantizePrimitive(doc, prim, nodeTransform!, options);\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tquantizePrimitive(doc, target, nodeTransform!, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait doc.transform(\n\t\t\tprune({\n\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR, PropertyType.SKIN, PropertyType.MATERIAL],\n\t\t\t\tkeepAttributes: true,\n\t\t\t\tkeepIndices: true,\n\t\t\t\tkeepLeaves: true,\n\t\t\t\tkeepSolidTextures: true,\n\t\t\t}),\n\t\t\tdedup({\n\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR, PropertyType.MATERIAL, PropertyType.SKIN],\n\t\t\t\tkeepUniqueNames: true,\n\t\t\t}),\n\t\t);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction quantizePrimitive(\n\tdoc: Document,\n\tprim: Primitive | PrimitiveTarget,\n\tnodeTransform: VectorTransform<vec3>,\n\toptions: Required<QuantizeOptions>,\n): void {\n\tconst isTarget = prim instanceof PrimitiveTarget;\n\tconst logger = doc.getLogger();\n\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (!isTarget && !options.pattern.test(semantic)) continue;\n\t\tif (isTarget && !options.patternTargets.test(semantic)) continue;\n\n\t\tconst srcAttribute = prim.getAttribute(semantic)!;\n\n\t\tconst { bits, ctor } = getQuantizationSettings(semantic, srcAttribute, logger, options);\n\n\t\tif (!ctor) continue;\n\t\tif (bits < 8 || bits > 16) throw new Error(`${NAME}: Requires bits = 8–16.`);\n\t\tif (srcAttribute.getComponentSize() <= bits / 8) continue;\n\n\t\tconst dstAttribute = srcAttribute.clone();\n\n\t\t// Remap position data.\n\t\tif (semantic === 'POSITION') {\n\t\t\tconst scale = nodeTransform.scale;\n\t\t\tconst transform: mat4 = [] as unknown as mat4;\n\t\t\t// Morph targets are relative offsets, don't translate them.\n\t\t\tprim instanceof Primitive\n\t\t\t\t? invert(transform, fromTransform(nodeTransform))\n\t\t\t\t: fromScaling(transform, [1 / scale, 1 / scale, 1 / scale]);\n\t\t\tfor (let i = 0, el: vec3 = [0, 0, 0], il = dstAttribute.getCount(); i < il; i++) {\n\t\t\t\tdstAttribute.getElement(i, el);\n\t\t\t\tdstAttribute.setElement(i, transformMat4(el, el, transform) as vec3);\n\t\t\t}\n\t\t}\n\n\t\t// Quantize the vertex attribute.\n\t\tquantizeAttribute(dstAttribute, ctor, bits);\n\t\tprim.swap(srcAttribute, dstAttribute);\n\t}\n\n\t// Normalize skinning weights.\n\tif (options.normalizeWeights && prim.getAttribute('WEIGHTS_0')) {\n\t\tsortPrimitiveWeights(prim, Infinity);\n\t}\n\n\tif (\n\t\tprim instanceof Primitive &&\n\t\tprim.getIndices() &&\n\t\tprim.listAttributes().length &&\n\t\tprim.listAttributes()[0]!.getCount() < 65535\n\t) {\n\t\tconst indices = prim.getIndices()!;\n\t\tindices.setArray(new Uint16Array(indices.getArray()!));\n\t}\n}\n\n/** Computes node quantization transforms in local space. */\nfunction getNodeTransform(volume: bbox): VectorTransform<vec3> {\n\tconst { min, max } = volume;\n\n\t// Scaling factor transforms [-1,1] box to the mesh AABB in local space.\n\t// See: https://github.com/donmccurdy/glTF-Transform/issues/328\n\tconst scale = Math.max(\n\t\t(max[0] - min[0]) / 2, // Divide because interval [-1,1] has length 2.\n\t\t(max[1] - min[1]) / 2,\n\t\t(max[2] - min[2]) / 2,\n\t);\n\n\t// Original center of the mesh, in local space.\n\tconst offset: vec3 = [\n\t\tmin[0] + (max[0] - min[0]) / 2,\n\t\tmin[1] + (max[1] - min[1]) / 2,\n\t\tmin[2] + (max[2] - min[2]) / 2,\n\t];\n\n\treturn { offset, scale };\n}\n\n/** Applies corrective scale and offset to nodes referencing a quantized Mesh. */\nfunction transformMeshParents(doc: Document, mesh: Mesh, nodeTransform: VectorTransform<vec3>): void {\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tfor (const parent of mesh.listParents()) {\n\t\tif (!(parent instanceof Node)) continue;\n\n\t\tconst animChannels = parent.listParents().filter((p) => p instanceof AnimationChannel) as AnimationChannel[];\n\t\tconst isAnimated = animChannels.some((channel) => TRS_CHANNELS.includes(channel.getTargetPath()!));\n\t\tconst isParentNode = parent.listChildren().length > 0;\n\n\t\tconst skin = parent.getSkin();\n\t\tif (skin) {\n\t\t\tparent.setSkin(transformSkin(skin, nodeTransform));\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst batch = parent.getExtension<InstancedMesh>('EXT_mesh_gpu_instancing');\n\t\tif (batch) {\n\t\t\tparent.setExtension('EXT_mesh_gpu_instancing', transformBatch(batch, nodeTransform));\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet targetNode: Node;\n\t\tif (isParentNode || isAnimated) {\n\t\t\ttargetNode = doc.createNode('').setMesh(mesh);\n\t\t\tparent.addChild(targetNode).setMesh(null);\n\t\t\tanimChannels\n\t\t\t\t.filter((channel) => channel.getTargetPath() === WEIGHTS)\n\t\t\t\t.forEach((channel) => channel.setTargetNode(targetNode));\n\t\t} else {\n\t\t\ttargetNode = parent;\n\t\t}\n\n\t\tconst nodeMatrix = targetNode.getMatrix();\n\t\tmultiplyMat4(nodeMatrix, nodeMatrix, transformMatrix);\n\t\ttargetNode.setMatrix(nodeMatrix);\n\t}\n}\n\n/** Applies corrective scale and offset to skin IBMs. */\nfunction transformSkin(skin: Skin, nodeTransform: VectorTransform<vec3>): Skin {\n\tskin = skin.clone(); // quantize() does cleanup.\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tconst inverseBindMatrices = skin.getInverseBindMatrices()!.clone();\n\tconst ibm = [] as unknown as mat4;\n\tfor (let i = 0, count = inverseBindMatrices.getCount(); i < count; i++) {\n\t\tinverseBindMatrices.getElement(i, ibm);\n\t\tmultiplyMat4(ibm, ibm, transformMatrix);\n\t\tinverseBindMatrices.setElement(i, ibm);\n\t}\n\treturn skin.setInverseBindMatrices(inverseBindMatrices);\n}\n\n/** Applies corrective scale and offset to GPU instancing batches. */\nfunction transformBatch(batch: InstancedMesh, nodeTransform: VectorTransform<vec3>): InstancedMesh {\n\tif (!batch.getAttribute('TRANSLATION') && !batch.getAttribute('ROTATION') && !batch.getAttribute('SCALE')) {\n\t\treturn batch;\n\t}\n\n\tbatch = batch.clone(); // quantize() does cleanup.\n\tconst instanceTranslation = batch.getAttribute('TRANSLATION')?.clone();\n\tconst instanceRotation = batch.getAttribute('ROTATION')?.clone();\n\tconst instanceScale = batch.getAttribute('SCALE')?.clone();\n\tconst tpl = (instanceTranslation || instanceRotation || instanceScale)!;\n\n\tconst T_IDENTITY = [0, 0, 0] as vec3;\n\tconst R_IDENTITY = [0, 0, 0, 1] as vec4;\n\tconst S_IDENTITY = [1, 1, 1] as vec3;\n\n\tconst t = [0, 0, 0] as vec3;\n\tconst r = [0, 0, 0, 1] as vec4;\n\tconst s = [1, 1, 1] as vec3;\n\n\t// prettier-ignore\n\tconst instanceMatrix = [\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 1,\n\t] as mat4;\n\n\tconst transformMatrix = fromTransform(nodeTransform);\n\n\tfor (let i = 0, count = tpl.getCount(); i < count; i++) {\n\t\tMathUtils.compose(\n\t\t\tinstanceTranslation ? (instanceTranslation.getElement(i, t) as vec3) : T_IDENTITY,\n\t\t\tinstanceRotation ? (instanceRotation.getElement(i, r) as vec4) : R_IDENTITY,\n\t\t\tinstanceScale ? (instanceScale.getElement(i, s) as vec3) : S_IDENTITY,\n\t\t\tinstanceMatrix,\n\t\t);\n\n\t\tmultiplyMat4(instanceMatrix, instanceMatrix, transformMatrix);\n\n\t\tMathUtils.decompose(instanceMatrix, t, r, s);\n\n\t\tif (instanceTranslation) instanceTranslation.setElement(i, t);\n\t\tif (instanceRotation) instanceRotation.setElement(i, r);\n\t\tif (instanceScale) instanceScale.setElement(i, s);\n\t}\n\n\tif (instanceTranslation) batch.setAttribute('TRANSLATION', instanceTranslation);\n\tif (instanceRotation) batch.setAttribute('ROTATION', instanceRotation);\n\tif (instanceScale) batch.setAttribute('SCALE', instanceScale);\n\n\treturn batch;\n}\n\n/** Applies corrective scale to volumetric materials, which give thickness in local units. */\nfunction transformMeshMaterials(mesh: Mesh, scale: number) {\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tlet material = prim.getMaterial();\n\t\tif (!material) continue;\n\n\t\tlet volume = material.getExtension<Volume>('KHR_materials_volume');\n\t\tif (!volume || volume.getThicknessFactor() <= 0) continue;\n\n\t\t// quantize() does cleanup.\n\t\tvolume = volume.clone().setThicknessFactor(volume.getThicknessFactor() * scale);\n\t\tmaterial = material.clone().setExtension('KHR_materials_volume', volume);\n\t\tprim.setMaterial(material);\n\t}\n}\n\n/**\n * Quantizes an attribute to the given parameters.\n *\n * Uniformly remap 32-bit floats to reduced-precision 8- or 16-bit integers, so\n * that there are only 2^N unique values, for N within [8, 16].\n *\n * See: https://github.com/donmccurdy/glTF-Transform/issues/208\n */\nfunction quantizeAttribute(attribute: Accessor, ctor: TypedArrayConstructor, bits: number): void {\n\tconst dstArray = new ctor(attribute.getArray()!.length);\n\n\tconst signBits = SIGNED_INT.includes(ctor) ? 1 : 0;\n\tconst quantBits = bits - signBits;\n\tconst storageBits = ctor.BYTES_PER_ELEMENT * 8 - signBits;\n\n\tconst scale = Math.pow(2, quantBits) - 1;\n\tconst lo = storageBits - quantBits;\n\tconst hi = 2 * quantBits - storageBits;\n\tconst range = [signBits > 0 ? -1 : 0, 1] as vec2;\n\n\tfor (let i = 0, di = 0, el: number[] = []; i < attribute.getCount(); i++) {\n\t\tattribute.getElement(i, el);\n\t\tfor (let j = 0; j < el.length; j++) {\n\t\t\t// Clamp to range.\n\t\t\tlet value = clamp(el[j], range);\n\n\t\t\t// Map [0.0 ... 1.0] to [0 ... scale].\n\t\t\tvalue = Math.round(Math.abs(value) * scale);\n\n\t\t\t// Replicate msb to missing lsb.\n\t\t\tvalue = (value << lo) | (value >> hi);\n\n\t\t\t// Restore sign.\n\t\t\tdstArray[di++] = value * Math.sign(el[j]);\n\t\t}\n\t}\n\n\t// TODO(feat): Support sparse accessors, https://github.com/donmccurdy/glTF-Transform/issues/795\n\tattribute.setArray(dstArray).setNormalized(true).setSparse(false);\n}\n\nfunction getQuantizationSettings(\n\tsemantic: string,\n\tattribute: Accessor,\n\tlogger: ILogger,\n\toptions: Required<QuantizeOptions>,\n): { bits: number; ctor?: TypedArrayConstructor } {\n\tconst min = attribute.getMinNormalized([]);\n\tconst max = attribute.getMaxNormalized([]);\n\n\tlet bits: number;\n\tlet ctor: TypedArrayConstructor;\n\n\tif (semantic === 'POSITION') {\n\t\tbits = options.quantizePosition;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic === 'NORMAL' || semantic === 'TANGENT') {\n\t\tbits = options.quantizeNormal;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic.startsWith('COLOR_')) {\n\t\tbits = options.quantizeColor;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('TEXCOORD_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeTexcoord;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('JOINTS_')) {\n\t\tbits = Math.max(...attribute.getMax([])) <= 255 ? 8 : 16;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t\tif (attribute.getComponentSize() > bits / 8) {\n\t\t\tattribute.setArray(new ctor(attribute.getArray()!));\n\t\t}\n\t\treturn { bits: -1 };\n\t} else if (semantic.startsWith('WEIGHTS_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeWeight;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('_')) {\n\t\tif (min.some((v) => v < -1) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [-1,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeGeneric;\n\t\tctor = min.some((v) => v < 0)\n\t\t\t? (ctor = bits <= 8 ? Int8Array : Int16Array)\n\t\t\t: (ctor = bits <= 8 ? Uint8Array : Uint16Array);\n\t} else {\n\t\tthrow new Error(`${NAME}: Unexpected semantic, \"${semantic}\".`);\n\t}\n\n\treturn { bits, ctor };\n}\n\nfunction getPositionQuantizationVolume(mesh: Mesh): bbox {\n\tconst positions: Accessor[] = [];\n\tconst relativePositions: Accessor[] = [];\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tconst attribute = prim.getAttribute('POSITION');\n\t\tif (attribute) positions.push(attribute);\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tconst attribute = target.getAttribute('POSITION');\n\t\t\tif (attribute) relativePositions.push(attribute);\n\t\t}\n\t}\n\n\tif (positions.length === 0) {\n\t\tthrow new Error(`${NAME}: Missing \"POSITION\" attribute.`);\n\t}\n\n\tconst bbox = flatBounds<vec3>(positions, 3);\n\n\t// Morph target quantization volume is computed differently. First, ensure that the origin\n\t// <0, 0, 0> is in the quantization volume. Because we can't offset target positions (they're\n\t// relative deltas), default remapping will only map to a [-2, 2] AABB. Double the bounding box\n\t// to ensure scaling puts them within a [-1, 1] AABB instead.\n\tif (relativePositions.length > 0) {\n\t\tconst { min: relMin, max: relMax } = flatBounds<vec3>(relativePositions, 3);\n\t\tmin(bbox.min, bbox.min, min(relMin, scale(relMin, relMin, 2), [0, 0, 0]));\n\t\tmax(bbox.max, bbox.max, max(relMax, scale(relMax, relMax, 2), [0, 0, 0]));\n\t}\n\n\treturn bbox;\n}\n\n/** Computes total min and max of all Accessors in a list. */\nfunction flatBounds<T = vec2 | vec3>(accessors: Accessor[], elementSize: number): { min: T; max: T } {\n\tconst min: number[] = new Array(elementSize).fill(Infinity);\n\tconst max: number[] = new Array(elementSize).fill(-Infinity);\n\n\tconst tmpMin: number[] = [];\n\tconst tmpMax: number[] = [];\n\n\tfor (const accessor of accessors) {\n\t\taccessor.getMinNormalized(tmpMin);\n\t\taccessor.getMaxNormalized(tmpMax);\n\t\tfor (let i = 0; i < elementSize; i++) {\n\t\t\tmin[i] = Math.min(min[i], tmpMin[i]);\n\t\t\tmax[i] = Math.max(max[i], tmpMax[i]);\n\t\t}\n\t}\n\n\treturn { min, max } as unknown as { min: T; max: T };\n}\n\nfunction expandBounds(bboxes: bbox[]): bbox {\n\tconst result = bboxes[0];\n\tfor (const bbox of bboxes) {\n\t\tmin(result.min, result.min, bbox.min);\n\t\tmax(result.max, result.max, bbox.max);\n\t}\n\treturn result;\n}\n\ninterface VectorTransform<T = vec2 | vec3 | vec4> {\n\toffset: T;\n\tscale: number;\n}\n\nfunction fromTransform(transform: VectorTransform<vec3>): mat4 {\n\treturn fromRotationTranslationScale([] as unknown as mat4, [0, 0, 0, 1], transform.offset, [\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t]) as mat4;\n}\n\nfunction clamp(value: number, range: vec2): number {\n\treturn Math.min(Math.max(value, range[0]), range[1]);\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { EXTMeshoptCompression } from '@gltf-transform/extensions';\nimport type { MeshoptEncoder } from 'meshoptimizer';\nimport { reorder } from './reorder.js';\nimport { QUANTIZE_DEFAULTS, QuantizeOptions, quantize } from './quantize.js';\nimport { createTransform } from './utils.js';\n\nexport interface MeshoptOptions extends Omit<QuantizeOptions, 'pattern' | 'patternTargets'> {\n\tencoder: unknown;\n\tlevel?: 'medium' | 'high';\n}\n\nexport const MESHOPT_DEFAULTS: Required<Omit<MeshoptOptions, 'encoder'>> = {\n\tlevel: 'high',\n\t...QUANTIZE_DEFAULTS,\n};\n\nconst NAME = 'meshopt';\n\n/**\n * Applies Meshopt compression using {@link EXTMeshoptCompression EXT_meshopt_compression}.\n * This type of compression can reduce the size of point, line, and triangle geometry,\n * morph targets, and animation data.\n *\n * This function is a thin wrapper around {@link reorder}, {@link quantize}, and\n * {@link EXTMeshoptCompression}, and exposes relatively few configuration options.\n * To access more options (like quantization bits) direct use of the underlying\n * functions is recommended.\n *\n * Example:\n *\n * ```javascript\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await MeshoptEncoder.ready;\n *\n * await document.transform(\n *   reorder({encoder: MeshoptEncoder, level: 'medium'})\n * );\n * ```\n *\n * @category Transforms\n */\nexport function meshopt(_options: MeshoptOptions): Transform {\n\tconst options = { ...MESHOPT_DEFAULTS, ..._options } as Required<MeshoptOptions>;\n\tconst encoder = options.encoder as typeof MeshoptEncoder | undefined;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${NAME}: encoder dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tlet pattern: RegExp;\n\t\tlet patternTargets: RegExp;\n\t\tlet quantizeNormal = options.quantizeNormal;\n\n\t\t// IMPORTANT: Vertex attributes should be quantized in 'high' mode IFF they are\n\t\t// _not_ filtered in 'packages/extensions/src/ext-meshopt-compression/encoder.ts'.\n\t\t// Note that normals and tangents use octahedral filters, but _morph_ normals\n\t\t// and tangents do not.\n\t\t// See: https://github.com/donmccurdy/glTF-Transform/issues/1142\n\t\tif (options.level === 'medium') {\n\t\t\tpattern = /.*/;\n\t\t\tpatternTargets = /.*/;\n\t\t} else {\n\t\t\tpattern = /^(POSITION|TEXCOORD|JOINTS|WEIGHTS)(_\\d+)?$/;\n\t\t\tpatternTargets = /^(POSITION|TEXCOORD|JOINTS|WEIGHTS|NORMAL|TANGENT)(_\\d+)?$/;\n\t\t\tquantizeNormal = Math.min(quantizeNormal, 8); // See meshopt::getMeshoptFilter.\n\t\t}\n\n\t\tawait document.transform(\n\t\t\treorder({\n\t\t\t\tencoder: encoder,\n\t\t\t\ttarget: 'size',\n\t\t\t}),\n\t\t\tquantize({\n\t\t\t\t...options,\n\t\t\t\tpattern,\n\t\t\t\tpatternTargets,\n\t\t\t\tquantizeNormal,\n\t\t\t}),\n\t\t);\n\n\t\tdocument\n\t\t\t.createExtension(EXTMeshoptCompression)\n\t\t\t.setRequired(true)\n\t\t\t.setEncoderOptions({\n\t\t\t\tmethod:\n\t\t\t\t\toptions.level === 'medium'\n\t\t\t\t\t\t? EXTMeshoptCompression.EncoderMethod.QUANTIZE\n\t\t\t\t\t\t: EXTMeshoptCompression.EncoderMethod.FILTER,\n\t\t\t});\n\t});\n}\n","import type { Document, Texture, Transform } from '@gltf-transform/core';\nimport {\n\tKHRMaterialsIOR,\n\tKHRMaterialsPBRSpecularGlossiness,\n\tKHRMaterialsSpecular,\n\tPBRSpecularGlossiness,\n} from '@gltf-transform/extensions';\nimport { createTransform, rewriteTexture } from './utils.js';\n\nconst NAME = 'metalRough';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MetalRoughOptions {}\n\nconst METALROUGH_DEFAULTS: Required<MetalRoughOptions> = {};\n\n/**\n * Convert {@link Material}s from spec/gloss PBR workflow to metal/rough PBR workflow,\n * removing `KHR_materials_pbrSpecularGlossiness` and adding `KHR_materials_ior` and\n * `KHR_materials_specular`. The metal/rough PBR workflow is preferred for most use cases,\n * and is a prerequisite for other advanced PBR extensions provided by glTF.\n *\n * No options are currently implemented for this function.\n *\n * @category Transforms\n */\nexport function metalRough(_options: MetalRoughOptions = METALROUGH_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...METALROUGH_DEFAULTS, ..._options } as Required<MetalRoughOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tconst extensionsUsed = doc\n\t\t\t.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.map((ext) => ext.extensionName);\n\t\tif (!extensionsUsed.includes('KHR_materials_pbrSpecularGlossiness')) {\n\t\t\tlogger.warn(`${NAME}: KHR_materials_pbrSpecularGlossiness not found on document.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst iorExtension = doc.createExtension(KHRMaterialsIOR);\n\t\tconst specExtension = doc.createExtension(KHRMaterialsSpecular);\n\t\tconst specGlossExtension = doc.createExtension(KHRMaterialsPBRSpecularGlossiness);\n\n\t\tconst inputTextures = new Set<Texture | null>();\n\n\t\tfor (const material of doc.getRoot().listMaterials()) {\n\t\t\tconst specGloss = material.getExtension<PBRSpecularGlossiness>('KHR_materials_pbrSpecularGlossiness');\n\t\t\tif (!specGloss) continue;\n\n\t\t\t// Create specular extension.\n\t\t\tconst specular = specExtension\n\t\t\t\t.createSpecular()\n\t\t\t\t.setSpecularFactor(1.0)\n\t\t\t\t.setSpecularColorFactor(specGloss.getSpecularFactor());\n\n\t\t\t// Stash textures that might become unused, to check and clean up later.\n\t\t\tinputTextures.add(specGloss.getSpecularGlossinessTexture());\n\t\t\tinputTextures.add(material.getBaseColorTexture());\n\t\t\tinputTextures.add(material.getMetallicRoughnessTexture());\n\n\t\t\t// Set up a metal/rough PBR material with IOR=Infinity (or 0), metallic=0. This\n\t\t\t// representation is precise and reliable, but perhaps less convenient for artists\n\t\t\t// than deriving a metalness value. Unfortunately we can't do that without imprecise\n\t\t\t// heuristics, and perhaps user tuning.\n\t\t\t// See: https://github.com/KhronosGroup/glTF/pull/1719#issuecomment-674365677\n\t\t\tmaterial\n\t\t\t\t.setBaseColorFactor(specGloss.getDiffuseFactor())\n\t\t\t\t.setMetallicFactor(0)\n\t\t\t\t.setRoughnessFactor(1)\n\t\t\t\t.setExtension('KHR_materials_ior', iorExtension.createIOR().setIOR(1000))\n\t\t\t\t.setExtension('KHR_materials_specular', specular);\n\n\t\t\t// Move diffuse -> baseColor.\n\t\t\tconst diffuseTexture = specGloss.getDiffuseTexture();\n\t\t\tif (diffuseTexture) {\n\t\t\t\tmaterial.setBaseColorTexture(diffuseTexture);\n\t\t\t\tmaterial.getBaseColorTextureInfo()!.copy(specGloss.getDiffuseTextureInfo()!);\n\t\t\t}\n\n\t\t\t// Move specular + gloss -> specular + roughness.\n\t\t\tconst sgTexture = specGloss.getSpecularGlossinessTexture();\n\t\t\tif (sgTexture) {\n\t\t\t\t// specularGlossiness -> specular.\n\t\t\t\tconst sgTextureInfo = specGloss.getSpecularGlossinessTextureInfo()!;\n\t\t\t\tconst specularTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, specularTexture, (pixels, i, j) => {\n\t\t\t\t\tpixels.set(i, j, 3, 255); // Remove glossiness.\n\t\t\t\t});\n\t\t\t\tspecular.setSpecularTexture(specularTexture);\n\t\t\t\tspecular.setSpecularColorTexture(specularTexture);\n\t\t\t\tspecular.getSpecularTextureInfo()!.copy(sgTextureInfo);\n\t\t\t\tspecular.getSpecularColorTextureInfo()!.copy(sgTextureInfo);\n\n\t\t\t\t// specularGlossiness -> roughness.\n\t\t\t\tconst glossinessFactor = specGloss.getGlossinessFactor();\n\t\t\t\tconst metalRoughTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, metalRoughTexture, (pixels, i, j) => {\n\t\t\t\t\t// Invert glossiness.\n\t\t\t\t\tconst roughness = 255 - Math.round(pixels.get(i, j, 3) * glossinessFactor);\n\t\t\t\t\tpixels.set(i, j, 0, 0);\n\t\t\t\t\tpixels.set(i, j, 1, roughness);\n\t\t\t\t\tpixels.set(i, j, 2, 0);\n\t\t\t\t\tpixels.set(i, j, 3, 255);\n\t\t\t\t});\n\t\t\t\tmaterial.setMetallicRoughnessTexture(metalRoughTexture);\n\t\t\t\tmaterial.getMetallicRoughnessTextureInfo()!.copy(sgTextureInfo);\n\t\t\t} else {\n\t\t\t\tspecular.setSpecularColorFactor(specGloss.getSpecularFactor());\n\t\t\t\tmaterial.setRoughnessFactor(1 - specGloss.getGlossinessFactor());\n\t\t\t}\n\n\t\t\t// Remove KHR_materials_pbrSpecularGlossiness from the material.\n\t\t\tmaterial.setExtension('KHR_materials_pbrSpecularGlossiness', null);\n\t\t}\n\n\t\t// Remove KHR_materials_pbrSpecularGlossiness from the document.\n\t\tspecGlossExtension.dispose();\n\n\t\t// Clean up unused textures.\n\t\tfor (const tex of inputTextures) {\n\t\t\tif (tex && tex.listParents().length === 1) tex.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import type { Accessor, Document, ILogger, Transform, TypedArray } from '@gltf-transform/core';\nimport { createTransform, formatDeltaOp } from './utils.js';\n\nconst NAME = 'unweld';\n\n/** Options for the {@link unweld} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UnweldOptions {}\n\nconst UNWELD_DEFAULTS: UnweldOptions = {};\n\n/**\n * De-index {@link Primitive}s, disconnecting any shared vertices. This operation will generally\n * increase the number of vertices in a mesh, but may be helpful for some geometry operations or\n * for creating hard edges.\n *\n * No options are currently implemented for this function.\n *\n * @category Transforms\n */\nexport function unweld(_options: UnweldOptions = UNWELD_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...UNWELD_DEFAULTS, ..._options } as Required<UnweldOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst visited = new Map<Accessor, Map<Accessor, Accessor>>();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst indices = prim.getIndices();\n\t\t\t\tif (!indices) continue;\n\n\t\t\t\tconst srcVertexCount = prim.getAttribute('POSITION')!.getCount();\n\n\t\t\t\t// Vertex attributes.\n\t\t\t\tfor (const srcAttribute of prim.listAttributes()) {\n\t\t\t\t\tprim.swap(srcAttribute, unweldAttribute(srcAttribute, indices, logger, visited));\n\n\t\t\t\t\t// Clean up.\n\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t}\n\n\t\t\t\t// Morph target vertex attributes.\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tfor (const srcAttribute of target.listAttributes()) {\n\t\t\t\t\t\ttarget.swap(srcAttribute, unweldAttribute(srcAttribute, indices, logger, visited));\n\n\t\t\t\t\t\t// Clean up.\n\t\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst dstVertexCount = prim.getAttribute('POSITION')!.getCount();\n\t\t\t\tlogger.debug(`${NAME}: ${formatDeltaOp(srcVertexCount, dstVertexCount)} vertices.`);\n\n\t\t\t\t// Clean up.\n\t\t\t\tprim.setIndices(null);\n\t\t\t\tif (indices.listParents().length === 1) indices.dispose();\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction unweldAttribute(\n\tsrcAttribute: Accessor,\n\tindices: Accessor,\n\tlogger: ILogger,\n\tvisited: Map<Accessor, Map<Accessor, Accessor>>\n): Accessor {\n\tif (visited.has(srcAttribute) && visited.get(srcAttribute)!.has(indices)) {\n\t\tlogger.debug(`${NAME}: Cache hit for reused attribute, \"${srcAttribute.getName()}\".`);\n\t\treturn visited.get(srcAttribute)!.get(indices)!;\n\t}\n\n\tconst dstAttribute = srcAttribute.clone();\n\tconst ArrayCtor = srcAttribute.getArray()!.constructor as new (len: number) => TypedArray;\n\tdstAttribute.setArray(new ArrayCtor(indices.getCount() * srcAttribute.getElementSize()));\n\n\tconst el: number[] = [];\n\tfor (let i = 0; i < indices.getCount(); i++) {\n\t\tdstAttribute.setElement(i, srcAttribute.getElement(indices.getScalar(i), el));\n\t}\n\n\tif (!visited.has(srcAttribute)) visited.set(srcAttribute, new Map());\n\tvisited.get(srcAttribute)!.set(indices, dstAttribute);\n\n\treturn dstAttribute;\n}\n","import type { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { unweld } from './unweld.js';\nimport { createTransform } from './utils.js';\nimport { normalize } from 'gl-matrix/vec3';\n\nconst NAME = 'normals';\n\n/** Options for the {@link normals} function. */\nexport interface NormalsOptions {\n\t/** Whether to overwrite existing `NORMAL` attributes. */\n\toverwrite?: boolean;\n}\n\nconst NORMALS_DEFAULTS: Required<NormalsOptions> = {\n\toverwrite: false,\n};\n\n/**\n * Generates flat vertex normals for mesh primitives.\n *\n * Example:\n *\n * ```ts\n * import { normals } from '@gltf-transform/functions';\n *\n * await document.transform(normals({overwrite: true}));\n * ```\n *\n * @category Transforms\n */\nexport function normals(_options: NormalsOptions = NORMALS_DEFAULTS): Transform {\n\tconst options = { ...NORMALS_DEFAULTS, ..._options } as Required<NormalsOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tlet modified = 0;\n\n\t\tawait document.transform(unweld());\n\n\t\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst position = prim.getAttribute('POSITION')!;\n\t\t\t\tlet normal = prim.getAttribute('NORMAL');\n\n\t\t\t\tif (options.overwrite && normal) {\n\t\t\t\t\tnormal.dispose();\n\t\t\t\t} else if (normal) {\n\t\t\t\t\tlogger.debug(`${NAME}: Skipping primitive: NORMAL found.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tnormal = document\n\t\t\t\t\t.createAccessor()\n\t\t\t\t\t.setArray(new Float32Array(position.getCount() * 3))\n\t\t\t\t\t.setType('VEC3');\n\n\t\t\t\tconst a = [0, 0, 0] as vec3;\n\t\t\t\tconst b = [0, 0, 0] as vec3;\n\t\t\t\tconst c = [0, 0, 0] as vec3;\n\n\t\t\t\tfor (let i = 0; i < position.getCount(); i += 3) {\n\t\t\t\t\tposition.getElement(i + 0, a);\n\t\t\t\t\tposition.getElement(i + 1, b);\n\t\t\t\t\tposition.getElement(i + 2, c);\n\n\t\t\t\t\tconst faceNormal = computeNormal(a, b, c);\n\n\t\t\t\t\tnormal.setElement(i + 0, faceNormal);\n\t\t\t\t\tnormal.setElement(i + 1, faceNormal);\n\t\t\t\t\tnormal.setElement(i + 2, faceNormal);\n\t\t\t\t}\n\n\t\t\t\tprim.setAttribute('NORMAL', normal);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\n// https://stackoverflow.com/a/23709352/1314762\nfunction computeNormal(a: vec3, b: vec3, c: vec3): vec3 {\n\tconst A = [b[0] - a[0], b[1] - a[1], b[2] - a[2]];\n\tconst B = [c[0] - a[0], c[1] - a[1], c[2] - a[2]];\n\tconst n = [\n\t\tA[1] * B[2] - A[2] * B[1], //\n\t\tA[2] * B[0] - A[0] * B[2],\n\t\tA[0] * B[1] - A[1] * B[0],\n\t] as vec3;\n\treturn normalize([0, 0, 0], n) as vec3;\n}\n","import {\n\tColorUtils,\n\tDocument,\n\tMaterial,\n\tPrimitive,\n\tPropertyType,\n\tTexture,\n\tTextureInfo,\n\tTransform,\n\tvec4,\n} from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\nimport { prune } from './prune.js';\nimport ndarray, { NdArray, TypedArray } from 'ndarray';\nimport { savePixels } from 'ndarray-pixels';\n\nconst NAME = 'palette';\n\ntype TexturableProp = 'baseColor' | 'emissive' | 'metallicRoughness';\n\nexport interface PaletteOptions {\n\t/** Size (in pixels) of a single block within each palette texture. Default: 4. */\n\tblockSize?: number;\n\t/**\n\t * Minimum number of blocks in the palette texture. If fewer unique\n\t * material values are found, no palettes will be generated. Default: 2.\n\t */\n\tmin?: number;\n}\n\nexport const PALETTE_DEFAULTS: Required<PaletteOptions> = {\n\tblockSize: 4,\n\tmin: 2,\n};\n\n/**\n * Creates palette textures containing all unique values of scalar\n * {@link Material} properties within the scene, then merges materials. For\n * scenes with many solid-colored materials (often found in CAD, architectural,\n * or low-poly styles), texture palettes can reduce the number of materials\n * used, and significantly increase the number of {@link Mesh} objects eligible\n * for {@link join} operations.\n *\n * Materials already containing texture coordinates (UVs) are not eligible for\n * texture palette optimizations. Currently only a material's base color,\n * alpha, emissive factor, metallic factor, and roughness factor are converted\n * to palette textures.\n *\n * Example:\n *\n * ```typescript\n * import { palette, flatten, dequantize, join } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tpalette({ min: 5 }),\n * \tflatten(),\n * \tdequantize(),\n * \tjoin()\n * );\n * ```\n *\n * The illustration below shows a typical base color palette texture:\n *\n * <img\n * \tsrc=\"/media/functions/palette.png\"\n * \talt=\"Row of colored blocks\"\n * \tstyle=\"width: 100%; max-width: 320px; image-rendering: pixelated;\">\n *\n * @category Transforms\n */\nexport function palette(_options: PaletteOptions = PALETTE_DEFAULTS): Transform {\n\tconst options = { ...PALETTE_DEFAULTS, ..._options } as Required<PaletteOptions>;\n\tconst blockSize = Math.max(options.blockSize, 1);\n\tconst min = Math.max(options.min, 1);\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tconst root = document.getRoot();\n\n\t\t// Find and remove unused TEXCOORD_n attributes.\n\t\tawait document.transform(\n\t\t\tprune({\n\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR],\n\t\t\t\tkeepAttributes: false,\n\t\t\t\tkeepIndices: true,\n\t\t\t\tkeepLeaves: true,\n\t\t\t}),\n\t\t);\n\n\t\tconst prims = new Set<Primitive>();\n\t\tconst materials = new Set<Material>();\n\n\t\t// (1) Gather list of eligible prims and materials.\n\n\t\tfor (const mesh of root.listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst material = prim.getMaterial();\n\t\t\t\tif (!material || !!prim.getAttribute('TEXCOORD_0')) continue;\n\n\t\t\t\tprims.add(prim);\n\t\t\t\tmaterials.add(material);\n\t\t\t}\n\t\t}\n\n\t\t// (2) Gather list of distinct material properties.\n\n\t\tconst materialKeys = new Set<string>();\n\t\tconst materialKeyMap = new Map<Material, string>();\n\t\tconst materialProps: Record<TexturableProp, Set<string>> = {\n\t\t\tbaseColor: new Set<string>(),\n\t\t\temissive: new Set<string>(),\n\t\t\tmetallicRoughness: new Set<string>(),\n\t\t};\n\n\t\tfor (const material of materials) {\n\t\t\tconst baseColor = encodeRGBA(material.getBaseColorFactor().slice() as vec4);\n\t\t\tconst emissive = encodeRGBA([...material.getEmissiveFactor(), 1]);\n\t\t\tconst roughness = encodeFloat(material.getRoughnessFactor());\n\t\t\tconst metallic = encodeFloat(material.getMetallicFactor());\n\t\t\tconst key = `baseColor:${baseColor},emissive:${emissive},metallicRoughness:${metallic}${roughness}`;\n\t\t\tmaterialProps.baseColor.add(baseColor);\n\t\t\tmaterialProps.emissive.add(emissive);\n\t\t\tmaterialProps.metallicRoughness.add(metallic + '+' + roughness);\n\t\t\tmaterialKeys.add(key);\n\t\t\tmaterialKeyMap.set(material, key);\n\t\t}\n\n\t\t// logger.debug(`${NAME}:\\n${Array.from(materialKeys.values()).join('\\n')}`);\n\n\t\tconst keyCount = materialKeys.size;\n\t\tif (keyCount < min) {\n\t\t\tlogger.debug(`${NAME}: Found <${min} unique material properties. Exiting.`);\n\t\t\treturn;\n\t\t}\n\n\t\t// (3) Allocate palette textures.\n\n\t\tconst w = ceilPowerOfTwo(keyCount * blockSize);\n\t\tconst h = ceilPowerOfTwo(blockSize);\n\t\tconst padWidth = w - keyCount * blockSize;\n\n\t\tconst paletteTexturePixels: Record<TexturableProp, NdArray<Uint8Array> | null> = {\n\t\t\tbaseColor: null,\n\t\t\temissive: null,\n\t\t\tmetallicRoughness: null,\n\t\t};\n\n\t\t// Properties skipped for material equality comparisons.\n\t\tconst skipProps = new Set(['name', 'extras']);\n\t\tconst skip = (...props: string[]) => props.forEach((prop) => skipProps.add(prop));\n\n\t\tlet baseColorTexture: Texture | null = null;\n\t\tlet emissiveTexture: Texture | null = null;\n\t\tlet metallicRoughnessTexture: Texture | null = null;\n\n\t\tif (materialProps.baseColor.size >= min) {\n\t\t\tconst name = 'PaletteBaseColor';\n\t\t\tbaseColorTexture = document.createTexture(name).setURI(`${name}.png`);\n\t\t\tpaletteTexturePixels.baseColor = ndarray(new Uint8Array(w * h * 4), [w, h, 4]);\n\t\t\tskip('baseColorFactor', 'baseColorTexture', 'baseColorTextureInfo');\n\t\t}\n\t\tif (materialProps.emissive.size >= min) {\n\t\t\tconst name = 'PaletteEmissive';\n\t\t\temissiveTexture = document.createTexture(name).setURI(`${name}.png`);\n\t\t\tpaletteTexturePixels.emissive = ndarray(new Uint8Array(w * h * 4), [w, h, 4]);\n\t\t\tskip('emissiveFactor', 'emissiveTexture', 'emissiveTextureInfo');\n\t\t}\n\t\tif (materialProps.metallicRoughness.size >= min) {\n\t\t\tconst name = 'PaletteMetallicRoughness';\n\t\t\tmetallicRoughnessTexture = document.createTexture(name).setURI(`${name}.png`);\n\t\t\tpaletteTexturePixels.metallicRoughness = ndarray(new Uint8Array(w * h * 4), [w, h, 4]);\n\t\t\tskip('metallicFactor', 'roughnessFactor', 'metallicRoughnessTexture', 'metallicRoughnessTextureInfo');\n\t\t}\n\n\t\tif (!(baseColorTexture || emissiveTexture || metallicRoughnessTexture)) {\n\t\t\tlogger.debug(`${NAME}: No material property has >=${min} unique values. Exiting.`);\n\t\t\treturn;\n\t\t}\n\n\t\t// (4) Write blocks to palette textures.\n\n\t\tconst visitedKeys = new Set<string>();\n\t\tconst materialIndices = new Map<string, number>();\n\t\tconst paletteMaterials: Material[] = [];\n\n\t\tlet nextIndex = 0;\n\t\tfor (const material of materials) {\n\t\t\tconst key = materialKeyMap.get(material)!;\n\t\t\tif (visitedKeys.has(key)) continue;\n\n\t\t\tconst index = nextIndex++;\n\n\t\t\tif (paletteTexturePixels.baseColor) {\n\t\t\t\tconst pixels = paletteTexturePixels.baseColor;\n\t\t\t\tconst baseColor = [...material.getBaseColorFactor()] as vec4;\n\t\t\t\tColorUtils.convertLinearToSRGB(baseColor, baseColor);\n\t\t\t\twriteBlock(pixels, index, baseColor, blockSize);\n\t\t\t}\n\t\t\tif (paletteTexturePixels.emissive) {\n\t\t\t\tconst pixels = paletteTexturePixels.emissive;\n\t\t\t\tconst emissive = [...material.getEmissiveFactor(), 1] as vec4;\n\t\t\t\tColorUtils.convertLinearToSRGB(emissive, emissive);\n\t\t\t\twriteBlock(pixels, index, emissive, blockSize);\n\t\t\t}\n\t\t\tif (paletteTexturePixels.metallicRoughness) {\n\t\t\t\tconst pixels = paletteTexturePixels.metallicRoughness;\n\t\t\t\tconst metallic = material.getMetallicFactor();\n\t\t\t\tconst roughness = material.getRoughnessFactor();\n\t\t\t\twriteBlock(pixels, index, [0, roughness, metallic, 1], blockSize);\n\t\t\t}\n\n\t\t\tvisitedKeys.add(key);\n\t\t\tmaterialIndices.set(key, index);\n\t\t}\n\n\t\t// (5) Compress palette textures and assign to palette materials.\n\n\t\tconst mimeType = 'image/png';\n\n\t\tif (baseColorTexture) {\n\t\t\tconst image = await savePixels(paletteTexturePixels.baseColor!, mimeType);\n\t\t\tbaseColorTexture.setImage(image).setMimeType(mimeType);\n\t\t}\n\t\tif (emissiveTexture) {\n\t\t\tconst image = await savePixels(paletteTexturePixels.emissive!, mimeType);\n\t\t\temissiveTexture.setImage(image).setMimeType(mimeType);\n\t\t}\n\t\tif (metallicRoughnessTexture) {\n\t\t\tconst image = await savePixels(paletteTexturePixels.metallicRoughness!, mimeType);\n\t\t\tmetallicRoughnessTexture.setImage(image).setMimeType(mimeType);\n\t\t}\n\n\t\t// (6) Create palette materials, generate UVs, and assign both to prims.\n\n\t\tlet nextPaletteMaterialIndex = 1;\n\t\tfor (const prim of prims) {\n\t\t\tconst srcMaterial = prim.getMaterial()!;\n\t\t\tconst key = materialKeyMap.get(srcMaterial)!;\n\t\t\tconst blockIndex = materialIndices.get(key)!;\n\n\t\t\t// UVs are centered horizontally in each block, descending vertically\n\t\t\t// to form a diagonal line in the UV layout. Easy and compressible.\n\t\t\tconst baseUV = (blockIndex + 0.5) / keyCount;\n\t\t\tconst padUV = (baseUV * (w - padWidth)) / w;\n\n\t\t\tconst position = prim.getAttribute('POSITION')!;\n\t\t\tconst buffer = position.getBuffer();\n\t\t\tconst array = new Float32Array(position.getCount() * 2).fill(padUV);\n\t\t\tconst uv = document.createAccessor().setType('VEC2').setArray(array).setBuffer(buffer);\n\n\t\t\tlet dstMaterial;\n\t\t\tfor (const material of paletteMaterials) {\n\t\t\t\tif (material.equals(srcMaterial, skipProps)) {\n\t\t\t\t\tdstMaterial = material;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!dstMaterial) {\n\t\t\t\tconst suffix = (nextPaletteMaterialIndex++).toString().padStart(3, '0');\n\t\t\t\tdstMaterial = srcMaterial.clone().setName(`PaletteMaterial${suffix}`);\n\n\t\t\t\tif (baseColorTexture) {\n\t\t\t\t\tdstMaterial\n\t\t\t\t\t\t.setBaseColorFactor([1, 1, 1, 1])\n\t\t\t\t\t\t.setBaseColorTexture(baseColorTexture)\n\t\t\t\t\t\t.getBaseColorTextureInfo()!\n\t\t\t\t\t\t.setMinFilter(TextureInfo.MinFilter.NEAREST)\n\t\t\t\t\t\t.setMagFilter(TextureInfo.MagFilter.NEAREST);\n\t\t\t\t}\n\t\t\t\tif (emissiveTexture) {\n\t\t\t\t\tdstMaterial\n\t\t\t\t\t\t.setEmissiveFactor([1, 1, 1])\n\t\t\t\t\t\t.setEmissiveTexture(emissiveTexture)\n\t\t\t\t\t\t.getEmissiveTextureInfo()!\n\t\t\t\t\t\t.setMinFilter(TextureInfo.MinFilter.NEAREST)\n\t\t\t\t\t\t.setMagFilter(TextureInfo.MagFilter.NEAREST);\n\t\t\t\t}\n\t\t\t\tif (metallicRoughnessTexture) {\n\t\t\t\t\tdstMaterial\n\t\t\t\t\t\t.setMetallicFactor(1)\n\t\t\t\t\t\t.setRoughnessFactor(1)\n\t\t\t\t\t\t.setMetallicRoughnessTexture(metallicRoughnessTexture)\n\t\t\t\t\t\t.getMetallicRoughnessTextureInfo()!\n\t\t\t\t\t\t.setMinFilter(TextureInfo.MinFilter.NEAREST)\n\t\t\t\t\t\t.setMagFilter(TextureInfo.MagFilter.NEAREST);\n\t\t\t\t}\n\n\t\t\t\tpaletteMaterials.push(dstMaterial);\n\t\t\t}\n\n\t\t\tprim.setMaterial(dstMaterial).setAttribute('TEXCOORD_0', uv);\n\t\t}\n\n\t\tawait document.transform(prune({ propertyTypes: [PropertyType.MATERIAL] }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/** Encodes a floating-point value on the interval [0,1] at 8-bit precision. */\nfunction encodeFloat(value: number): string {\n\tconst hex = Math.round(value * 255).toString(16);\n\treturn hex.length === 1 ? '0' + hex : hex;\n}\n\n/** Encodes an RGBA color in Linear-sRGB-D65 color space. */\nfunction encodeRGBA(value: vec4): string {\n\tColorUtils.convertLinearToSRGB(value, value);\n\treturn value.map(encodeFloat).join('');\n}\n\n/** Returns the nearest higher power of two. */\nfunction ceilPowerOfTwo(value: number): number {\n\treturn Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n}\n\n/** Writes an NxN block of pixels to an image, at the given block index. */\nfunction writeBlock(pixels: NdArray<TypedArray>, index: number, value: vec4, blockSize: number): void {\n\tfor (let i = 0; i < blockSize; i++) {\n\t\tfor (let j = 0; j < blockSize; j++) {\n\t\t\tpixels.set(index * blockSize + i, j, 0, value[0] * 255);\n\t\t\tpixels.set(index * blockSize + i, j, 1, value[1] * 255);\n\t\t\tpixels.set(index * blockSize + i, j, 2, value[2] * 255);\n\t\t\tpixels.set(index * blockSize + i, j, 3, value[3] * 255);\n\t\t}\n\t}\n}\n","import { Document, ILogger, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune.js';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'partition';\n\nexport interface PartitionOptions {\n\tanimations?: boolean | Array<string>;\n\tmeshes?: boolean | Array<string>;\n}\n\nconst PARTITION_DEFAULTS: Required<PartitionOptions> = {\n\tanimations: true,\n\tmeshes: true,\n};\n\n/**\n * Partitions the binary payload of a glTF file so separate mesh or animation data is in separate\n * `.bin` {@link Buffer}s. This technique may be useful for engines that support lazy-loading\n * specific binary resources as needed over the application lifecycle.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer]\n *\n * await document.transform(partition({meshes: true}));\n *\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n * ```\n *\n * @category Transforms\n */\nexport function partition(_options: PartitionOptions = PARTITION_DEFAULTS): Transform {\n\tconst options = { ...PARTITION_DEFAULTS, ..._options } as Required<PartitionOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (options.meshes !== false) partitionMeshes(doc, logger, options);\n\t\tif (options.animations !== false) partitionAnimations(doc, logger, options);\n\n\t\tif (!options.meshes && !options.animations) {\n\t\t\tlogger.warn(`${NAME}: Select animations or meshes to create a partition.`);\n\t\t}\n\n\t\tawait doc.transform(prune({ propertyTypes: [PropertyType.BUFFER] }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction partitionMeshes(doc: Document, logger: ILogger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(\n\t\tdoc\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.map((b) => b.getURI())\n\t);\n\n\tdoc.getRoot()\n\t\t.listMeshes()\n\t\t.forEach((mesh, meshIndex) => {\n\t\t\tif (Array.isArray(options.meshes) && !options.meshes.includes(mesh.getName())) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping mesh #${meshIndex} with name \"${mesh.getName()}\".`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for mesh \"${mesh.getName()}\".`);\n\n\t\t\tconst buffer = doc\n\t\t\t\t.createBuffer(mesh.getName())\n\t\t\t\t.setURI(createBufferURI(mesh.getName() || 'mesh', existingURIs));\n\n\t\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\t\tconst indices = primitive.getIndices();\n\t\t\t\tif (indices) indices.setBuffer(buffer);\n\t\t\t\tprimitive.listAttributes().forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\tprimitive.listTargets().forEach((primTarget) => {\n\t\t\t\t\tprimTarget.listAttributes().forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\t});\n\t\t\t});\n\t\t});\n}\n\nfunction partitionAnimations(doc: Document, logger: ILogger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(\n\t\tdoc\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.map((b) => b.getURI())\n\t);\n\n\tdoc.getRoot()\n\t\t.listAnimations()\n\t\t.forEach((anim, animIndex) => {\n\t\t\tif (Array.isArray(options.animations) && !options.animations.includes(anim.getName())) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping animation #${animIndex} with name \"${anim.getName()}\".`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for animation \"${anim.getName()}\".`);\n\n\t\t\tconst buffer = doc\n\t\t\t\t.createBuffer(anim.getName())\n\t\t\t\t.setURI(createBufferURI(anim.getName() || 'animation', existingURIs));\n\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\tif (input) input.setBuffer(buffer);\n\t\t\t\tif (output) output.setBuffer(buffer);\n\t\t\t});\n\t\t});\n}\n\nfunction createBufferURI(basename: string, existing: Set<string>): string {\n\tlet uri = `${basename}.bin`;\n\tlet i = 1;\n\twhile (existing.has(uri)) uri = `${basename}_${i++}.bin`;\n\treturn uri;\n}\n","var InterpolationInternal;\n\n(function (InterpolationInternal) {\n  InterpolationInternal[InterpolationInternal[\"STEP\"] = 0] = \"STEP\";\n  InterpolationInternal[InterpolationInternal[\"LERP\"] = 1] = \"LERP\";\n  InterpolationInternal[InterpolationInternal[\"SLERP\"] = 2] = \"SLERP\";\n})(InterpolationInternal || (InterpolationInternal = {}));\n\nconst TO_INTERPOLATION_INTERNAL = {\n  step: InterpolationInternal.STEP,\n  lerp: InterpolationInternal.LERP,\n  slerp: InterpolationInternal.SLERP\n};\nconst EPSILON = 0.000001;\n\n/* Implementation */\n\nfunction resampleDebug(input, output, interpolation, tolerance = 1e-4) {\n  const elementSize = output.length / input.length;\n  const tmp = new Array(elementSize).fill(0);\n  const value = new Array(elementSize).fill(0);\n  const valueNext = new Array(elementSize).fill(0);\n  const valuePrev = new Array(elementSize).fill(0);\n  const lastIndex = input.length - 1;\n  let writeIndex = 1;\n\n  for (let i = 1; i < lastIndex; ++i) {\n    const timePrev = input[writeIndex - 1];\n    const time = input[i];\n    const timeNext = input[i + 1];\n    const t = (time - timePrev) / (timeNext - timePrev);\n    let keep = false; // Remove unnecessary adjacent keyframes.\n\n    if (time !== timeNext && (i !== 1 || time !== input[0])) {\n      getElement(output, writeIndex - 1, valuePrev);\n      getElement(output, i, value);\n      getElement(output, i + 1, valueNext);\n\n      if (interpolation === 'slerp') {\n        // Prune keyframes colinear with prev/next keyframes.\n        const sample = slerp(tmp, valuePrev, valueNext, t);\n        const angle = getAngle(valuePrev, value) + getAngle(value, valueNext);\n        keep = !eq(value, sample, tolerance) || angle + Number.EPSILON >= Math.PI;\n      } else if (interpolation === 'lerp') {\n        // Prune keyframes colinear with prev/next keyframes.\n        const sample = vlerp(tmp, valuePrev, valueNext, t);\n        keep = !eq(value, sample, tolerance);\n      } else if (interpolation === 'step') {\n        // Prune keyframes identical to prev/next keyframes.\n        keep = !eq(value, valuePrev) || !eq(value, valueNext);\n      }\n    } // In-place compaction.\n\n\n    if (keep) {\n      if (i !== writeIndex) {\n        input[writeIndex] = input[i];\n        setElement(output, writeIndex, getElement(output, i, tmp));\n      }\n\n      writeIndex++;\n    }\n  } // Flush last keyframe (compaction looks ahead).\n\n\n  if (lastIndex > 0) {\n    input[writeIndex] = input[lastIndex];\n    setElement(output, writeIndex, getElement(output, lastIndex, tmp));\n    writeIndex++;\n  }\n\n  return writeIndex;\n}\n/* Utilities */\n\nfunction getElement(array, index, target) {\n  for (let i = 0, elementSize = target.length; i < elementSize; i++) {\n    target[i] = array[index * elementSize + i];\n  }\n\n  return target;\n}\n\nfunction setElement(array, index, value) {\n  for (let i = 0, elementSize = value.length; i < elementSize; i++) {\n    array[index * elementSize + i] = value[i];\n  }\n}\n\nfunction eq(a, b, tolerance = 0) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (Math.abs(a[i] - b[i]) > tolerance) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction lerp(v0, v1, t) {\n  return v0 * (1 - t) + v1 * t;\n}\n\nfunction vlerp(out, a, b, t) {\n  for (let i = 0; i < a.length; i++) out[i] = lerp(a[i], b[i], t);\n\n  return out;\n} // From gl-matrix.\n\n\nfunction slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  let bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  let omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n\nfunction getAngle(a, b) {\n  const dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/** WASM loader for Web environments. */\nconst wasm = /* #__PURE__ */fetch( /* #__PURE__ */new URL('./release.wasm', import.meta.url));\n\n// SETUP\n///////////////////////////////////////////////////////////////////////////////\n\nlet exports;\nconst ready = /* #__PURE__ */new Promise(async (resolve, reject) => {\n  try {\n    const module = await WebAssembly.compile(await wasm);\n    exports = await instantiate(module, {});\n    resolve();\n  } catch (e) {\n    reject(e);\n  }\n});\n\nasync function instantiate(module, imports = {}) {\n  const instance = await WebAssembly.instantiate(module, {\n    env: Object.assign(Object.create(globalThis), {}, {\n      abort: __abort\n    })\n  });\n  return instance.exports;\n} ///////////////////////////////////////////////////////////////////////////////\n// PUBLIC API\n///////////////////////////////////////////////////////////////////////////////\n\n\nconst CHUNK_SIZE = 1024; // The first and last keyframes cannot be removed in any given step, but we need to\n// somehow remove keyframes on chunk boundaries. So after processing each chunk,\n// we copy its last two keyframes in front of the next chunk, and run from there.\n//\n// 🟩 ⬜️ ⬜️ ⬜️ ⬜️ ⬜️                  // chunk 1, original\n// 🟩 ⬜️ 🟨 🟥                       // chunk 1, resampled\n//            🟨 🟥 🟩 ⬜️ ⬜️ ⬜️       // chunk 2, original\n//            🟨 🟩 ⬜️ ⬜️            // chunk 2, resampled\n// ...\n\nfunction resample(input, output, interpolation, tolerance = 1e-4) {\n  __assert(!!exports, 'Await \"ready\" before using module.');\n\n  __assert(input instanceof Float32Array, 'Missing Float32Array input.');\n\n  __assert(output instanceof Float32Array, 'Missing Float32Array output.');\n\n  const outputSize = output.length / input.length;\n\n  __assert(Number.isInteger(outputSize), 'Invalid input/output counts.');\n\n  __assert(interpolation in TO_INTERPOLATION_INTERNAL, 'Invalid interpolation.');\n\n  __assert(Number.isFinite(tolerance), 'Invalid tolerance');\n\n  const interpVal = TO_INTERPOLATION_INTERNAL[interpolation];\n  const srcCount = input.length;\n  let dstCount = 0;\n\n  for (let chunkStart = 0; chunkStart < input.length; chunkStart += CHUNK_SIZE) {\n    const chunkCount = Math.min(srcCount - chunkStart, CHUNK_SIZE); // Allocate a two-keyframe prefix for all chunks after the first.\n\n    const prefixCount = chunkStart > 0 ? 2 : 0;\n    const chunkInput = new Float32Array(input.buffer, input.byteOffset + (chunkStart - prefixCount) * Float32Array.BYTES_PER_ELEMENT, chunkCount + prefixCount);\n    const chunkOutput = new Float32Array(output.buffer, output.byteOffset + (chunkStart - prefixCount) * outputSize * Float32Array.BYTES_PER_ELEMENT, (chunkCount + prefixCount) * outputSize); // Copy prefix to start of next chunk.\n\n    if (prefixCount > 0) {\n      input.copyWithin(chunkStart - prefixCount, dstCount - prefixCount, dstCount);\n      output.copyWithin((chunkStart - prefixCount) * outputSize, (dstCount - prefixCount) * outputSize, dstCount * outputSize);\n    }\n\n    const inputPtr = __retain(__lowerStaticArray(chunkInput, 4, 2));\n\n    const outputPtr = __retain(__lowerStaticArray(chunkOutput, 4, 2));\n\n    try {\n      exports.__setArgumentsLength(4);\n\n      const count = exports.resample(inputPtr, outputPtr, interpVal, tolerance) >>> 0;\n      dstCount -= prefixCount;\n\n      __liftStaticArray(inputPtr, input, dstCount, count);\n\n      __liftStaticArray(outputPtr, output, dstCount * outputSize, count * outputSize);\n\n      dstCount += count;\n    } finally {\n      __release(inputPtr);\n\n      __release(outputPtr);\n\n      exports.__collect();\n    }\n  } // console.log(`Memory: ${exports.memory.buffer.byteLength} bytes`);\n\n\n  return dstCount;\n} ///////////////////////////////////////////////////////////////////////////////\n// INTERNAL\n///////////////////////////////////////////////////////////////////////////////\n\nfunction __assert(cond, msg) {\n  if (!cond) throw new Error(msg);\n}\n\nfunction __retain(ptr) {\n  exports.__pin(ptr);\n\n  return ptr;\n}\n\nfunction __release(ptr) {\n  exports.__unpin(ptr);\n\n  return ptr;\n}\n\nfunction __liftString(ptr) {\n  if (!ptr) return null;\n  const end = ptr + new Uint32Array(exports.memory.buffer)[ptr - 4 >>> 2] >>> 1,\n        memoryU16 = new Uint16Array(exports.memory.buffer);\n  let start = ptr >>> 1,\n      string = '';\n\n  while (end - start > 1024) string += String.fromCharCode(...memoryU16.subarray(start, start += 1024));\n\n  return string + String.fromCharCode(...memoryU16.subarray(start, end));\n}\n\nfunction __lowerStaticArray(values, id, align) {\n  const ptr = exports.__pin(exports.__new(values.length << align, id)) >>> 0;\n  new Float32Array(exports.memory.buffer, ptr, values.length).set(values);\n\n  exports.__unpin(ptr);\n\n  return ptr;\n}\n\nfunction __liftStaticArray(ptr, values, offset, count) {\n  values.set(new Float32Array(exports.memory.buffer, ptr, count), offset);\n}\n\nfunction __abort(messagePtr, fileNamePtr, lineNumber, columnNumber) {\n  const message = __liftString(messagePtr >>> 0);\n\n  const fileName = __liftString(fileNamePtr >>> 0);\n\n  lineNumber = lineNumber >>> 0;\n  columnNumber = columnNumber >>> 0;\n\n  (() => {\n    throw Error(`${message} in ${fileName}:${lineNumber}:${columnNumber}`);\n  })();\n}\n\nexport { ready, resample, resampleDebug };\n//# sourceMappingURL=keyframe-resample-browser.modern.js.map\n","import {\n\tAccessor,\n\tAnimationSampler,\n\tComponentTypeToTypedArray,\n\tDocument,\n\tGLTF,\n\tMathUtils,\n\tPropertyType,\n\tRoot,\n\tTransform,\n\tTransformContext,\n\tTypedArray,\n} from '@gltf-transform/core';\nimport { dedup } from './dedup.js';\nimport { createTransform, isTransformPending } from './utils.js';\nimport { resampleDebug } from 'keyframe-resample';\n\nconst NAME = 'resample';\n\nconst EMPTY_ARRAY = new Float32Array(0);\n\nexport interface ResampleOptions {\n\tready?: Promise<void>;\n\tresample?: unknown; // glTF-Transform/issues/996\n\ttolerance?: number;\n}\n\nconst RESAMPLE_DEFAULTS: Required<ResampleOptions> = {\n\tready: Promise.resolve(),\n\tresample: resampleDebug,\n\ttolerance: 1e-4,\n};\n\n/**\n * Resample {@link AnimationChannel AnimationChannels}, losslessly deduplicating keyframes to\n * reduce file size. Duplicate keyframes are commonly present in animation 'baked' by the\n * authoring software to apply IK constraints or other software-specific features.\n *\n * Optionally, a WebAssembly implementation from the\n * [`keyframe-resample`](https://github.com/donmccurdy/keyframe-resample-wasm) library may be\n * provided. The WebAssembly version is usually much faster at processing large animation\n * sequences, but may not be compatible with all runtimes and JavaScript build tools.\n *\n * Result: (0,0,0,0,1,1,1,0,0,0,0,0,0,0) → (0,0,1,1,0,0)\n *\n * Example:\n *\n * ```\n * import { resample } from '@gltf-transform/functions';\n * import { ready, resample as resampleWASM } from 'keyframe-resample';\n *\n * // JavaScript (slower)\n * await document.transform(resample());\n *\n * // WebAssembly (faster)\n * await document.transform(resample({ ready, resample: resampleWASM }));\n * ```\n *\n * @privateRemarks Implementation based on THREE.KeyframeTrack#optimize().\n * @category Transforms\n */\nexport function resample(_options: ResampleOptions = RESAMPLE_DEFAULTS): Transform {\n\tconst options = { ...RESAMPLE_DEFAULTS, ..._options } as Required<ResampleOptions>;\n\n\treturn createTransform(NAME, async (document: Document, context?: TransformContext): Promise<void> => {\n\t\tconst accessorsVisited = new Set<Accessor>();\n\t\tconst srcAccessorCount = document.getRoot().listAccessors().length;\n\t\tconst logger = document.getLogger();\n\n\t\tconst ready = options.ready;\n\t\tconst resample = options.resample as typeof resampleDebug;\n\n\t\tawait ready;\n\n\t\tfor (const animation of document.getRoot().listAnimations()) {\n\t\t\tconst samplerTargetPaths = new Map<AnimationSampler, GLTF.AnimationChannelTargetPath>();\n\t\t\tfor (const channel of animation.listChannels()) {\n\t\t\t\tsamplerTargetPaths.set(channel.getSampler()!, channel.getTargetPath()!);\n\t\t\t}\n\n\t\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\t\tconst samplerInterpolation = sampler.getInterpolation();\n\n\t\t\t\tif (samplerInterpolation === 'STEP' || samplerInterpolation === 'LINEAR') {\n\t\t\t\t\tconst input = sampler.getInput()!;\n\t\t\t\t\tconst output = sampler.getOutput()!;\n\n\t\t\t\t\taccessorsVisited.add(input);\n\t\t\t\t\taccessorsVisited.add(output);\n\n\t\t\t\t\t// prettier-ignore\n\t\t\t\t\tconst tmpTimes = toFloat32Array(\n\t\t\t\t\t\tinput.getArray()!,\n\t\t\t\t\t\tinput.getComponentType(),\n\t\t\t\t\t\tinput.getNormalized()\n\t\t\t\t\t);\n\t\t\t\t\tconst tmpValues = toFloat32Array(\n\t\t\t\t\t\toutput.getArray()!,\n\t\t\t\t\t\toutput.getComponentType(),\n\t\t\t\t\t\toutput.getNormalized(),\n\t\t\t\t\t);\n\n\t\t\t\t\tconst elementSize = tmpValues.length / tmpTimes.length;\n\t\t\t\t\tconst srcCount = tmpTimes.length;\n\t\t\t\t\tlet dstCount: number;\n\n\t\t\t\t\tif (samplerInterpolation === 'STEP') {\n\t\t\t\t\t\tdstCount = resample(tmpTimes, tmpValues, 'step', options.tolerance);\n\t\t\t\t\t} else if (samplerTargetPaths.get(sampler) === 'rotation') {\n\t\t\t\t\t\tdstCount = resample(tmpTimes, tmpValues, 'slerp', options.tolerance);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdstCount = resample(tmpTimes, tmpValues, 'lerp', options.tolerance);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dstCount < srcCount) {\n\t\t\t\t\t\t// Clone the input/output accessors, without cloning their underlying\n\t\t\t\t\t\t// arrays. Then assign the resampled data.\n\t\t\t\t\t\tconst srcTimes = input.getArray()!;\n\t\t\t\t\t\tconst srcValues = output.getArray()!;\n\n\t\t\t\t\t\tconst dstTimes = fromFloat32Array(\n\t\t\t\t\t\t\tnew Float32Array(tmpTimes.buffer, tmpTimes.byteOffset, dstCount),\n\t\t\t\t\t\t\tinput.getComponentType(),\n\t\t\t\t\t\t\tinput.getNormalized(),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst dstValues = fromFloat32Array(\n\t\t\t\t\t\t\tnew Float32Array(tmpValues.buffer, tmpValues.byteOffset, dstCount * elementSize),\n\t\t\t\t\t\t\toutput.getComponentType(),\n\t\t\t\t\t\t\toutput.getNormalized(),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tinput.setArray(EMPTY_ARRAY);\n\t\t\t\t\t\toutput.setArray(EMPTY_ARRAY);\n\n\t\t\t\t\t\tsampler.setInput(input.clone().setArray(dstTimes));\n\t\t\t\t\t\tsampler.setOutput(output.clone().setArray(dstValues));\n\n\t\t\t\t\t\tinput.setArray(srcTimes);\n\t\t\t\t\t\toutput.setArray(srcValues);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const accessor of Array.from(accessorsVisited.values())) {\n\t\t\tconst used = accessor.listParents().some((p) => !(p instanceof Root));\n\t\t\tif (!used) accessor.dispose();\n\t\t}\n\n\t\t// Resampling may result in duplicate input or output sampler\n\t\t// accessors. Find and remove the duplicates after processing.\n\t\tconst dstAccessorCount = document.getRoot().listAccessors().length;\n\t\tif (dstAccessorCount > srcAccessorCount && !isTransformPending(context, NAME, 'dedup')) {\n\t\t\tawait document.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/** Returns a copy of the source array, as a denormalized Float32Array. */\nfunction toFloat32Array(\n\tsrcArray: TypedArray,\n\tcomponentType: GLTF.AccessorComponentType,\n\tnormalized: boolean,\n): Float32Array {\n\tif (srcArray instanceof Float32Array) return srcArray.slice();\n\tconst dstArray = new Float32Array(srcArray);\n\tif (!normalized) return dstArray;\n\n\tfor (let i = 0; i < dstArray.length; i++) {\n\t\tdstArray[i] = MathUtils.decodeNormalizedInt(dstArray[i], componentType);\n\t}\n\n\treturn dstArray;\n}\n\n/** Returns a copy of the source array, with specified component type and normalization. */\nfunction fromFloat32Array(\n\tsrcArray: Float32Array,\n\tcomponentType: GLTF.AccessorComponentType,\n\tnormalized: boolean,\n): TypedArray {\n\tif (componentType === Accessor.ComponentType.FLOAT) return srcArray.slice();\n\tconst TypedArray = ComponentTypeToTypedArray[componentType];\n\tconst dstArray = new TypedArray(srcArray.length);\n\n\tfor (let i = 0; i < dstArray.length; i++) {\n\t\tdstArray[i] = normalized ? MathUtils.encodeNormalizedInt(srcArray[i], componentType) : srcArray[i];\n\t}\n\n\treturn dstArray;\n}\n","import { Accessor, AnimationChannel, AnimationSampler, Document, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'sequence';\n\nexport interface SequenceOptions {\n\t/** Frames per second, where one node is shown each frame. Default 10. */\n\tfps?: number;\n\t/** Pattern (regex) used to filter nodes for the sequence. Required. */\n\tpattern: RegExp;\n\t/** Name of the new animation. */\n\tname?: string;\n\t/** Whether to sort the nodes by name, or use original order. Default true. */\n\tsort?: boolean;\n}\n\nconst SEQUENCE_DEFAULTS: Required<SequenceOptions> = {\n\tname: '',\n\tfps: 10,\n\tpattern: /.*/,\n\tsort: true,\n};\n\n/**\n * Creates an {@link Animation} displaying each of the specified {@link Node}s sequentially.\n *\n * @category Transforms\n */\nexport function sequence(_options: SequenceOptions = SEQUENCE_DEFAULTS): Transform {\n\tconst options = { ...SEQUENCE_DEFAULTS, ..._options } as Required<SequenceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst fps = options.fps;\n\n\t\t// Collect sequence nodes.\n\t\tconst sequenceNodes = root.listNodes().filter((node) => node.getName().match(options.pattern));\n\n\t\t// Sort by node name.\n\t\tif (options.sort) {\n\t\t\tsequenceNodes.sort((a, b) => (a.getName() > b.getName() ? 1 : -1));\n\t\t}\n\n\t\t// Create animation cycling visibility of each node.\n\t\tconst anim = doc.createAnimation(options.name);\n\t\tconst animBuffer = root.listBuffers()[0];\n\t\tsequenceNodes.forEach((node, i) => {\n\t\t\t// Create keyframe tracks that show each node for a single frame.\n\t\t\tlet inputArray;\n\t\t\tlet outputArray;\n\t\t\tif (i === 0) {\n\t\t\t\tinputArray = [i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [1, 1, 1, 0, 0, 0];\n\t\t\t} else if (i === sequenceNodes.length - 1) {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1];\n\t\t\t} else {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1, 0, 0, 0];\n\t\t\t}\n\n\t\t\t// Append channel to animation sequence.\n\t\t\tconst input = doc.createAccessor().setArray(new Float32Array(inputArray)).setBuffer(animBuffer);\n\t\t\tconst output = doc\n\t\t\t\t.createAccessor()\n\t\t\t\t.setArray(new Float32Array(outputArray))\n\t\t\t\t.setBuffer(animBuffer)\n\t\t\t\t.setType(Accessor.Type.VEC3);\n\t\t\tconst sampler = doc\n\t\t\t\t.createAnimationSampler()\n\t\t\t\t.setInterpolation(AnimationSampler.Interpolation.STEP)\n\t\t\t\t.setInput(input)\n\t\t\t\t.setOutput(output);\n\t\t\tconst channel = doc\n\t\t\t\t.createAnimationChannel()\n\t\t\t\t.setTargetNode(node)\n\t\t\t\t.setTargetPath(AnimationChannel.TargetPath.SCALE)\n\t\t\t\t.setSampler(sampler);\n\t\t\tanim.addSampler(sampler).addChannel(channel);\n\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { Accessor, Document, Primitive, PropertyType, Transform, TransformContext } from '@gltf-transform/core';\nimport {\n\tcreateTransform,\n\tformatDeltaOp,\n\tdeepListAttributes,\n\tremapAttribute,\n\tdeepSwapAttribute,\n\tisTransformPending,\n} from './utils.js';\nimport { weld } from './weld.js';\nimport type { MeshoptSimplifier } from 'meshoptimizer';\nimport { dedup } from './dedup.js';\nimport { prune } from './prune.js';\n\nconst NAME = 'simplify';\n\n/** Options for the {@link simplify} function. */\nexport interface SimplifyOptions {\n\t/** MeshoptSimplifier instance. */\n\tsimplifier: unknown;\n\t/** Target ratio (0–1) of vertices to keep. Default: 0.0 (0%). */\n\tratio?: number;\n\t/** Limit on error, as a fraction of mesh radius. Default: 0.0001 (0.01%). */\n\terror?: number;\n\t/**\n\t * Whether to lock topological borders of the mesh. May be necessary when\n\t * adjacent 'chunks' of a large mesh (e.g. terrain) share a border, helping\n\t * to ensure no seams appear.\n\t */\n\tlockBorder?: boolean;\n}\n\nexport const SIMPLIFY_DEFAULTS: Required<Omit<SimplifyOptions, 'simplifier'>> = {\n\tratio: 0.0,\n\terror: 0.0001,\n\tlockBorder: false,\n};\n\n/**\n * Simplification algorithm, based on meshoptimizer, producing meshes with fewer\n * triangles and vertices. Simplification is lossy, but the algorithm aims to\n * preserve visual quality as much as possible for given parameters.\n *\n * The algorithm aims to reach the target 'ratio', while minimizing error. If\n * error exceeds the specified 'error' threshold, the algorithm will quit\n * before reaching the target ratio. Examples:\n *\n * - ratio=0.0, error=0.0001: Aims for maximum simplification, constrained to 0.01% error.\n * - ratio=0.5, error=0.0001: Aims for 50% simplification, constrained to 0.01% error.\n * - ratio=0.5, error=1: Aims for 50% simplification, unconstrained by error.\n *\n * Topology, particularly split vertices, will also limit the simplifier. For\n * best results, apply a {@link weld} operation before simplification.\n *\n * Example:\n *\n * ```javascript\n * import { simplify, weld } from '@gltf-transform/functions';\n * import { MeshoptSimplifier } from 'meshoptimizer';\n *\n * await document.transform(\n *   weld({ tolerance: 0.0001 }),\n *   simplify({ simplifier: MeshoptSimplifier, ratio: 0.75, error: 0.001 })\n * );\n * ```\n *\n * References:\n * - https://github.com/zeux/meshoptimizer/blob/master/js/README.md#simplifier\n *\n * @category Transforms\n */\nexport function simplify(_options: SimplifyOptions): Transform {\n\tconst options = { ...SIMPLIFY_DEFAULTS, ..._options } as Required<SimplifyOptions>;\n\n\tconst simplifier = options.simplifier as typeof MeshoptSimplifier | undefined;\n\n\tif (!simplifier) {\n\t\tthrow new Error(`${NAME}: simplifier dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (document: Document, context?: TransformContext): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\n\t\tawait simplifier.ready;\n\t\tawait document.transform(weld({ overwrite: false }));\n\n\t\t// Simplify mesh primitives.\n\t\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tif (prim.getMode() !== Primitive.Mode.TRIANGLES) {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t`${NAME}: Skipping primitive of mesh \"${mesh.getName()}\": Requires TRIANGLES draw mode.`,\n\t\t\t\t\t);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tsimplifyPrimitive(document, prim, options);\n\n\t\t\t\tif (prim.getIndices()!.getCount() === 0) prim.dispose();\n\t\t\t}\n\n\t\t\tif (mesh.listPrimitives().length === 0) mesh.dispose();\n\t\t}\n\n\t\t// Where simplification removes meshes, we may need to prune leaf nodes.\n\t\tawait document.transform(\n\t\t\tprune({\n\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR, PropertyType.NODE],\n\t\t\t\tkeepAttributes: true,\n\t\t\t\tkeepIndices: true,\n\t\t\t\tkeepLeaves: false,\n\t\t\t}),\n\t\t);\n\n\t\t// Where multiple primitive indices point into the same vertex streams, simplification\n\t\t// may write duplicate streams. Find and remove the duplicates after processing.\n\t\tif (!isTransformPending(context, NAME, 'dedup')) {\n\t\t\tawait document.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nexport function simplifyPrimitive(document: Document, prim: Primitive, _options: SimplifyOptions): Primitive {\n\tconst options = { ...SIMPLIFY_DEFAULTS, ..._options } as Required<SimplifyOptions>;\n\tconst simplifier = options.simplifier as typeof MeshoptSimplifier;\n\n\tconst logger = document.getLogger();\n\tconst position = prim.getAttribute('POSITION')!;\n\tconst srcIndices = prim.getIndices()!;\n\tconst srcVertexCount = position.getCount();\n\n\tlet positionArray = position.getArray()!;\n\tlet indicesArray = srcIndices.getArray()!;\n\n\t// (1) Gather attributes and indices in Meshopt-compatible format.\n\n\tif (position.getComponentType() !== Accessor.ComponentType.FLOAT) {\n\t\tif (position.getNormalized()) {\n\t\t\tconst src = positionArray;\n\t\t\tconst dst = new Float32Array(src.length);\n\n\t\t\t// Dequantize.\n\t\t\tfor (let i = 0, il = position.getCount(), el = [] as number[]; i < il; i++) {\n\t\t\t\tel = position.getElement(i, el);\n\t\t\t\tposition.setArray(dst).setElement(i, el).setArray(src);\n\t\t\t}\n\n\t\t\tpositionArray = dst;\n\t\t} else {\n\t\t\tpositionArray = new Float32Array(positionArray);\n\t\t}\n\t}\n\n\tif (srcIndices.getComponentType() !== Accessor.ComponentType.UNSIGNED_INT) {\n\t\tindicesArray = new Uint32Array(indicesArray);\n\t}\n\n\t// (2) Run simplification.\n\n\tconst targetCount = Math.floor((options.ratio * srcVertexCount) / 3) * 3;\n\tconst [dstIndicesArray, error] = simplifier.simplify(\n\t\tindicesArray as Uint32Array,\n\t\tpositionArray as Float32Array,\n\t\t3,\n\t\ttargetCount,\n\t\toptions.error,\n\t\toptions.lockBorder ? ['LockBorder'] : [],\n\t);\n\n\tconst [remap, unique] = simplifier.compactMesh(dstIndicesArray);\n\n\tlogger.debug(`${NAME}: ${formatDeltaOp(position.getCount(), unique)} vertices, error: ${error.toFixed(4)}.`);\n\n\t// (3) Write vertex attributes.\n\n\tfor (const srcAttribute of deepListAttributes(prim)) {\n\t\tconst dstAttribute = srcAttribute.clone();\n\t\tremapAttribute(dstAttribute, remap, unique);\n\t\tdeepSwapAttribute(prim, srcAttribute, dstAttribute);\n\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t}\n\n\t// (4) Write indices.\n\n\tconst dstIndices = srcIndices.clone();\n\tdstIndices.setArray(srcVertexCount <= 65534 ? new Uint16Array(dstIndicesArray) : dstIndicesArray);\n\tprim.setIndices(dstIndices);\n\tif (srcIndices.listParents().length === 1) srcIndices.dispose();\n\n\treturn prim;\n}\n","import { Document, MathUtils, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'sparse';\n\n/** Options for the {@link sparse} function. */\nexport interface SparseOptions {\n\t/**\n\t * Threshold ratio used to determine when an accessor should be sparse.\n\t * Default: 1 / 3.\n\t */\n\tratio: number;\n}\n\nconst SPARSE_DEFAULTS: Required<SparseOptions> = {\n\tratio: 1 / 3,\n};\n\n/**\n * Scans all {@link Accessor Accessors} in the Document, detecting whether each Accessor\n * would benefit from sparse data storage. Currently, sparse data storage is used only\n * when many values (>= ratio) are zeroes. Particularly for assets using morph target\n * (\"shape key\") animation, sparse data storage may significantly reduce file sizes.\n *\n * Example:\n *\n * ```ts\n * import { sparse } from '@gltf-transform/functions';\n *\n * accessor.getArray(); // → [ 0, 0, 0, 0, 0, 25.0, 0, 0, ... ]\n * accessor.getSparse(); // → false\n *\n * await document.transform(sparse({ratio: 1 / 10}));\n *\n * accessor.getSparse(); // → true\n * ```\n *\n * @experimental\n * @category Transforms\n */\nexport function sparse(_options: SparseOptions = SPARSE_DEFAULTS): Transform {\n\tconst options = { ...SPARSE_DEFAULTS, ..._options } as Required<SparseOptions>;\n\n\tconst ratio = options.ratio;\n\tif (ratio < 0 || ratio > 1) {\n\t\tthrow new Error(`${NAME}: Ratio must be between 0 and 1.`);\n\t}\n\n\treturn createTransform(NAME, (document: Document): void => {\n\t\tconst root = document.getRoot();\n\t\tconst logger = document.getLogger();\n\n\t\tlet modifiedCount = 0;\n\n\t\tfor (const accessor of root.listAccessors()) {\n\t\t\tconst count = accessor.getCount();\n\t\t\tconst base = Array(accessor.getElementSize()).fill(0);\n\t\t\tconst el = Array(accessor.getElementSize()).fill(0);\n\n\t\t\tlet nonZeroCount = 0;\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\taccessor.getElement(i, el);\n\t\t\t\tif (!MathUtils.eq(el, base, 0)) nonZeroCount++;\n\t\t\t\tif (nonZeroCount / count >= ratio) break;\n\t\t\t}\n\n\t\t\tconst sparse = nonZeroCount / count < ratio;\n\t\t\tif (sparse !== accessor.getSparse()) {\n\t\t\t\taccessor.setSparse(sparse);\n\t\t\t\tmodifiedCount++;\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Updated ${modifiedCount} accessors.`);\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { BufferUtils, Document, ImageUtils, Texture, TextureChannel, Transform, vec2 } from '@gltf-transform/core';\nimport { EXTTextureAVIF, EXTTextureWebP } from '@gltf-transform/extensions';\nimport { getTextureChannelMask } from './list-texture-channels.js';\nimport { listTextureSlots } from './list-texture-slots.js';\nimport type sharp from 'sharp';\nimport { createTransform, fitWithin, formatBytes } from './utils.js';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport ndarray from 'ndarray';\nimport { lanczos2, lanczos3 } from 'ndarray-lanczos';\n\nconst NAME = 'textureCompress';\n\ntype Format = (typeof TEXTURE_COMPRESS_SUPPORTED_FORMATS)[number];\nexport const TEXTURE_COMPRESS_SUPPORTED_FORMATS = ['jpeg', 'png', 'webp', 'avif'] as const;\nconst SUPPORTED_MIME_TYPES = ['image/jpeg', 'image/png', 'image/webp', 'image/avif'];\n\n/** Resampling filter methods. LANCZOS3 is sharper, LANCZOS2 is smoother. */\nexport enum TextureResizeFilter {\n\t/** Lanczos3 (sharp) */\n\tLANCZOS3 = 'lanczos3',\n\t/** Lanczos2 (smooth) */\n\tLANCZOS2 = 'lanczos2',\n}\n\nexport interface TextureCompressOptions {\n\t/** Instance of the Sharp encoder, which must be installed from the\n\t * 'sharp' package and provided by the caller. When not provided, a\n\t * platform-specific fallback implementation will be used, and most\n\t * quality- and compression-related options are ignored.\n\t */\n\tencoder?: unknown;\n\t/**\n\t * Target image format. If specified, included textures in other formats\n\t * will be converted. Default: original format.\n\t */\n\ttargetFormat?: Format;\n\t/**\n\t * Resizes textures to given maximum width/height, preserving aspect ratio.\n\t * For example, a 4096x8192 texture, resized with limit [2048, 2048] will\n\t * be reduced to 1024x2048.\n\t */\n\tresize?: vec2;\n\t/** Interpolation used if resizing. Default: TextureResizeFilter.LANCZOS3. */\n\tresizeFilter?: TextureResizeFilter;\n\t/** Pattern identifying textures to compress, matched to name or URI. */\n\tpattern?: RegExp | null;\n\t/**\n\t * Pattern matching the format(s) to be compressed or converted. Some examples\n\t * of formats include \"jpeg\" and \"png\".\n\t */\n\tformats?: RegExp | null;\n\t/**\n\t * Pattern matching the material texture slot(s) to be compressed or converted.\n\t * Some examples of slot names include \"baseColorTexture\", \"occlusionTexture\",\n\t * \"metallicRoughnessTexture\", and \"normalTexture\".\n\t */\n\tslots?: RegExp | null;\n\n\t/** Quality, 1-100. Default: auto. */\n\tquality?: number | null;\n\t/**\n\t * Level of CPU effort to reduce file size, 0-100. PNG, WebP, and AVIF\n\t * only. Supported only when a Sharp encoder is provided. Default: auto.\n\t */\n\teffort?: number | null;\n\t/**\n\t * Use lossless compression mode. WebP and AVIF only. Supported only when a\n\t * Sharp encoder is provided. Default: false.\n\t */\n\tlossless?: boolean;\n\t/**\n\t * Use near lossless compression mode. WebP only. Supported only when a\n\t * Sharp encoder is provided. Default: false.\n\t */\n\tnearLossless?: boolean;\n}\n\nexport type CompressTextureOptions = Omit<TextureCompressOptions, 'pattern' | 'formats' | 'slots'>;\n\n// IMPORTANT: No defaults for quality flags, see https://github.com/donmccurdy/glTF-Transform/issues/969.\nexport const TEXTURE_COMPRESS_DEFAULTS: Omit<TextureCompressOptions, 'resize' | 'targetFormat' | 'encoder'> = {\n\tresizeFilter: TextureResizeFilter.LANCZOS3,\n\tpattern: undefined,\n\tformats: undefined,\n\tslots: undefined,\n\tquality: undefined,\n\teffort: undefined,\n\tlossless: false,\n\tnearLossless: false,\n};\n\n/**\n * Optimizes images, optionally resizing or converting to JPEG, PNG, WebP, or AVIF formats.\n *\n * For best results use a Node.js environment, install the `sharp` module, and\n * provide an encoder. When the encoder is omitted — `sharp` works only in Node.js —\n * the implementation will use a platform-specific fallback encoder, and most\n * quality- and compression-related options are ignored.\n *\n * Example:\n *\n * ```javascript\n * import { textureCompress } from '@gltf-transform/functions';\n * import sharp from 'sharp';\n *\n * // (A) Optimize without conversion.\n * await document.transform(\n * \ttextureCompress({encoder: sharp})\n * );\n *\n * // (B) Optimize and convert images to WebP.\n * await document.transform(\n * \ttextureCompress({\n * \t\tencoder: sharp,\n * \t\ttargetFormat: 'webp',\n * \t\tslots: /^(?!normalTexture).*$/ // exclude normal maps\n * \t})\n * );\n *\n * // (C) Resize and convert images to WebP in a browser, without a Sharp\n * // encoder. Most quality- and compression-related options are ignored.\n * await document.transform(\n * \ttextureCompress({ targetFormat: 'webp', resize: [1024, 1024] })\n * );\n * ```\n *\n * @category Transforms\n */\nexport function textureCompress(_options: TextureCompressOptions): Transform {\n\tconst options = { ...TEXTURE_COMPRESS_DEFAULTS, ..._options } as Required<TextureCompressOptions>;\n\tconst targetFormat = options.targetFormat as Format | undefined;\n\tconst patternRe = options.pattern;\n\tconst formatsRe = options.formats;\n\tconst slotsRe = options.slots;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tconst textures = document.getRoot().listTextures();\n\n\t\tawait Promise.all(\n\t\t\ttextures.map(async (texture, textureIndex) => {\n\t\t\t\tconst slots = listTextureSlots(texture);\n\t\t\t\tconst channels = getTextureChannelMask(texture);\n\t\t\t\tconst textureLabel =\n\t\t\t\t\ttexture.getURI() ||\n\t\t\t\t\ttexture.getName() ||\n\t\t\t\t\t`${textureIndex + 1}/${document.getRoot().listTextures().length}`;\n\t\t\t\tconst prefix = `${NAME}(${textureLabel})`;\n\n\t\t\t\t// FILTER: Exclude textures that don't match (a) 'slots' or (b) expected formats.\n\n\t\t\t\tif (!SUPPORTED_MIME_TYPES.includes(texture.getMimeType())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, unsupported texture type \"${texture.getMimeType()}\".`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (patternRe && !patternRe.test(texture.getName()) && !patternRe.test(texture.getURI())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, excluded by \"pattern\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (formatsRe && !formatsRe.test(texture.getMimeType())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, \"${texture.getMimeType()}\" excluded by \"formats\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (slotsRe && slots.length && !slots.some((slot) => slotsRe.test(slot))) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, [${slots.join(', ')}] excluded by \"slots\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (options.targetFormat === 'jpeg' && channels & TextureChannel.A) {\n\t\t\t\t\tlogger.warn(`${prefix}: Skipping, [${slots.join(', ')}] requires alpha channel.`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst srcFormat = getFormat(texture);\n\t\t\t\tconst dstFormat = targetFormat || srcFormat;\n\t\t\t\tlogger.debug(`${prefix}: Format = ${srcFormat} → ${dstFormat}`);\n\t\t\t\tlogger.debug(`${prefix}: Slots = [${slots.join(', ')}]`);\n\n\t\t\t\tconst srcImage = texture.getImage()!;\n\t\t\t\tconst srcByteLength = srcImage.byteLength;\n\n\t\t\t\tawait compressTexture(texture, options);\n\n\t\t\t\tconst dstImage = texture.getImage()!;\n\t\t\t\tconst dstByteLength = dstImage.byteLength;\n\n\t\t\t\tconst flag = srcImage === dstImage ? ' (SKIPPED' : '';\n\n\t\t\t\tlogger.debug(`${prefix}: Size = ${formatBytes(srcByteLength)} → ${formatBytes(dstByteLength)}${flag}`);\n\t\t\t}),\n\t\t);\n\n\t\t// Attach EXT_texture_webp if needed.\n\t\tconst webpExtension = document.createExtension(EXTTextureWebP);\n\t\tif (textures.some((texture) => texture.getMimeType() === 'image/webp')) {\n\t\t\twebpExtension.setRequired(true);\n\t\t} else {\n\t\t\twebpExtension.dispose();\n\t\t}\n\n\t\t// Attach EXT_texture_avif if needed.\n\t\tconst avifExtension = document.createExtension(EXTTextureAVIF);\n\t\tif (textures.some((texture) => texture.getMimeType() === 'image/avif')) {\n\t\t\tavifExtension.setRequired(true);\n\t\t} else {\n\t\t\tavifExtension.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**\n * Optimizes a single {@link Texture}, optionally resizing or converting to JPEG, PNG, WebP, or AVIF formats.\n *\n * For best results use a Node.js environment, install the `sharp` module, and\n * provide an encoder. When the encoder is omitted — `sharp` works only in Node.js —\n * the implementation will use a platform-specific fallback encoder, and most\n * quality- and compression-related options are ignored.\n *\n * Example:\n *\n * ```javascript\n * import { compressTexture } from '@gltf-transform/functions';\n * import sharp from 'sharp';\n *\n * const texture = document.getRoot().listTextures()\n * \t.find((texture) => texture.getName() === 'MyTexture');\n *\n * // (A) Node.js.\n * await compressTexture(texture, {\n * \tencoder: sharp,\n * \ttargetFormat: 'webp',\n * \tresize: [1024, 1024]\n * });\n *\n * // (B) Web.\n * await compressTexture(texture, {\n * \ttargetFormat: 'webp',\n * \tresize: [1024, 1024]\n * });\n * ```\n */\nexport async function compressTexture(texture: Texture, _options: CompressTextureOptions) {\n\tconst options = { ...TEXTURE_COMPRESS_DEFAULTS, ..._options } as Required<CompressTextureOptions>;\n\tconst encoder = options.encoder as typeof sharp | null;\n\n\tconst srcFormat = getFormat(texture);\n\tconst dstFormat = options.targetFormat || srcFormat;\n\tconst srcMimeType = texture.getMimeType();\n\tconst dstMimeType = `image/${dstFormat}`;\n\n\tconst srcImage = texture.getImage()!;\n\tconst dstImage = encoder\n\t\t? await _encodeWithSharp(srcImage, srcMimeType, dstMimeType, options)\n\t\t: await _encodeWithNdarrayPixels(srcImage, srcMimeType, dstMimeType, options);\n\n\tconst srcByteLength = srcImage.byteLength;\n\tconst dstByteLength = dstImage.byteLength;\n\n\tif (srcMimeType === dstMimeType && dstByteLength >= srcByteLength && !options.resize) {\n\t\t// Skip if src/dst formats match and dst is larger than the original.\n\t\treturn;\n\t} else if (srcMimeType === dstMimeType) {\n\t\t// Overwrite if src/dst formats match and dst is smaller than the original.\n\t\ttexture.setImage(dstImage);\n\t} else {\n\t\t// Overwrite, then update path and MIME type if src/dst formats differ.\n\t\tconst srcExtension = ImageUtils.mimeTypeToExtension(srcMimeType);\n\t\tconst dstExtension = ImageUtils.mimeTypeToExtension(dstMimeType);\n\t\tconst dstURI = texture.getURI().replace(new RegExp(`\\\\.${srcExtension}$`), `.${dstExtension}`);\n\t\ttexture.setImage(dstImage).setMimeType(dstMimeType).setURI(dstURI);\n\t}\n}\n\nasync function _encodeWithSharp(\n\tsrcImage: Uint8Array,\n\t_srcMimeType: string,\n\tdstMimeType: string,\n\toptions: Required<CompressTextureOptions>,\n): Promise<Uint8Array> {\n\tconst encoder = options.encoder as typeof sharp;\n\tlet encoderOptions: sharp.JpegOptions | sharp.PngOptions | sharp.WebpOptions | sharp.AvifOptions = {};\n\n\tconst dstFormat = getFormatFromMimeType(dstMimeType);\n\n\tswitch (dstFormat) {\n\t\tcase 'jpeg':\n\t\t\tencoderOptions = { quality: options.quality } as sharp.JpegOptions;\n\t\t\tbreak;\n\t\tcase 'png':\n\t\t\tencoderOptions = {\n\t\t\t\tquality: options.quality,\n\t\t\t\teffort: remap(options.effort, 100, 10),\n\t\t\t} as sharp.PngOptions;\n\t\t\tbreak;\n\t\tcase 'webp':\n\t\t\tencoderOptions = {\n\t\t\t\tquality: options.quality,\n\t\t\t\teffort: remap(options.effort, 100, 6),\n\t\t\t\tlossless: options.lossless,\n\t\t\t\tnearLossless: options.nearLossless,\n\t\t\t} as sharp.WebpOptions;\n\t\t\tbreak;\n\t\tcase 'avif':\n\t\t\tencoderOptions = {\n\t\t\t\tquality: options.quality,\n\t\t\t\teffort: remap(options.effort, 100, 9),\n\t\t\t\tlossless: options.lossless,\n\t\t\t} as sharp.AvifOptions;\n\t\t\tbreak;\n\t}\n\n\tconst instance = encoder(srcImage).toFormat(dstFormat, encoderOptions);\n\n\tif (options.resize) {\n\t\tinstance.resize(options.resize[0], options.resize[1], {\n\t\t\tfit: 'inside',\n\t\t\tkernel: options.resizeFilter,\n\t\t\twithoutEnlargement: true,\n\t\t});\n\t}\n\n\treturn BufferUtils.toView(await instance.toBuffer());\n}\n\nasync function _encodeWithNdarrayPixels(\n\tsrcImage: Uint8Array,\n\tsrcMimeType: string,\n\tdstMimeType: string,\n\toptions: Required<CompressTextureOptions>,\n): Promise<Uint8Array> {\n\tconst srcPixels = (await getPixels(srcImage, srcMimeType)) as ndarray.NdArray<Uint8Array>;\n\n\tif (options.resize) {\n\t\tconst [w, h] = srcPixels.shape;\n\t\tconst dstSize = fitWithin([w, h], options.resize);\n\t\tconst dstPixels = ndarray(new Uint8Array(dstSize[0] * dstSize[1] * 4), [...dstSize, 4]);\n\t\toptions.resizeFilter === TextureResizeFilter.LANCZOS3\n\t\t\t? lanczos3(srcPixels, dstPixels)\n\t\t\t: lanczos2(srcPixels, dstPixels);\n\t\treturn savePixels(dstPixels, dstMimeType);\n\t}\n\n\treturn savePixels(srcPixels, dstMimeType);\n}\n\nfunction getFormat(texture: Texture): Format {\n\treturn getFormatFromMimeType(texture.getMimeType());\n}\n\nfunction getFormatFromMimeType(mimeType: string): Format {\n\tconst format = mimeType.split('/').pop() as Format | undefined;\n\tif (!format || !TEXTURE_COMPRESS_SUPPORTED_FORMATS.includes(format)) {\n\t\tthrow new Error(`Unknown MIME type \"${mimeType}\".`);\n\t}\n\treturn format;\n}\n\nfunction remap(value: number | null | undefined, srcMax: number, dstMax: number): number | undefined {\n\tif (value == null) return undefined;\n\treturn Math.round((value / srcMax) * dstMax);\n}\n","import { Accessor, Document, ILogger, Primitive, Transform, TypedArray, uuid } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'tangents';\n\n/** Options for the {@link tangents} function. */\nexport interface TangentsOptions {\n\t/**\n\t * Callback function to generate tangents from position, uv, and normal attributes.\n\t * Generally, users will want to provide the `generateTangents` from the\n\t * [mikktspace](https://github.com/donmccurdy/mikktspace-wasm) library, which is not\n\t * included by default.\n\t */\n\tgenerateTangents?: (pos: Float32Array, norm: Float32Array, uv: Float32Array) => Float32Array;\n\t/** Whether to overwrite existing `TANGENT` attributes. */\n\toverwrite?: boolean;\n}\n\nconst TANGENTS_DEFAULTS: Required<Omit<TangentsOptions, 'generateTangents'>> = {\n\toverwrite: false,\n};\n\n/**\n * Generates MikkTSpace vertex tangents for mesh primitives, which may fix rendering issues\n * occuring with some baked normal maps. Requires access to the [mikktspace](https://github.com/donmccurdy/mikktspace-wasm)\n * WASM package, or equivalent.\n *\n * Example:\n *\n * ```ts\n * import { generateTangents } from 'mikktspace';\n * import { tangents } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \ttangents({generateTangents})\n * );\n * ```\n *\n * @category Transforms\n */\nexport function tangents(_options: TangentsOptions = TANGENTS_DEFAULTS): Transform {\n\tif (!_options.generateTangents) {\n\t\tthrow new Error(`${NAME}: generateTangents callback required — install \"mikktspace\".`);\n\t}\n\n\tconst options = { ...TANGENTS_DEFAULTS, ..._options } as Required<TangentsOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst attributeIDs = new Map<TypedArray, string>();\n\t\tconst tangentCache = new Map<string, Accessor>();\n\t\tlet modified = 0;\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tconst meshName = mesh.getName();\n\t\t\tconst meshPrimitives = mesh.listPrimitives();\n\n\t\t\tfor (let i = 0; i < meshPrimitives.length; i++) {\n\t\t\t\tconst prim = meshPrimitives[i];\n\n\t\t\t\t// Skip primitives for which we can't compute tangents.\n\t\t\t\tif (!filterPrimitive(prim, logger, meshName, i, options.overwrite)) continue;\n\n\t\t\t\tconst texcoordSemantic = getNormalTexcoord(prim);\n\n\t\t\t\t// Nullability conditions checked by filterPrimitive() above.\n\t\t\t\tconst position = prim.getAttribute('POSITION')!.getArray()!;\n\t\t\t\tconst normal = prim.getAttribute('NORMAL')!.getArray()!;\n\t\t\t\tconst texcoord = prim.getAttribute(texcoordSemantic)!.getArray()!;\n\n\t\t\t\t// Compute UUIDs for each attribute.\n\t\t\t\tconst positionID = attributeIDs.get(position) || uuid();\n\t\t\t\tattributeIDs.set(position, positionID);\n\n\t\t\t\tconst normalID = attributeIDs.get(normal) || uuid();\n\t\t\t\tattributeIDs.set(normal, normalID);\n\n\t\t\t\tconst texcoordID = attributeIDs.get(texcoord) || uuid();\n\t\t\t\tattributeIDs.set(texcoord, texcoordID);\n\n\t\t\t\t// Dispose of previous TANGENT accessor if only used by this primitive (and Root).\n\t\t\t\tconst prevTangent = prim.getAttribute('TANGENT');\n\t\t\t\tif (prevTangent && prevTangent.listParents().length === 2) prevTangent.dispose();\n\n\t\t\t\t// If we've already computed tangents for this pos/norm/uv set, reuse them.\n\t\t\t\tconst attributeHash = `${positionID}|${normalID}|${texcoordID}`;\n\t\t\t\tlet tangent = tangentCache.get(attributeHash);\n\t\t\t\tif (tangent) {\n\t\t\t\t\tlogger.debug(`${NAME}: Found cache for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\t\t\t\t\tmodified++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise, generate tangents with the 'mikktspace' WASM library.\n\t\t\t\tlogger.debug(`${NAME}: Generating for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\tconst tangentBuffer = prim.getAttribute('POSITION')!.getBuffer();\n\t\t\t\tconst tangentArray = options.generateTangents(\n\t\t\t\t\tposition instanceof Float32Array ? position : new Float32Array(position),\n\t\t\t\t\tnormal instanceof Float32Array ? normal : new Float32Array(normal),\n\t\t\t\t\ttexcoord instanceof Float32Array ? texcoord : new Float32Array(texcoord)\n\t\t\t\t);\n\n\t\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/issues/174\n\t\t\t\tfor (let i = 3; i < tangentArray.length; i += 4) tangentArray[i] *= -1;\n\n\t\t\t\ttangent = doc.createAccessor().setBuffer(tangentBuffer).setArray(tangentArray).setType('VEC4');\n\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\n\t\t\t\ttangentCache.set(attributeHash, tangent);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\nfunction getNormalTexcoord(prim: Primitive): string {\n\tconst material = prim.getMaterial();\n\tif (!material) return 'TEXCOORD_0';\n\n\tconst normalTextureInfo = material.getNormalTextureInfo();\n\tif (!normalTextureInfo) return 'TEXCOORD_0';\n\n\tconst texcoord = normalTextureInfo.getTexCoord();\n\tconst semantic = `TEXCOORD_${texcoord}`;\n\tif (prim.getAttribute(semantic)) return semantic;\n\n\treturn 'TEXCOORD_0';\n}\n\nfunction filterPrimitive(prim: Primitive, logger: ILogger, meshName: string, i: number, overwrite: boolean): boolean {\n\tif (\n\t\tprim.getMode() !== Primitive.Mode.TRIANGLES ||\n\t\t!prim.getAttribute('POSITION') ||\n\t\t!prim.getAttribute('NORMAL') ||\n\t\t!prim.getAttribute('TEXCOORD_0')\n\t) {\n\t\tlogger.debug(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must` +\n\t\t\t\t' have attributes=[POSITION, NORMAL, TEXCOORD_0] and mode=TRIANGLES.'\n\t\t);\n\t\treturn false;\n\t}\n\n\tif (prim.getAttribute('TANGENT') && !overwrite) {\n\t\tlogger.debug(`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": TANGENT found.`);\n\t\treturn false;\n\t}\n\n\tif (prim.getIndices()) {\n\t\t// TODO(feat): Do this automatically for qualifying primitives.\n\t\tlogger.warn(`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must` + ' be unwelded.');\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { KHRMaterialsUnlit } from '@gltf-transform/extensions';\n\n/**\n * @category Transforms\n */\nexport function unlit(): Transform {\n\treturn (doc: Document): void => {\n\t\tconst unlitExtension = doc.createExtension(KHRMaterialsUnlit) as KHRMaterialsUnlit;\n\t\tconst unlit = unlitExtension.createUnlit();\n\t\tdoc.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tmaterial.setExtension('KHR_materials_unlit', unlit);\n\t\t\t});\n\t};\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'unpartition';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UnpartitionOptions {}\nconst UNPARTITION_DEFAULTS: Required<UnpartitionOptions> = {};\n\n/**\n * Removes partitions from the binary payload of a glTF file, so that the asset\n * contains at most one (1) `.bin` {@link Buffer}. This process reverses the\n * changes from a {@link partition} transform.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n *\n * await document.transform(unpartition());\n *\n * document.getRoot().listBuffers(); // → [Buffer]\n * ```\n *\n * @category Transforms\n */\nexport function unpartition(_options: UnpartitionOptions = UNPARTITION_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...UNPARTITION_DEFAULTS, ..._options } as Required<UnpartitionOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\n\t\tconst buffer = document.getRoot().listBuffers()[0];\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listAccessors()\n\t\t\t.forEach((a) => a.setBuffer(buffer));\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.forEach((b, index) => (index > 0 ? b.dispose() : null));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import type { Accessor, Document, Primitive, Transform, vec3 } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'vertexColorSpace';\n\n/** Options for the {@link vertexColorSpace} function. */\nexport interface ColorSpaceOptions {\n\t/** Input color space of vertex colors, to be converted to \"srgb-linear\". Required. */\n\tinputColorSpace: 'srgb' | 'srgb-linear';\n}\n\n/**\n * Vertex color color space correction. The glTF format requires vertex colors to be stored\n * in Linear Rec. 709 D65 color space, and this function provides a way to correct vertex\n * colors that are (incorrectly) stored in sRGB.\n *\n * Example:\n *\n * ```typescript\n * import { vertexColorSpace } from '@gltf-transform/functions';\n *\n * await document.transform(\n *   vertexColorSpace({ inputColorSpace: 'srgb' })\n * );\n * ```\n *\n * @category Transforms\n */\nexport function vertexColorSpace(options: ColorSpaceOptions): Transform {\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\n\t\tconst inputColorSpace = (options.inputColorSpace || '').toLowerCase();\n\n\t\tif (inputColorSpace === 'srgb-linear') {\n\t\t\tlogger.info(`${NAME}: Vertex colors already linear. Skipping conversion.`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (inputColorSpace !== 'srgb') {\n\t\t\tlogger.error(\n\t\t\t\t`${NAME}: Unknown input color space \"${inputColorSpace}\" – should be \"srgb\" or ` +\n\t\t\t\t\t'\"srgb-linear\". Skipping conversion.',\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst converted = new Set<Accessor>();\n\n\t\t// Source: THREE.Color\n\t\tfunction sRGBToLinear(c: number): number {\n\t\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t\t}\n\n\t\tfunction updatePrimitive(primitive: Primitive): void {\n\t\t\tconst color = [0, 0, 0] as vec3;\n\t\t\tlet attribute: Accessor | null;\n\t\t\tfor (let i = 0; (attribute = primitive.getAttribute(`COLOR_${i}`)); i++) {\n\t\t\t\tif (converted.has(attribute)) continue;\n\n\t\t\t\tfor (let j = 0; j < attribute.getCount(); j++) {\n\t\t\t\t\tattribute.getElement(j, color);\n\t\t\t\t\tcolor[0] = sRGBToLinear(color[0]);\n\t\t\t\t\tcolor[1] = sRGBToLinear(color[1]);\n\t\t\t\t\tcolor[2] = sRGBToLinear(color[2]);\n\t\t\t\t\tattribute.setElement(j, color);\n\t\t\t\t}\n\n\t\t\t\tconverted.add(attribute);\n\t\t\t}\n\t\t}\n\n\t\tdoc.getRoot()\n\t\t\t.listMeshes()\n\t\t\t.forEach((mesh) => mesh.listPrimitives().forEach(updatePrimitive));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n"],"names":["createTransform","name","fn","Object","defineProperty","value","isTransformPending","context","initial","pending","initialIndex","stack","lastIndexOf","pendingIndex","rewriteTexture","source","target","srcImage","getImage","pixels","getPixels","getMimeType","i","shape","j","dstImage","savePixels","setImage","setMimeType","getGLPrimitiveCount","prim","indices","getIndices","position","getAttribute","getMode","Primitive","Mode","POINTS","getCount","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Error","SetMap","constructor","_map","Map","size","has","k","add","v","entry","get","Set","set","keys","formatBytes","bytes","decimals","dm","sizes","Math","floor","log","parseFloat","pow","toFixed","formatLong","x","toString","replace","formatDelta","a","b","prefix","suffix","abs","formatDeltaOp","deepListAttributes","accessors","attribute","listAttributes","push","listTargets","Array","from","deepSwapAttribute","src","dst","swap","shallowEqualsArray","length","remapAttribute","remap","dstCount","elementSize","getElementSize","srcCount","srcArray","getArray","dstArray","slice","setArray","createIndices","count","maxIndex","array","Uint16Array","Uint32Array","isUsed","prop","listParents","some","parent","propertyType","PropertyType","ROOT","createPrimGroupKey","document","Document","fromGraph","getGraph","material","getMaterial","materialIndex","getRoot","listMaterials","indexOf","mode","attributes","listSemantics","sort","map","semantic","componentType","getComponentType","join","targets","fitWithin","limit","maxWidth","maxHeight","srcWidth","srcHeight","dstWidth","dstHeight","NAME","CENTER_DEFAULTS","pivot","center","_options","options","_extends","doc","logger","getLogger","root","isAnimated","listAnimations","listSkins","listScenes","forEach","scene","index","debug","bbox","getBounds","max","min","offset","offsetNode","createNode","setTranslation","listChildren","child","addChild","t","getTranslation","listNodeScenes","node","visited","getParentNode","filter","Scene","clearNodeParent","scenes","setMatrix","getWorldMatrix","removeChild","invert","multiply","create","glMatrix.ARRAY_TYPE","scale","mul","cleanPrimitive","tmpIndicesArray","Infinity","il","getScalar","c","dstIndicesArray","DEDUP_DEFAULTS","keepUniqueNames","propertyTypes","ACCESSOR","MESH","TEXTURE","MATERIAL","SKIN","dedup","includes","dedupAccessors","dedupImages","dedupMaterials","dedupMeshes","dedupSkins","indicesMap","attributeMap","inputMap","outputMap","meshes","listMeshes","mesh","listPrimitives","primitive","accessor","hashAccessor","animation","sampler","listSamplers","getInput","getOutput","group","hash","getType","getNormalized","getSparse","hashSet","detectDuplicates","duplicates","aData","BufferUtils","toView","equals","total","hashGroup","values","input","output","dispose","refs","listAccessors","numMeshes","uniqueMeshes","srcKeyItems","createPrimitiveKey","meshKey","getName","targetMesh","textures","listTextures","bData","aSize","getSize","bSize","entries","property","Root","materials","modifierCache","skip","hasModifier","skins","listJoints","primKeyItems","cache","graph","visitedNodes","edgeQueue","listParentEdges","edge","pop","getAttributes","modifyChild","getChild","childEdge","listChildEdges","SRGB_PATTERN","getTextureColorSpace","texture","edges","isSRGB","isColor","test","listTextureInfo","results","textureEdge","getParent","TextureInfo","listTextureInfoByMaterial","traverse","textureInfoNames","Texture","ExtensionProperty","listTextureSlots","slots","EPS","PRUNE_DEFAULTS","NODE","CAMERA","PRIMITIVE","PRIMITIVE_TARGET","ANIMATION","BUFFER","keepLeaves","keepAttributes","keepIndices","keepSolidTextures","prune","counter","DisposeCounter","nodeTreeShake","listNodes","treeShake","skin","camera","listCameras","indirectTreeShake","materialPrims","required","listRequiredSemantics","unused","listUnusedSemantics","pruneAttributes","prims","shiftTexCoords","pruneIndices","anim","channel","listChannels","getTargetNode","samplers","pruneSolidTextures","listBuffers","buffer","empty","str","type","info","disposed","key","parents","p","AnimationChannel","listEdges","e","ptype","SCENE","isEmpty","setAttribute","setIndices","startsWith","semantics","textureNames","getTexCoord","match","textureInfoList","texCoordSet","texCoordList","texCoordMap","texCoord","semanticMap","textureInfo","setTexCoord","updatePrim","srcSemantics","srcSemantic","uv","dstSemantic","_texture$getSize","factor","getTextureFactor","ColorUtils","convertSRGBToLinear","getURI","applyMaterialFactor","Promise","all","slot","Material","setBaseColorFactor","getBaseColorFactor","setEmissiveFactor","mulVec3","getEmissiveFactor","setRoughnessFactor","getRoughnessFactor","setMetallicFactor","getMetallicFactor","len","sub","warn","maybeGetPixels","width","height","Tolerance","DEFAULT","TEXCOORD","COLOR","NORMAL","JOINTS","WEIGHTS","WELD_DEFAULTS","tolerance","toleranceNormal","overwrite","exhaustive","weld","expandWeldOptions","weldPrimitive","isPrimEmpty","transform","_indexPrimitive","_weldPrimitive","attr","numVertices","getBuffer","createAccessor","setBuffer","setType","Accessor","Type","SCALAR","srcPosition","srcIndices","uniqueIndices","attributeTolerance","getAttributeTolerance","formatKV","posA","posB","grid","cellSize","POSITION","getElement","getGridKey","srcMaxIndex","weldMap","writeMap","fill","srcVertexCount","dstVertexCount","cellKeys","getGridNeighborhoodKeys","cells","cellKey","neighbors","isBaseMatch","every","compareAttributes","isTargetMatch","dstIndicesCount","clone","srcAttr","swapAttributes","createArrayOfType","ArrayCtor","reorder","dstAttrArray","dstAttr","done","Uint8Array","el","setElement","_a","_b","getMinNormalized","getMaxNormalized","diff","bi","range","_semantic","kv","CELL_OFFSETS","_p","cellX","round","cellY","cellZ","PI","Number","EPSILON","transformPrimitive","matrix","skipIndices","_prim$getIndices","applyMatrix","normal","applyNormalMatrix","tangent","applyTangentMatrix","determinant","reversePrimitiveWindingOrder","Float32Array","vector","createVec3","transformMat4","setNormalized","normalMatrix","createMat3","fromMat4","transpose","transformMat3","normalizeVec3","v3","v4","createVec4","y","z","setScalar","transformMesh","srcPrim","isShared","dstPrim","srcTarget","dstTarget","flatMap","srcAttribute","PrimitiveTarget","dstAttribute","attributeSkipIndices","primSkipIndices","IDENTITY","clearNodeTransform","getMesh","localMatrix","getMatrix","MathUtils","eq","multiplyMat4","DEQUANTIZE_DEFAULTS","pattern","dequantize","dequantizePrimitive","createExtension","KHRMeshQuantization","dequantizeAttribute","getComponentSize","DRACO_DEFAULTS","method","encodeSpeed","decodeSpeed","quantizePosition","quantizeNormal","quantizeColor","quantizeTexcoord","quantizeGeneric","quantizationVolume","draco","KHRDracoMeshCompression","setRequired","setEncoderOptions","EncoderMethod","EDGEBREAKER","SEQUENTIAL","quantizationBits","TEX_COORD","GENERIC","FLATTEN_DEFAULTS","flatten","joints","joint","animated","getTargetPath","hasJointParent","hasAnimatedParent","inspect","animations","sceneBounds","rootName","bboxMin","toPrecision","bboxMax","properties","instances","glPrimitives","verts","meshIndices","meshAccessors","accessorToTypeLabel","targ","byteLength","modes","MeshPrimitiveModeLabels","primitives","vertices","extensions","listExtensions","ref","alphaMode","getAlphaMode","doubleSided","getDoubleSided","resolution","ImageUtils","compression","container","readKTX","dfd","dataFormatDescriptor","colorModel","KHR_DF_MODEL_ETC1S","KHR_DF_MODEL_UASTC","uri","mimeType","gpuSize","getVRAMByteLength","minTime","maxTime","getMin","getMax","keyframes","channels","duration","NumericTypeLabels","Int32Array","Int16Array","Int8Array","base","INSTANCE_DEFAULTS","instance","batchExtension","EXTMeshGPUInstancing","numBatches","numInstances","meshInstances","modifiedNodes","nodes","getSkin","hasVolume","hasScale","batch","createBatch","batchTranslation","batchRotation","batchScale","batchNode","setMesh","setExtension","needsTranslation","needsRotation","needsScale","r","s","getWorldTranslation","getWorldRotation","getWorldScale","pruneUnusedNodes","listProperties","unusedNodes","getCamera","nodeParent","getExtension","createInstancedMesh","JOIN_PRIMITIVE_DEFAULTS","skipValidation","joinPrimitives","templatePrim","remapList","indicesList","_getOrCreateIndices","undefined","createPrimitive","setMode","setMaterial","tplAttribute","AttributeArray","ComponentTypeToTypedArray","dstIndices","dstNextIndex","primIndex","indicesArray","primStartIndex","primNextIndex","_matrix","JOIN_DEFAULTS","keepMeshes","keepNamed","_joinLevel","groups","children","nodeIndex","dequantizeTransformableAttributes","isNamed","primMeshes","primNodes","dstNode","dstMesh","joinGroups","srcNodes","isSharedMesh","dstMatrix","primNode","primMesh","removePrimitive","hasSharedAttributes","_deepClonePrimitive","addPrimitive","listTextureChannels","mask","getTextureChannelMask","TextureChannel","R","G","B","A","AlphaMode","OPAQUE","REORDER_DEFAULTS","encoder","ready","plan","createLayoutPlan","indicesToAttributes","unique","reorderMesh","indicesToMode","attributesToPrimitives","sortPrimitiveWeights","isFinite","vertexCount","setCount","srcWeights","dstWeights","srcJoints","dstJoints","getVertexArray","setVertexArray","weights","normalizePrimitiveWeights","isNormalizeSafe","templateAttribute","templateArray","normalized","normalizedComponentType","delta","decodeNormalizedInt","weightsSum","sum","intValue","encodeNormalizedInt","vertexIndex","normList","typeList","SIGNED_INT","TRANSLATION","ROTATION","SCALE","TargetPath","TRS_CHANNELS","QUANTIZE_DEFAULTS","quantizeWeight","normalizeWeights","quantize","patternTargets","nodeTransform","getNodeTransform","expandBounds","getPositionQuantizationVolume","transformMeshParents","transformMeshMaterials","quantizePrimitive","isTarget","bits","ctor","getQuantizationSettings","fromTransform","fromScaling","quantizeAttribute","volume","transformMatrix","Node","animChannels","isParentNode","setSkin","transformSkin","transformBatch","targetNode","setTargetNode","nodeMatrix","inverseBindMatrices","getInverseBindMatrices","ibm","setInverseBindMatrices","_batch$getAttribute","_batch$getAttribute2","_batch$getAttribute3","instanceTranslation","instanceRotation","instanceScale","tpl","T_IDENTITY","R_IDENTITY","S_IDENTITY","instanceMatrix","compose","decompose","getThicknessFactor","setThicknessFactor","signBits","quantBits","storageBits","BYTES_PER_ELEMENT","lo","hi","di","clamp","sign","setSparse","positions","relativePositions","flatBounds","relMin","relMax","tmpMin","tmpMax","bboxes","result","fromRotationTranslationScale","MESHOPT_DEFAULTS","level","meshopt","EXTMeshoptCompression","QUANTIZE","FILTER","METALROUGH_DEFAULTS","metalRough","extensionsUsed","listExtensionsUsed","ext","extensionName","iorExtension","KHRMaterialsIOR","specExtension","KHRMaterialsSpecular","specGlossExtension","KHRMaterialsPBRSpecularGlossiness","inputTextures","specGloss","specular","createSpecular","setSpecularFactor","setSpecularColorFactor","getSpecularFactor","getSpecularGlossinessTexture","getBaseColorTexture","getMetallicRoughnessTexture","getDiffuseFactor","createIOR","setIOR","diffuseTexture","getDiffuseTexture","setBaseColorTexture","getBaseColorTextureInfo","copy","getDiffuseTextureInfo","sgTexture","sgTextureInfo","getSpecularGlossinessTextureInfo","specularTexture","createTexture","setSpecularTexture","setSpecularColorTexture","getSpecularTextureInfo","getSpecularColorTextureInfo","glossinessFactor","getGlossinessFactor","metalRoughTexture","roughness","setMetallicRoughnessTexture","getMetallicRoughnessTextureInfo","tex","UNWELD_DEFAULTS","unweld","unweldAttribute","NORMALS_DEFAULTS","normals","modified","faceNormal","computeNormal","n","normalize","PALETTE_DEFAULTS","blockSize","palette","materialKeys","materialKeyMap","materialProps","baseColor","emissive","metallicRoughness","encodeRGBA","encodeFloat","metallic","keyCount","w","ceilPowerOfTwo","h","padWidth","paletteTexturePixels","skipProps","props","baseColorTexture","emissiveTexture","metallicRoughnessTexture","setURI","ndarray","visitedKeys","materialIndices","paletteMaterials","nextIndex","convertLinearToSRGB","writeBlock","image","nextPaletteMaterialIndex","srcMaterial","blockIndex","baseUV","padUV","dstMaterial","padStart","setName","setMinFilter","MinFilter","NEAREST","setMagFilter","MagFilter","setEmissiveTexture","getEmissiveTextureInfo","hex","ceil","LN2","PARTITION_DEFAULTS","partition","partitionMeshes","partitionAnimations","existingURIs","meshIndex","isArray","createBuffer","createBufferURI","primTarget","animIndex","basename","existing","EMPTY_ARRAY","RESAMPLE_DEFAULTS","resolve","resample","resampleDebug","accessorsVisited","srcAccessorCount","samplerTargetPaths","getSampler","samplerInterpolation","getInterpolation","tmpTimes","toFloat32Array","tmpValues","srcTimes","srcValues","dstTimes","fromFloat32Array","byteOffset","dstValues","setInput","setOutput","used","dstAccessorCount","ComponentType","FLOAT","TypedArray","SEQUENCE_DEFAULTS","fps","sequence","sequenceNodes","createAnimation","animBuffer","inputArray","outputArray","VEC3","createAnimationSampler","setInterpolation","AnimationSampler","Interpolation","STEP","createAnimationChannel","setTargetPath","setSampler","addSampler","addChannel","SIMPLIFY_DEFAULTS","ratio","error","lockBorder","simplify","simplifier","simplifyPrimitive","positionArray","UNSIGNED_INT","targetCount","compactMesh","SPARSE_DEFAULTS","sparse","modifiedCount","nonZeroCount","TEXTURE_COMPRESS_SUPPORTED_FORMATS","SUPPORTED_MIME_TYPES","TextureResizeFilter","TEXTURE_COMPRESS_DEFAULTS","resizeFilter","LANCZOS3","formats","quality","effort","lossless","nearLossless","textureCompress","targetFormat","patternRe","formatsRe","slotsRe","textureIndex","textureLabel","srcFormat","getFormat","dstFormat","srcByteLength","compressTexture","dstByteLength","flag","webpExtension","EXTTextureWebP","avifExtension","EXTTextureAVIF","srcMimeType","dstMimeType","_encodeWithSharp","_encodeWithNdarrayPixels","resize","srcExtension","mimeTypeToExtension","dstExtension","dstURI","RegExp","_srcMimeType","encoderOptions","getFormatFromMimeType","toFormat","fit","kernel","withoutEnlargement","toBuffer","srcPixels","dstSize","dstPixels","lanczos3","lanczos2","format","split","srcMax","dstMax","TANGENTS_DEFAULTS","tangents","generateTangents","attributeIDs","tangentCache","meshName","meshPrimitives","filterPrimitive","texcoordSemantic","getNormalTexcoord","texcoord","positionID","uuid","normalID","texcoordID","prevTangent","attributeHash","tangentBuffer","tangentArray","normalTextureInfo","getNormalTextureInfo","unlit","unlitExtension","KHRMaterialsUnlit","createUnlit","UNPARTITION_DEFAULTS","unpartition","vertexColorSpace","inputColorSpace","toLowerCase","converted","sRGBToLinear","updatePrimitive","color"],"mappings":"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AAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAClB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAClB,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAA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C;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAClB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAClB,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC;AACA,EAAE,OAAO,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC/E,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,UAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;AACpC,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAClB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;AACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAClB;AACA,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACf,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACf,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACf,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACtD,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACtD,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACtD,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACtD,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,G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"}