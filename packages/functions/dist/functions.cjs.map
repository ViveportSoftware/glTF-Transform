{"version":3,"file":"functions.cjs","sources":["../src/utils.ts","../src/center.ts","../src/list-node-scenes.ts","../src/clear-node-parent.ts","../../../node_modules/gl-matrix/esm/common.js","../../../node_modules/gl-matrix/esm/mat4.js","../../../node_modules/gl-matrix/esm/mat3.js","../../../node_modules/gl-matrix/esm/vec3.js","../../../node_modules/gl-matrix/esm/vec4.js","../src/clean-primitive.ts","../src/dedup.ts","../src/get-texture-color-space.ts","../src/list-texture-info.ts","../src/list-texture-slots.ts","../src/prune.ts","../src/weld.ts","../src/transform-primitive.ts","../src/transform-mesh.ts","../src/clear-node-transform.ts","../src/dequantize.ts","../src/draco.ts","../src/flatten.ts","../src/inspect.ts","../src/instance.ts","../src/join-primitives.ts","../src/join.ts","../src/list-texture-channels.ts","../src/reorder.ts","../src/sort-primitive-weights.ts","../src/quantize.ts","../src/meshopt.ts","../src/metal-rough.ts","../src/unweld.ts","../src/normals.ts","../src/palette.ts","../src/partition.ts","../../../node_modules/keyframe-resample/dist/keyframe-resample-browser.modern.js","../src/resample.ts","../src/sequence.ts","../src/simplify.ts","../src/sparse.ts","../src/texture-compress.ts","../src/tangents.ts","../src/unlit.ts","../src/unpartition.ts","../src/vertex-color-space.ts"],"sourcesContent":["import type { NdArray } from 'ndarray';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport {\n\tAccessor,\n\tDocument,\n\tPrimitive,\n\tProperty,\n\tPropertyType,\n\tTexture,\n\tTransform,\n\tTransformContext,\n\tvec2,\n} from '@gltf-transform/core';\n\n/**\n * Prepares a function used in an {@link Document.transform} pipeline. Use of this wrapper is\n * optional, and plain functions may be used in transform pipelines just as well. The wrapper is\n * used internally so earlier pipeline stages can detect and optimize based on later stages.\n * @hidden\n */\nexport function createTransform(name: string, fn: Transform): Transform {\n\tObject.defineProperty(fn, 'name', { value: name });\n\treturn fn;\n}\n\n/** @hidden */\nexport function isTransformPending(context: TransformContext | undefined, initial: string, pending: string): boolean {\n\tif (!context) return false;\n\tconst initialIndex = context.stack.lastIndexOf(initial);\n\tconst pendingIndex = context.stack.lastIndexOf(pending);\n\treturn initialIndex < pendingIndex;\n}\n\n/**\n * Maps pixels from source to target textures, with a per-pixel callback.\n * @hidden\n */\nexport async function rewriteTexture(\n\tsource: Texture,\n\ttarget: Texture,\n\tfn: (pixels: NdArray, i: number, j: number) => void,\n): Promise<Texture | null> {\n\tif (!source) return null;\n\n\tconst srcImage = source.getImage();\n\tif (!srcImage) return null;\n\n\tconst pixels = await getPixels(srcImage, source.getMimeType());\n\n\tfor (let i = 0; i < pixels.shape[0]; ++i) {\n\t\tfor (let j = 0; j < pixels.shape[1]; ++j) {\n\t\t\tfn(pixels, i, j);\n\t\t}\n\t}\n\n\tconst dstImage = await savePixels(pixels, 'image/png');\n\treturn target.setImage(dstImage).setMimeType('image/png');\n}\n\n/** @hidden */\nexport function getGLPrimitiveCount(prim: Primitive): number {\n\tconst indices = prim.getIndices();\n\tconst position = prim.getAttribute('POSITION')!;\n\n\t// Reference: https://www.khronos.org/opengl/wiki/Primitive\n\tswitch (prim.getMode()) {\n\t\tcase Primitive.Mode.POINTS:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINES:\n\t\t\treturn indices ? indices.getCount() / 2 : position.getCount() / 2;\n\t\tcase Primitive.Mode.LINE_LOOP:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINE_STRIP:\n\t\t\treturn position.getCount() - 1;\n\t\tcase Primitive.Mode.TRIANGLES:\n\t\t\treturn indices ? indices.getCount() / 3 : position.getCount() / 3;\n\t\tcase Primitive.Mode.TRIANGLE_STRIP:\n\t\tcase Primitive.Mode.TRIANGLE_FAN:\n\t\t\treturn position.getCount() - 2;\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected mode: ' + prim.getMode());\n\t}\n}\n\n/** @hidden */\nexport class SetMap<K, V> {\n\tprivate _map = new Map<K, Set<V>>();\n\tpublic get size(): number {\n\t\treturn this._map.size;\n\t}\n\tpublic has(k: K): boolean {\n\t\treturn this._map.has(k);\n\t}\n\tpublic add(k: K, v: V): this {\n\t\tlet entry = this._map.get(k);\n\t\tif (!entry) {\n\t\t\tentry = new Set();\n\t\t\tthis._map.set(k, entry);\n\t\t}\n\t\tentry.add(v);\n\t\treturn this;\n\t}\n\tpublic get(k: K): Set<V> {\n\t\treturn this._map.get(k) || new Set();\n\t}\n\tpublic keys(): Iterable<K> {\n\t\treturn this._map.keys();\n\t}\n}\n\n/** @hidden */\nexport function formatBytes(bytes: number, decimals = 2): string {\n\tif (bytes === 0) return '0 Bytes';\n\n\tconst k = 1000;\n\tconst dm = decimals < 0 ? 0 : decimals;\n\tconst sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\n\n\treturn parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n/** @hidden */\nexport function formatLong(x: number): string {\n\treturn x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\n/** @hidden */\nexport function formatDelta(a: number, b: number, decimals = 2): string {\n\tconst prefix = a > b ? '–' : '+';\n\tconst suffix = '%';\n\treturn prefix + ((Math.abs(a - b) / a) * 100).toFixed(decimals) + suffix;\n}\n\n/** @hidden */\nexport function formatDeltaOp(a: number, b: number) {\n\treturn `${formatLong(a)} → ${formatLong(b)} (${formatDelta(a, b)})`;\n}\n\n/**\n * Returns a list of all unique vertex attributes on the given primitive and\n * its morph targets.\n * @hidden\n */\nexport function deepListAttributes(prim: Primitive): Accessor[] {\n\tconst accessors: Accessor[] = [];\n\n\tfor (const attribute of prim.listAttributes()) {\n\t\taccessors.push(attribute);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const attribute of target.listAttributes()) {\n\t\t\taccessors.push(attribute);\n\t\t}\n\t}\n\n\treturn Array.from(new Set(accessors));\n}\n\n/** @hidden */\nexport function deepSwapAttribute(prim: Primitive, src: Accessor, dst: Accessor): void {\n\tprim.swap(src, dst);\n\tfor (const target of prim.listTargets()) {\n\t\ttarget.swap(src, dst);\n\t}\n}\n\n/** @hidden */\nexport function shallowEqualsArray(a: ArrayLike<unknown> | null, b: ArrayLike<unknown> | null) {\n\tif (a == null && b == null) return true;\n\tif (a == null || b == null) return false;\n\tif (a.length !== b.length) return false;\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) return false;\n\t}\n\treturn true;\n}\n\n/** @hidden */\nexport function remapAttribute(attribute: Accessor, remap: Uint32Array, dstCount: number) {\n\tconst elementSize = attribute.getElementSize();\n\tconst srcCount = attribute.getCount();\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = srcArray.slice(0, dstCount * elementSize);\n\n\tfor (let i = 0; i < srcCount; i++) {\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tdstArray[remap[i] * elementSize + j] = srcArray[i * elementSize + j];\n\t\t}\n\t}\n\n\tattribute.setArray(dstArray);\n}\n\n/** @hidden */\nexport function createIndices(count: number, maxIndex = count): Uint16Array | Uint32Array {\n\tconst array = maxIndex <= 65534 ? new Uint16Array(count) : new Uint32Array(count);\n\tfor (let i = 0; i < array.length; i++) array[i] = i;\n\treturn array;\n}\n\n/** @hidden */\nexport function isUsed(prop: Property): boolean {\n\treturn prop.listParents().some((parent) => parent.propertyType !== PropertyType.ROOT);\n}\n\n/**\n * Creates a unique key associated with the structure and draw call characteristics of\n * a {@link Primitive}, independent of its vertex content. Helper method, used to\n * identify candidate Primitives for joining.\n * @hidden\n */\nexport function createPrimGroupKey(prim: Primitive): string {\n\tconst document = Document.fromGraph(prim.getGraph())!;\n\tconst material = prim.getMaterial();\n\tconst materialIndex = document.getRoot().listMaterials().indexOf(material!);\n\tconst mode = prim.getMode();\n\tconst indices = !!prim.getIndices();\n\n\tconst attributes = prim\n\t\t.listSemantics()\n\t\t.sort()\n\t\t.map((semantic) => {\n\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\tconst elementSize = attribute.getElementSize();\n\t\t\tconst componentType = attribute.getComponentType();\n\t\t\treturn `${semantic}:${elementSize}:${componentType}`;\n\t\t})\n\t\t.join('+');\n\n\tconst targets = prim\n\t\t.listTargets()\n\t\t.map((target) => {\n\t\t\treturn target\n\t\t\t\t.listSemantics()\n\t\t\t\t.sort()\n\t\t\t\t.map((semantic) => {\n\t\t\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\t\t\tconst elementSize = attribute.getElementSize();\n\t\t\t\t\tconst componentType = attribute.getComponentType();\n\t\t\t\t\treturn `${semantic}:${elementSize}:${componentType}`;\n\t\t\t\t})\n\t\t\t\t.join('+');\n\t\t})\n\t\t.join('~');\n\n\treturn `${materialIndex}|${mode}|${indices}|${attributes}|${targets}`;\n}\n\n/** @hidden */\nexport function fitWithin(size: vec2, limit: vec2): vec2 {\n\tconst [maxWidth, maxHeight] = limit;\n\tconst [srcWidth, srcHeight] = size;\n\n\tif (srcWidth <= maxWidth && srcHeight <= maxHeight) return size;\n\n\tlet dstWidth = srcWidth;\n\tlet dstHeight = srcHeight;\n\n\tif (dstWidth > maxWidth) {\n\t\tdstHeight = Math.floor(dstHeight * (maxWidth / dstWidth));\n\t\tdstWidth = maxWidth;\n\t}\n\n\tif (dstHeight > maxHeight) {\n\t\tdstWidth = Math.floor(dstWidth * (maxHeight / dstHeight));\n\t\tdstHeight = maxHeight;\n\t}\n\n\treturn [dstWidth, dstHeight];\n}\n","import type { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { getBounds } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'center';\n\n/** Options for the {@link center} function. */\nexport interface CenterOptions {\n\t/** Location on the model to be considered the pivot, and recentered at the origin. */\n\tpivot?: 'center' | 'above' | 'below' | vec3;\n}\n\nconst CENTER_DEFAULTS: Required<CenterOptions> = { pivot: 'center' };\n\n/**\n * Centers the {@link Scene} at the origin, or above/below it. Transformations from animation,\n * skinning, and morph targets are not taken into account.\n *\n * Example:\n *\n * ```ts\n * await document.transform(center({pivot: 'below'}));\n * ```\n *\n * @category Transforms\n */\nexport function center(_options: CenterOptions = CENTER_DEFAULTS): Transform {\n\tconst options = { ...CENTER_DEFAULTS, ..._options } as Required<CenterOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst isAnimated = root.listAnimations().length > 0 || root.listSkins().length > 0;\n\n\t\tdoc.getRoot()\n\t\t\t.listScenes()\n\t\t\t.forEach((scene, index) => {\n\t\t\t\tlogger.debug(`${NAME}: Scene ${index + 1} / ${root.listScenes().length}.`);\n\n\t\t\t\tlet pivot: vec3;\n\t\t\t\tif (typeof options.pivot === 'string') {\n\t\t\t\t\tconst bbox = getBounds(scene);\n\t\t\t\t\tpivot = [\n\t\t\t\t\t\t(bbox.max[0] - bbox.min[0]) / 2 + bbox.min[0],\n\t\t\t\t\t\t(bbox.max[1] - bbox.min[1]) / 2 + bbox.min[1],\n\t\t\t\t\t\t(bbox.max[2] - bbox.min[2]) / 2 + bbox.min[2],\n\t\t\t\t\t];\n\t\t\t\t\tif (options.pivot === 'above') pivot[1] = bbox.max[1];\n\t\t\t\t\tif (options.pivot === 'below') pivot[1] = bbox.min[1];\n\t\t\t\t} else {\n\t\t\t\t\tpivot = options.pivot as vec3;\n\t\t\t\t}\n\n\t\t\t\tlogger.debug(`${NAME}: Pivot \"${pivot.join(', ')}\".`);\n\n\t\t\t\tconst offset: vec3 = [-1 * pivot[0], -1 * pivot[1], -1 * pivot[2]];\n\n\t\t\t\tif (isAnimated) {\n\t\t\t\t\tlogger.debug(`${NAME}: Model contains animation or skin. Adding a wrapper node.`);\n\t\t\t\t\tconst offsetNode = doc.createNode('Pivot').setTranslation(offset);\n\t\t\t\t\tscene.listChildren().forEach((child) => offsetNode.addChild(child));\n\t\t\t\t\tscene.addChild(offsetNode);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug(`${NAME}: Skipping wrapper, offsetting all root nodes.`);\n\t\t\t\t\tscene.listChildren().forEach((child) => {\n\t\t\t\t\t\tconst t = child.getTranslation();\n\t\t\t\t\t\tchild.setTranslation([t[0] + offset[0], t[1] + offset[1], t[2] + offset[2]]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { Node, Scene } from '@gltf-transform/core';\n\n/**\n * Finds the parent {@link Scene Scenes} associated with the given {@link Node}.\n * In most cases a Node is associated with only one Scene, but it is possible\n * for a Node to be located in two or more Scenes, or none at all.\n *\n * Example:\n *\n * ```typescript\n * import { listNodeScenes } from '@gltf-transform/functions';\n *\n * const node = document.getRoot().listNodes()\n *  .find((node) => node.getName() === 'MyNode');\n *\n * const scenes = listNodeScenes(node);\n * ```\n */\nexport function listNodeScenes(node: Node): Scene[] {\n\tconst visited = new Set<Node>();\n\n\tlet child = node;\n\tlet parent: Node | null;\n\n\twhile ((parent = child.getParentNode() as Node | null)) {\n\t\tif (visited.has(parent)) {\n\t\t\tthrow new Error('Circular dependency in scene graph.');\n\t\t}\n\t\tvisited.add(parent);\n\t\tchild = parent;\n\t}\n\n\treturn child.listParents().filter((parent) => parent instanceof Scene) as Scene[];\n}\n","import type { Node } from '@gltf-transform/core';\nimport { listNodeScenes } from './list-node-scenes.js';\n\n/**\n * Clears the parent of the given {@link Node}, leaving it attached\n * directly to its {@link Scene}. Inherited transforms will be applied\n * to the Node. This operation changes the Node's local transform,\n * but leaves its world transform unchanged.\n *\n * Example:\n *\n * ```typescript\n * import { clearNodeParent } from '@gltf-transform/functions';\n *\n * scene.traverse((node) => { ... }); // Scene → … → Node\n *\n * clearNodeParent(node);\n *\n * scene.traverse((node) => { ... }); // Scene → Node\n * ```\n *\n * To clear _all_ transforms of a Node, first clear its inherited transforms with\n * {@link clearNodeParent}, then clear the local transform with {@link clearNodeTransform}.\n */\nexport function clearNodeParent(node: Node): Node {\n\tconst scenes = listNodeScenes(node);\n\tconst parent = node.getParentNode();\n\n\tif (!parent) return node;\n\n\t// Apply inherited transforms to local matrix. Skinned meshes are not affected\n\t// by the node parent's transform, and can be ignored. Updates to IBMs and TRS\n\t// animations are out of scope in this context.\n\tnode.setMatrix(node.getWorldMatrix());\n\n\t// Add to Scene roots.\n\tparent.removeChild(node);\n\tfor (const scene of scenes) scene.addChild(node);\n\n\treturn node;\n}\n","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import type { Primitive } from '@gltf-transform/core';\nimport { createIndices } from './utils.js';\n\n/**\n * Removes degenerate triangles from the {@link Primitive}. Any triangle containing fewer than\n * three different vertex indices is considered degenerate. This method does not merge/weld\n * different vertices containing identical data — use {@link weld} first for that purpose.\n *\n * @internal\n */\nexport function cleanPrimitive(prim: Primitive): void {\n\tconst indices = prim.getIndices();\n\tif (!indices) return;\n\n\tconst tmpIndicesArray = [];\n\tlet maxIndex = -Infinity;\n\n\tfor (let i = 0, il = indices.getCount(); i < il; i += 3) {\n\t\tconst a = indices.getScalar(i);\n\t\tconst b = indices.getScalar(i + 1);\n\t\tconst c = indices.getScalar(i + 2);\n\n\t\tif (a === b || a === c || b === c) continue;\n\n\t\ttmpIndicesArray.push(a, b, c);\n\t\tmaxIndex = Math.max(maxIndex, a, b, c);\n\t}\n\n\tconst dstIndicesArray = createIndices(tmpIndicesArray.length, maxIndex);\n\tdstIndicesArray.set(tmpIndicesArray);\n\tindices.setArray(dstIndicesArray);\n}\n","import {\n\tAccessor,\n\tBufferUtils,\n\tDocument,\n\tMaterial,\n\tMesh,\n\tPrimitive,\n\tPrimitiveTarget,\n\tProperty,\n\tPropertyType,\n\tRoot,\n\tSkin,\n\tTexture,\n\tTransform,\n} from '@gltf-transform/core';\nimport { createTransform, shallowEqualsArray } from './utils.js';\n\nconst NAME = 'dedup';\n\nexport interface DedupOptions {\n\t/** Keep properties with unique names, even if they are duplicates. */\n\tkeepUniqueNames?: boolean;\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes?: string[];\n}\n\nconst DEDUP_DEFAULTS: Required<DedupOptions> = {\n\tkeepUniqueNames: false,\n\tpropertyTypes: [\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.MESH,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.MATERIAL,\n\t\tPropertyType.SKIN,\n\t],\n};\n\n/**\n * Removes duplicate {@link Accessor}, {@link Mesh}, {@link Texture}, and {@link Material}\n * properties. Partially based on a\n * [gist by mattdesl](https://gist.github.com/mattdesl/aea40285e2d73916b6b9101b36d84da8). Only\n * accessors in mesh primitives, morph targets, and animation samplers are processed.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listMeshes(); // → [Mesh, Mesh, Mesh]\n *\n * await document.transform(dedup({propertyTypes: [PropertyType.MESH]}));\n *\n * document.getRoot().listMeshes(); // → [Mesh]\n * ```\n *\n * @category Transforms\n */\nexport function dedup(_options: DedupOptions = DEDUP_DEFAULTS): Transform {\n\tconst options = { ...DEDUP_DEFAULTS, ..._options } as Required<DedupOptions>;\n\n\tconst propertyTypes = new Set(options.propertyTypes);\n\tfor (const propertyType of options.propertyTypes) {\n\t\tif (!DEDUP_DEFAULTS.propertyTypes.includes(propertyType)) {\n\t\t\tthrow new Error(`${NAME}: Unsupported deduplication on type \"${propertyType}\".`);\n\t\t}\n\t}\n\n\treturn createTransform(NAME, (document: Document): void => {\n\t\tconst logger = document.getLogger();\n\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) dedupAccessors(document);\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) dedupImages(document, options);\n\t\tif (propertyTypes.has(PropertyType.MATERIAL)) dedupMaterials(document, options);\n\t\tif (propertyTypes.has(PropertyType.MESH)) dedupMeshes(document, options);\n\t\tif (propertyTypes.has(PropertyType.SKIN)) dedupSkins(document, options);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction dedupAccessors(document: Document): void {\n\tconst logger = document.getLogger();\n\n\t// Find all accessors used for mesh and animation data.\n\tconst indicesMap = new Map<string, Set<Accessor>>();\n\tconst attributeMap = new Map<string, Set<Accessor>>();\n\tconst inputMap = new Map<string, Set<Accessor>>();\n\tconst outputMap = new Map<string, Set<Accessor>>();\n\n\tconst meshes = document.getRoot().listMeshes();\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => hashAccessor(accessor, attributeMap));\n\t\t\thashAccessor(primitive.getIndices(), indicesMap);\n\t\t});\n\t});\n\n\tfor (const animation of document.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\thashAccessor(sampler.getInput(), inputMap);\n\t\t\thashAccessor(sampler.getOutput(), outputMap);\n\t\t}\n\t}\n\n\t// Add accessor to the appropriate hash group. Hashes are _non-unique_,\n\t// intended to quickly compare everything accept the underlying array.\n\tfunction hashAccessor(accessor: Accessor | null, group: Map<string, Set<Accessor>>): void {\n\t\tif (!accessor) return;\n\n\t\tconst hash = [\n\t\t\taccessor.getCount(),\n\t\t\taccessor.getType(),\n\t\t\taccessor.getComponentType(),\n\t\t\taccessor.getNormalized(),\n\t\t\taccessor.getSparse(),\n\t\t].join(':');\n\n\t\tlet hashSet = group.get(hash);\n\t\tif (!hashSet) group.set(hash, (hashSet = new Set<Accessor>()));\n\t\thashSet.add(accessor);\n\t}\n\n\t// Find duplicate accessors of a given type.\n\tfunction detectDuplicates(accessors: Accessor[], duplicates: Map<Accessor, Accessor>): void {\n\t\tfor (let i = 0; i < accessors.length; i++) {\n\t\t\tconst a = accessors[i];\n\t\t\tconst aData = BufferUtils.toView(a.getArray()!);\n\n\t\t\tif (duplicates.has(a)) continue;\n\n\t\t\tfor (let j = i + 1; j < accessors.length; j++) {\n\t\t\t\tconst b = accessors[j];\n\n\t\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t\t// Just compare the arrays — everything else was covered by the\n\t\t\t\t// hash. Comparing uint8 views is faster than comparing the\n\t\t\t\t// original typed arrays.\n\t\t\t\tif (BufferUtils.equals(aData, BufferUtils.toView(b.getArray()!))) {\n\t\t\t\t\tduplicates.set(b, a);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tlet total = 0;\n\tconst duplicates = new Map<Accessor, Accessor>();\n\tfor (const group of [attributeMap, indicesMap, inputMap, outputMap]) {\n\t\tfor (const hashGroup of group.values()) {\n\t\t\ttotal += hashGroup.size;\n\t\t\tdetectDuplicates(Array.from(hashGroup), duplicates);\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${total} accessors.`);\n\n\t// Dissolve duplicate vertex attributes and indices.\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => {\n\t\t\t\tif (duplicates.has(accessor)) {\n\t\t\t\t\tprimitive.swap(accessor, duplicates.get(accessor) as Accessor);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst indices = primitive.getIndices();\n\t\t\tif (indices && duplicates.has(indices)) {\n\t\t\t\tprimitive.swap(indices, duplicates.get(indices) as Accessor);\n\t\t\t}\n\t\t});\n\t});\n\n\t// Dissolve duplicate animation sampler inputs and outputs.\n\tfor (const animation of document.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (input && duplicates.has(input)) {\n\t\t\t\tsampler.swap(input, duplicates.get(input) as Accessor);\n\t\t\t}\n\t\t\tif (output && duplicates.has(output)) {\n\t\t\t\tsampler.swap(output, duplicates.get(output) as Accessor);\n\t\t\t}\n\t\t}\n\t}\n\n\tArray.from(duplicates.keys()).forEach((accessor) => accessor.dispose());\n}\n\nfunction dedupMeshes(document: Document, options: Required<DedupOptions>): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\n\t// Create Reference -> ID lookup table.\n\tconst refs = new Map<Accessor | Material, number>();\n\troot.listAccessors().forEach((accessor, index) => refs.set(accessor, index));\n\troot.listMaterials().forEach((material, index) => refs.set(material, index));\n\n\t// For each mesh, create a hashkey.\n\tconst numMeshes = root.listMeshes().length;\n\tconst uniqueMeshes = new Map<string, Mesh>();\n\tfor (const src of root.listMeshes()) {\n\t\t// For each mesh, create a hashkey.\n\t\tconst srcKeyItems = [];\n\t\tfor (const prim of src.listPrimitives()) {\n\t\t\tsrcKeyItems.push(createPrimitiveKey(prim, refs));\n\t\t}\n\n\t\t// If another mesh exists with the same key, replace all instances with that, and dispose\n\t\t// of the duplicate. If not, just cache it.\n\t\tlet meshKey = '';\n\t\tif (options.keepUniqueNames) meshKey += src.getName() + ';';\n\t\tmeshKey += srcKeyItems.join(';');\n\n\t\tif (uniqueMeshes.has(meshKey)) {\n\t\t\tconst targetMesh = uniqueMeshes.get(meshKey)!;\n\t\t\tsrc.listParents().forEach((parent) => {\n\t\t\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\t\t\tparent.swap(src, targetMesh);\n\t\t\t\t}\n\t\t\t});\n\t\t\tsrc.dispose();\n\t\t} else {\n\t\t\tuniqueMeshes.set(meshKey, src);\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${numMeshes - uniqueMeshes.size} of ${numMeshes} meshes.`);\n}\n\nfunction dedupImages(document: Document, options: Required<DedupOptions>): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\tconst textures = root.listTextures();\n\tconst duplicates: Map<Texture, Texture> = new Map();\n\n\t// Compare each texture to every other texture — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < textures.length; i++) {\n\t\tconst a = textures[i];\n\t\tconst aData = a.getImage();\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = i + 1; j < textures.length; j++) {\n\t\t\tconst b = textures[j];\n\t\t\tconst bData = b.getImage();\n\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t// URIs are intentionally not compared.\n\t\t\tif (a.getMimeType() !== b.getMimeType()) continue;\n\t\t\tif (options.keepUniqueNames && a.getName() !== b.getName()) continue;\n\n\t\t\tconst aSize = a.getSize();\n\t\t\tconst bSize = b.getSize();\n\t\t\tif (!aSize || !bSize) continue;\n\t\t\tif (aSize[0] !== bSize[0]) continue;\n\t\t\tif (aSize[1] !== bSize[1]) continue;\n\t\t\tif (!aData || !bData) continue;\n\t\t\tif (BufferUtils.equals(aData, bData)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${root.listTextures().length} textures.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\nfunction dedupMaterials(document: Document, options: Required<DedupOptions>): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\tconst materials = root.listMaterials();\n\tconst duplicates = new Map<Material, Material>();\n\tconst modifierCache = new Map<Material, boolean>();\n\tconst skip = new Set<string>();\n\n\tif (!options.keepUniqueNames) {\n\t\tskip.add('name');\n\t}\n\n\t// Compare each material to every other material — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < materials.length; i++) {\n\t\tconst a = materials[i];\n\n\t\tif (duplicates.has(a)) continue;\n\t\tif (hasModifier(a, modifierCache)) continue;\n\n\t\tfor (let j = i + 1; j < materials.length; j++) {\n\t\t\tconst b = materials[j];\n\n\t\t\tif (duplicates.has(b)) continue;\n\t\t\tif (hasModifier(b, modifierCache)) continue;\n\n\t\t\tif (a.equals(b, skip)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${materials.length} materials.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\nfunction dedupSkins(document: Document, options: Required<DedupOptions>): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\tconst skins = root.listSkins();\n\tconst duplicates = new Map<Skin, Skin>();\n\tconst skip = new Set(['joints']);\n\n\tif (!options.keepUniqueNames) {\n\t\tskip.add('name');\n\t}\n\n\tfor (let i = 0; i < skins.length; i++) {\n\t\tconst a = skins[i];\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = i + 1; j < skins.length; j++) {\n\t\t\tconst b = skins[j];\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t// Check joints with shallow equality, not deep equality.\n\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/RecursiveSkeletons\n\t\t\tif (a.equals(b, skip) && shallowEqualsArray(a.listJoints(), b.listJoints())) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${skins.length} skins.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\n/** Generates a key unique to the content of a primitive or target. */\nfunction createPrimitiveKey(prim: Primitive | PrimitiveTarget, refs: Map<Accessor | Material, number>): string {\n\tconst primKeyItems = [];\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tprimKeyItems.push(semantic + ':' + refs.get(attribute));\n\t}\n\tif (prim instanceof Primitive) {\n\t\tconst indices = prim.getIndices();\n\t\tif (indices) {\n\t\t\tprimKeyItems.push('indices:' + refs.get(indices));\n\t\t}\n\t\tconst material = prim.getMaterial();\n\t\tif (material) {\n\t\t\tprimKeyItems.push('material:' + refs.get(material));\n\t\t}\n\t\tprimKeyItems.push('mode:' + prim.getMode());\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tprimKeyItems.push('target:' + createPrimitiveKey(target, refs));\n\t\t}\n\t}\n\treturn primKeyItems.join(',');\n}\n\n/**\n * Detects dependencies modified by a parent reference, to conservatively prevent merging. When\n * implementing extensions like KHR_animation_pointer, the 'modifyChild' attribute should be added\n * to graph edges connecting the animation channel to the animated target property.\n *\n * NOTICE: Implementation is conservative, and could prevent merging two materials sharing the\n * same animated \"Clearcoat\" ExtensionProperty. While that scenario is possible for an in-memory\n * glTF Transform graph, valid glTF input files do not have that risk.\n */\nfunction hasModifier(prop: Property, cache: Map<Property, boolean>): boolean {\n\tif (cache.has(prop)) return cache.get(prop)!;\n\n\tconst graph = prop.getGraph();\n\tconst visitedNodes = new Set<Property>();\n\tconst edgeQueue = graph.listParentEdges(prop);\n\n\t// Search dependency subtree for 'modifyChild' attribute.\n\twhile (edgeQueue.length > 0) {\n\t\tconst edge = edgeQueue.pop()!;\n\t\tif (edge.getAttributes().modifyChild === true) {\n\t\t\tcache.set(prop, true);\n\t\t\treturn true;\n\t\t}\n\n\t\tconst child = edge.getChild();\n\t\tif (visitedNodes.has(child)) continue;\n\n\t\tfor (const childEdge of graph.listChildEdges(child)) {\n\t\t\tedgeQueue.push(childEdge);\n\t\t}\n\t}\n\n\tcache.set(prop, false);\n\treturn false;\n}\n","import { Texture } from '@gltf-transform/core';\n\nconst SRGB_PATTERN = /color|emissive|diffuse/i;\n\n/**\n * Returns the color space (if any) implied by the {@link Material} slots to\n * which a texture is assigned, or null for non-color textures. If the texture\n * is not connected to any {@link Material}, this function will also return\n * null — any metadata in the image file will be ignored.\n *\n * Under current glTF specifications, only 'srgb' and non-color (null) textures\n * are used.\n *\n * Example:\n *\n * ```typescript\n * import { getTextureColorSpace } from '@gltf-transform/functions';\n *\n * const baseColorTexture = material.getBaseColorTexture();\n * const normalTexture = material.getNormalTexture();\n *\n * getTextureColorSpace(baseColorTexture); // → 'srgb'\n * getTextureColorSpace(normalTexture); // → null\n * ```\n */\nexport function getTextureColorSpace(texture: Texture): string | null {\n\tconst graph = texture.getGraph();\n\tconst edges = graph.listParentEdges(texture);\n\tconst isSRGB = edges.some((edge) => {\n\t\treturn edge.getAttributes().isColor || SRGB_PATTERN.test(edge.getName());\n\t});\n\treturn isSRGB ? 'srgb' : null;\n}\n","import { ExtensionProperty, Material, Property, Texture, TextureInfo } from '@gltf-transform/core';\n\n/**\n * Lists all {@link TextureInfo} definitions associated with a given\n * {@link Texture}. May be used to determine which UV transforms\n * and texCoord indices are applied to the material, without explicitly\n * checking the material properties and extensions.\n *\n * Example:\n *\n * ```typescript\n * // Find TextureInfo instances associated with the texture.\n * const results = listTextureInfo(texture);\n *\n * // Find which UV sets (TEXCOORD_0, TEXCOORD_1, ...) are required.\n * const texCoords = results.map((info) => info.getTexCoord());\n * // → [0, 1]\n * ```\n */\nexport function listTextureInfo(texture: Texture): TextureInfo[] {\n\tconst graph = texture.getGraph();\n\tconst results = new Set<TextureInfo>();\n\n\tfor (const textureEdge of graph.listParentEdges(texture)) {\n\t\tconst parent = textureEdge.getParent();\n\t\tconst name = textureEdge.getName() + 'Info';\n\n\t\tfor (const edge of graph.listChildEdges(parent)) {\n\t\t\tconst child = edge.getChild();\n\t\t\tif (child instanceof TextureInfo && edge.getName() === name) {\n\t\t\t\tresults.add(child);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn Array.from(results);\n}\n\n/**\n * Lists all {@link TextureInfo} definitions associated with any {@link Texture}\n * on the given {@link Material}. May be used to determine which UV transforms\n * and texCoord indices are applied to the material, without explicitly\n * checking the material properties and extensions.\n *\n * Example:\n *\n * ```typescript\n * const results = listTextureInfoByMaterial(material);\n *\n * const texCoords = results.map((info) => info.getTexCoord());\n * // → [0, 1]\n * ```\n */\nexport function listTextureInfoByMaterial(material: Material): TextureInfo[] {\n\tconst graph = material.getGraph();\n\tconst visited = new Set<Property>();\n\tconst results = new Set<TextureInfo>();\n\n\tfunction traverse(prop: Material | ExtensionProperty) {\n\t\tconst textureInfoNames = new Set<string>();\n\n\t\tfor (const edge of graph.listChildEdges(prop)) {\n\t\t\tif (edge.getChild() instanceof Texture) {\n\t\t\t\ttextureInfoNames.add(edge.getName() + 'Info');\n\t\t\t}\n\t\t}\n\n\t\tfor (const edge of graph.listChildEdges(prop)) {\n\t\t\tconst child = edge.getChild();\n\t\t\tif (visited.has(child)) continue;\n\t\t\tvisited.add(child);\n\n\t\t\tif (child instanceof TextureInfo && textureInfoNames.has(edge.getName())) {\n\t\t\t\tresults.add(child);\n\t\t\t} else if (child instanceof ExtensionProperty) {\n\t\t\t\ttraverse(child);\n\t\t\t}\n\t\t}\n\t}\n\n\ttraverse(material);\n\treturn Array.from(results);\n}\n","import { Document, Texture } from '@gltf-transform/core';\n\n/**\n * Returns names of all texture slots using the given texture.\n *\n * Example:\n *\n * ```js\n * const slots = listTextureSlots(texture);\n * // → ['occlusionTexture', 'metallicRoughnesTexture']\n * ```\n */\nexport function listTextureSlots(texture: Texture): string[] {\n\tconst document = Document.fromGraph(texture.getGraph())!;\n\tconst root = document.getRoot();\n\tconst slots = texture\n\t\t.getGraph()\n\t\t.listParentEdges(texture)\n\t\t.filter((edge) => edge.getParent() !== root)\n\t\t.map((edge) => edge.getName());\n\treturn Array.from(new Set(slots));\n}\n","import {\n\tAnimationChannel,\n\tColorUtils,\n\tDocument,\n\tExtensionProperty,\n\tGraph,\n\tILogger,\n\tMaterial,\n\tNode,\n\tPrimitive,\n\tPrimitiveTarget,\n\tProperty,\n\tPropertyType,\n\tRoot,\n\tScene,\n\tTexture,\n\tTextureInfo,\n\tTransform,\n\tvec3,\n\tvec4,\n} from '@gltf-transform/core';\nimport { mul as mulVec3 } from 'gl-matrix/vec3';\nimport { add, create, len, mul, scale, sub } from 'gl-matrix/vec4';\nimport { NdArray } from 'ndarray';\nimport { getPixels } from 'ndarray-pixels';\nimport { getTextureColorSpace } from './get-texture-color-space.js';\nimport { listTextureInfoByMaterial } from './list-texture-info.js';\nimport { listTextureSlots } from './list-texture-slots.js';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'prune';\n\nconst EPS = 3 / 255;\n\nexport interface PruneOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes?: string[];\n\t/** Whether to keep empty leaf nodes. */\n\tkeepLeaves?: boolean;\n\t/** Whether to keep unused vertex attributes, such as UVs without an assigned texture. */\n\tkeepAttributes?: boolean;\n\t/** Whether to keep redundant mesh indices, where vertex count equals index count. */\n\tkeepIndices?: boolean;\n\t/** Whether to keep single-color textures that can be converted to material factors. */\n\tkeepSolidTextures?: boolean;\n}\nconst PRUNE_DEFAULTS: Required<PruneOptions> = {\n\tpropertyTypes: [\n\t\tPropertyType.NODE,\n\t\tPropertyType.SKIN,\n\t\tPropertyType.MESH,\n\t\tPropertyType.CAMERA,\n\t\tPropertyType.PRIMITIVE,\n\t\tPropertyType.PRIMITIVE_TARGET,\n\t\tPropertyType.ANIMATION,\n\t\tPropertyType.MATERIAL,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.BUFFER,\n\t],\n\tkeepLeaves: false,\n\tkeepAttributes: true,\n\tkeepIndices: true,\n\tkeepSolidTextures: true,\n};\n\n/**\n * Removes properties from the file if they are not referenced by a {@link Scene}. Commonly helpful\n * for cleaning up after other operations, e.g. allowing a node to be detached and any unused\n * meshes, materials, or other resources to be removed automatically.\n *\n * Example:\n *\n * ```javascript\n * document.getRoot().listMaterials(); // → [Material, Material]\n *\n * await document.transform(prune());\n *\n * document.getRoot().listMaterials(); // → [Material]\n * ```\n *\n * Use {@link PruneOptions} to control what content should be pruned. For example, you can preserve\n * empty objects in the scene hierarchy using the option `keepLeaves`.\n *\n * @category Transforms\n */\nexport function prune(_options: PruneOptions = PRUNE_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...PRUNE_DEFAULTS, ..._options } as Required<PruneOptions>;\n\tconst propertyTypes = new Set(options.propertyTypes);\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tconst root = document.getRoot();\n\t\tconst graph = document.getGraph();\n\n\t\tconst counter = new DisposeCounter();\n\n\t\t// Prune top-down, so that low-level properties like accessors can be removed if the\n\t\t// properties referencing them are removed.\n\n\t\t// Prune empty Meshes.\n\t\tif (propertyTypes.has(PropertyType.MESH)) {\n\t\t\tfor (const mesh of root.listMeshes()) {\n\t\t\t\tif (mesh.listPrimitives().length > 0) continue;\n\t\t\t\tcounter.dispose(mesh);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.NODE)) {\n\t\t\tif (!options.keepLeaves) {\n\t\t\t\tfor (const scene of root.listScenes()) {\n\t\t\t\t\tnodeTreeShake(graph, scene, counter);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const node of root.listNodes()) {\n\t\t\t\ttreeShake(node, counter);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.SKIN)) {\n\t\t\tfor (const skin of root.listSkins()) {\n\t\t\t\ttreeShake(skin, counter);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.MESH)) {\n\t\t\tfor (const mesh of root.listMeshes()) {\n\t\t\t\ttreeShake(mesh, counter);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.CAMERA)) {\n\t\t\tfor (const camera of root.listCameras()) {\n\t\t\t\ttreeShake(camera, counter);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.PRIMITIVE)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE, counter);\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.PRIMITIVE_TARGET)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE_TARGET, counter);\n\t\t}\n\n\t\t// Prune unused vertex attributes.\n\t\tif (!options.keepAttributes && propertyTypes.has(PropertyType.ACCESSOR)) {\n\t\t\tconst materialPrims = new Map<Material, Set<Primitive>>();\n\t\t\tfor (const mesh of root.listMeshes()) {\n\t\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\t\tconst material = prim.getMaterial();\n\t\t\t\t\tconst required = listRequiredSemantics(document, material);\n\t\t\t\t\tconst unused = listUnusedSemantics(prim, required);\n\t\t\t\t\tpruneAttributes(prim, unused);\n\t\t\t\t\tprim.listTargets().forEach((target) => pruneAttributes(target, unused));\n\t\t\t\t\tif (material) {\n\t\t\t\t\t\tmaterialPrims.has(material)\n\t\t\t\t\t\t\t? materialPrims.get(material)!.add(prim)\n\t\t\t\t\t\t\t: materialPrims.set(material, new Set([prim]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const [material, prims] of materialPrims) {\n\t\t\t\tshiftTexCoords(material, Array.from(prims));\n\t\t\t}\n\t\t}\n\n\t\t// Prune unused mesh indices.\n\t\tif (!options.keepIndices && propertyTypes.has(PropertyType.ACCESSOR)) {\n\t\t\tfor (const mesh of root.listMeshes()) {\n\t\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\t\tpruneIndices(prim);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Pruning animations is a bit more complicated:\n\t\t// (1) Remove channels without target nodes.\n\t\t// (2) Remove animations without channels.\n\t\t// (3) Remove samplers orphaned in the process.\n\t\tif (propertyTypes.has(PropertyType.ANIMATION)) {\n\t\t\tfor (const anim of root.listAnimations()) {\n\t\t\t\tfor (const channel of anim.listChannels()) {\n\t\t\t\t\tif (!channel.getTargetNode()) {\n\t\t\t\t\t\tcounter.dispose(channel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!anim.listChannels().length) {\n\t\t\t\t\tconst samplers = anim.listSamplers();\n\t\t\t\t\ttreeShake(anim, counter);\n\t\t\t\t\tsamplers.forEach((sampler) => treeShake(sampler, counter));\n\t\t\t\t} else {\n\t\t\t\t\tanim.listSamplers().forEach((sampler) => treeShake(sampler, counter));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.MATERIAL)) {\n\t\t\troot.listMaterials().forEach((material) => treeShake(material, counter));\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) {\n\t\t\troot.listTextures().forEach((texture) => treeShake(texture, counter));\n\t\t\tif (!options.keepSolidTextures) {\n\t\t\t\tawait pruneSolidTextures(document, counter);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) {\n\t\t\troot.listAccessors().forEach((accessor) => treeShake(accessor, counter));\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.BUFFER)) {\n\t\t\troot.listBuffers().forEach((buffer) => treeShake(buffer, counter));\n\t\t}\n\n\t\t// TODO(bug): This process does not identify unused ExtensionProperty instances. That could\n\t\t// be a future enhancement, either tracking unlinked properties as if they were connected\n\t\t// to the Graph, or iterating over a property list provided by the Extension. Properties in\n\t\t// use by an Extension are correctly preserved, in the meantime.\n\n\t\tif (!counter.empty()) {\n\t\t\tconst str = counter\n\t\t\t\t.entries()\n\t\t\t\t.map(([type, count]) => `${type} (${count})`)\n\t\t\t\t.join(', ');\n\t\t\tlogger.info(`${NAME}: Removed types... ${str}`);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No unused properties found.`);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**********************************************************************************************\n * Utility for disposing properties and reporting statistics afterward.\n */\n\nclass DisposeCounter {\n\tpublic readonly disposed: Record<string, number> = {};\n\n\tempty(): boolean {\n\t\tfor (const key in this.disposed) return false;\n\t\treturn true;\n\t}\n\n\tentries(): [string, number][] {\n\t\treturn Object.entries(this.disposed);\n\t}\n\n\t/** Records properties disposed by type. */\n\tdispose(prop: Property): void {\n\t\tthis.disposed[prop.propertyType] = this.disposed[prop.propertyType] || 0;\n\t\tthis.disposed[prop.propertyType]++;\n\t\tprop.dispose();\n\t}\n}\n\n/**********************************************************************************************\n * Helper functions for the {@link prune} transform.\n *\n * IMPORTANT: These functions were previously declared in function scope, but\n * broke in the CommonJS build due to a buggy Babel transform. See:\n * https://github.com/donmccurdy/glTF-Transform/issues/1140\n */\n\n/** Disposes of the given property if it is unused. */\nfunction treeShake(prop: Property, counter: DisposeCounter): void {\n\t// Consider a property unused if it has no references from another property, excluding\n\t// types Root and AnimationChannel.\n\tconst parents = prop.listParents().filter((p) => !(p instanceof Root || p instanceof AnimationChannel));\n\tif (!parents.length) {\n\t\tcounter.dispose(prop);\n\t}\n}\n\n/**\n * For property types the Root does not maintain references to, we'll need to search the\n * graph. It's possible that objects may have been constructed without any outbound links,\n * but since they're not on the graph they don't need to be tree-shaken.\n */\nfunction indirectTreeShake(graph: Graph<Property>, propertyType: string, counter: DisposeCounter): void {\n\tfor (const edge of graph.listEdges()) {\n\t\tconst parent = edge.getParent();\n\t\tif (parent.propertyType === propertyType) {\n\t\t\ttreeShake(parent, counter);\n\t\t}\n\t}\n}\n\n/** Iteratively prunes leaf Nodes without contents. */\nfunction nodeTreeShake(graph: Graph<Property>, prop: Node | Scene, counter: DisposeCounter): void {\n\tprop.listChildren().forEach((child) => nodeTreeShake(graph, child, counter));\n\n\tif (prop instanceof Scene) return;\n\n\tconst isUsed = graph.listParentEdges(prop).some((e) => {\n\t\tconst ptype = e.getParent().propertyType;\n\t\treturn ptype !== PropertyType.ROOT && ptype !== PropertyType.SCENE && ptype !== PropertyType.NODE;\n\t});\n\tconst isEmpty = graph.listChildren(prop).length === 0;\n\tif (isEmpty && !isUsed) {\n\t\tcounter.dispose(prop);\n\t}\n}\n\nfunction pruneAttributes(prim: Primitive | PrimitiveTarget, unused: string[]) {\n\tfor (const semantic of unused) {\n\t\tprim.setAttribute(semantic, null);\n\t}\n}\n\nfunction pruneIndices(prim: Primitive) {\n\tconst indices = prim.getIndices();\n\tconst attribute = prim.listAttributes()[0];\n\tif (indices && attribute && indices.getCount() === attribute.getCount()) {\n\t\tprim.setIndices(null);\n\t}\n}\n\n/**\n * Lists vertex attribute semantics that are unused when rendering a given primitive.\n */\nfunction listUnusedSemantics(prim: Primitive | PrimitiveTarget, required: Set<string>): string[] {\n\tconst unused = [];\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (semantic === 'TANGENT' && !required.has(semantic)) {\n\t\t\tunused.push(semantic);\n\t\t} else if (semantic.startsWith('TEXCOORD_') && !required.has(semantic)) {\n\t\t\tunused.push(semantic);\n\t\t} else if (semantic.startsWith('COLOR_') && semantic !== 'COLOR_0') {\n\t\t\tunused.push(semantic);\n\t\t}\n\t}\n\treturn unused;\n}\n\n/**\n * Lists vertex attribute semantics required by a material. Does not include\n * attributes that would be used unconditionally, like POSITION or NORMAL.\n */\nfunction listRequiredSemantics(\n\tdocument: Document,\n\tmaterial: Material | ExtensionProperty | null,\n\tsemantics = new Set<string>(),\n): Set<string> {\n\tif (!material) return semantics;\n\n\tconst graph = document.getGraph();\n\n\tconst edges = graph.listChildEdges(material);\n\tconst textureNames = new Set<string>();\n\n\tfor (const edge of edges) {\n\t\tif (edge.getChild() instanceof Texture) {\n\t\t\ttextureNames.add(edge.getName());\n\t\t}\n\t}\n\n\tfor (const edge of edges) {\n\t\tconst name = edge.getName();\n\t\tconst child = edge.getChild();\n\n\t\tif (child instanceof TextureInfo) {\n\t\t\tif (textureNames.has(name.replace(/Info$/, ''))) {\n\t\t\t\tsemantics.add(`TEXCOORD_${child.getTexCoord()}`);\n\t\t\t}\n\t\t}\n\n\t\tif (child instanceof Texture && name.match(/normalTexture/i)) {\n\t\t\tsemantics.add('TANGENT');\n\t\t}\n\n\t\tif (child instanceof ExtensionProperty) {\n\t\t\tlistRequiredSemantics(document, child, semantics);\n\t\t}\n\n\t\t// TODO(#748): Does KHR_materials_anisotropy imply required vertex attributes?\n\t}\n\n\treturn semantics;\n}\n\n/**\n * Shifts texCoord indices on the given material and primitives assigned to\n * that material, such that indices start at zero and ascend without gaps.\n * Prior to calling this function, the implementation must ensure that:\n * - All TEXCOORD_n attributes on these prims are used by the material.\n * - Material does not require any unavailable TEXCOORD_n attributes.\n *\n * TEXCOORD_n attributes on morph targets are shifted alongside the parent\n * prim, but gaps may remain in their semantic lists.\n */\nfunction shiftTexCoords(material: Material, prims: Primitive[]) {\n\t// Create map from srcTexCoord → dstTexCoord.\n\tconst textureInfoList = listTextureInfoByMaterial(material);\n\tconst texCoordSet = new Set(textureInfoList.map((info: TextureInfo) => info.getTexCoord()));\n\tconst texCoordList = Array.from(texCoordSet).sort();\n\tconst texCoordMap = new Map(texCoordList.map((texCoord, index) => [texCoord, index]));\n\tconst semanticMap = new Map(texCoordList.map((texCoord, index) => [`TEXCOORD_${texCoord}`, `TEXCOORD_${index}`]));\n\n\t// Update material.\n\tfor (const textureInfo of textureInfoList) {\n\t\tconst texCoord = textureInfo.getTexCoord();\n\t\ttextureInfo.setTexCoord(texCoordMap.get(texCoord)!);\n\t}\n\n\t// Update prims.\n\tfor (const prim of prims) {\n\t\tconst semantics = prim\n\t\t\t.listSemantics()\n\t\t\t.filter((semantic) => semantic.startsWith('TEXCOORD_'))\n\t\t\t.sort();\n\t\tupdatePrim(prim, semantics);\n\t\tprim.listTargets().forEach((target) => updatePrim(target, semantics));\n\t}\n\n\tfunction updatePrim(prim: Primitive | PrimitiveTarget, srcSemantics: string[]) {\n\t\tfor (const srcSemantic of srcSemantics) {\n\t\t\tconst uv = prim.getAttribute(srcSemantic);\n\t\t\tif (!uv) continue;\n\n\t\t\tconst dstSemantic = semanticMap.get(srcSemantic)!;\n\t\t\tif (dstSemantic === srcSemantic) continue;\n\n\t\t\tprim.setAttribute(dstSemantic, uv);\n\t\t\tprim.setAttribute(srcSemantic, null);\n\t\t}\n\t}\n}\n\n/**********************************************************************************************\n * Prune solid (single-color) textures.\n */\n\nasync function pruneSolidTextures(document: Document, counter: DisposeCounter): Promise<void> {\n\tconst root = document.getRoot();\n\tconst graph = document.getGraph();\n\tconst logger = document.getLogger();\n\tconst textures = root.listTextures();\n\n\tconst pending = textures.map(async (texture) => {\n\t\tconst factor = await getTextureFactor(texture);\n\t\tif (!factor) return;\n\n\t\tif (getTextureColorSpace(texture) === 'srgb') {\n\t\t\tColorUtils.convertSRGBToLinear(factor, factor);\n\t\t}\n\n\t\tconst name = texture.getName() || texture.getURI();\n\t\tconst size = texture.getSize()?.join('x');\n\t\tconst slots = listTextureSlots(texture);\n\n\t\tfor (const edge of graph.listParentEdges(texture)) {\n\t\t\tconst parent = edge.getParent();\n\t\t\tif (parent !== root && applyMaterialFactor(parent as Material, factor, edge.getName(), logger)) {\n\t\t\t\tedge.dispose();\n\t\t\t}\n\t\t}\n\n\t\tif (texture.listParents().length === 1) {\n\t\t\tcounter.dispose(texture);\n\t\t\tlogger.debug(`${NAME}: Removed solid-color texture \"${name}\" (${size}px ${slots.join(', ')})`);\n\t\t}\n\t});\n\n\tawait Promise.all(pending);\n}\n\nfunction applyMaterialFactor(\n\tmaterial: Material | ExtensionProperty,\n\tfactor: vec4,\n\tslot: string,\n\tlogger: ILogger,\n): boolean {\n\tif (material instanceof Material) {\n\t\tswitch (slot) {\n\t\t\tcase 'baseColorTexture':\n\t\t\t\tmaterial.setBaseColorFactor(mul(factor, factor, material.getBaseColorFactor()) as vec4);\n\t\t\t\treturn true;\n\t\t\tcase 'emissiveTexture':\n\t\t\t\tmaterial.setEmissiveFactor(\n\t\t\t\t\tmulVec3([0, 0, 0], factor.slice(0, 3) as vec3, material.getEmissiveFactor()) as vec3,\n\t\t\t\t);\n\t\t\t\treturn true;\n\t\t\tcase 'occlusionTexture':\n\t\t\t\treturn Math.abs(factor[0] - 1) <= EPS;\n\t\t\tcase 'metallicRoughnessTexture':\n\t\t\t\tmaterial.setRoughnessFactor(factor[1] * material.getRoughnessFactor());\n\t\t\t\tmaterial.setMetallicFactor(factor[2] * material.getMetallicFactor());\n\t\t\t\treturn true;\n\t\t\tcase 'normalTexture':\n\t\t\t\treturn len(sub(create(), factor, [0.5, 0.5, 1, 1])) <= EPS;\n\t\t}\n\t}\n\n\tlogger.warn(`${NAME}: Detected single-color ${slot} texture. Pruning ${slot} not yet supported.`);\n\treturn false;\n}\n\nasync function getTextureFactor(texture: Texture): Promise<vec4 | null> {\n\tconst pixels = await maybeGetPixels(texture);\n\tif (!pixels) return null;\n\n\tconst min: vec4 = [Infinity, Infinity, Infinity, Infinity];\n\tconst max: vec4 = [-Infinity, -Infinity, -Infinity, -Infinity];\n\tconst target: vec4 = [0, 0, 0, 0];\n\n\tconst [width, height] = pixels.shape;\n\n\tfor (let i = 0; i < width; i++) {\n\t\tfor (let j = 0; j < height; j++) {\n\t\t\tfor (let k = 0; k < 4; k++) {\n\t\t\t\tmin[k] = Math.min(min[k], pixels.get(i, j, k));\n\t\t\t\tmax[k] = Math.max(max[k], pixels.get(i, j, k));\n\t\t\t}\n\t\t}\n\n\t\tif (len(sub(target, max, min)) / 255 > EPS) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn scale(target, add(target, max, min), 0.5 / 255) as vec4;\n}\n\nasync function maybeGetPixels(texture: Texture): Promise<NdArray<Uint8Array> | null> {\n\ttry {\n\t\treturn await getPixels(texture.getImage()!, texture.getMimeType());\n\t} catch (e) {\n\t\treturn null;\n\t}\n}\n","import {\n\tAccessor,\n\tDocument,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tTransform,\n\tTypedArray,\n\tvec3,\n} from '@gltf-transform/core';\nimport { cleanPrimitive } from './clean-primitive.js';\nimport { dedup } from './dedup.js';\nimport { prune } from './prune.js';\nimport { createIndices, createTransform, formatDeltaOp } from './utils.js';\n\n// DEVELOPER NOTES: Ideally a weld() implementation should be fast, robust,\n// and tunable. The writeup below tracks my attempts to solve for these\n// constraints.\n//\n// (Approach #1) Follow the mergeVertices() implementation of three.js,\n// hashing vertices with a string concatenation of all vertex attributes.\n// The approach does not allow per-attribute tolerance in local units.\n//\n// (Approach #2) Sort points along the X axis, then make cheaper\n// searches up/down the sorted list for merge candidates. While this allows\n// simpler comparison based on specified tolerance, it's much slower, even\n// for cases where choice of the X vs. Y or Z axes is reasonable.\n//\n// (Approach #3) Attempted a Delaunay triangulation in three dimensions,\n// expecting it would be an n * log(n) algorithm, but the only implementation\n// I found (with delaunay-triangulate) appeared to be much slower than that,\n// and was notably slower than the sort-based approach, just building the\n// Delaunay triangulation alone.\n//\n// (Approach #4) Hybrid of (1) and (2), assigning vertices to a spatial\n// grid, then searching the local neighborhood (27 cells) for weld candidates.\n//\n// RESULTS: For the \"Lovecraftian\" sample model, after joining, a primitive\n// with 873,000 vertices can be welded down to 230,000 vertices. Results:\n// - (1) Not tested, but prior results suggest not robust enough.\n// - (2) 30 seconds\n// - (3) 660 seconds\n// - (4) 5 seconds exhaustive, 1.5s non-exhaustive\n\nconst NAME = 'weld';\n\nconst Tolerance = {\n\tDEFAULT: 0.0001,\n\tTEXCOORD: 0.0001, // [0, 1]\n\tCOLOR: 0.01, // [0, 1]\n\tNORMAL: 0.05, // [-1, 1], ±3º\n\tJOINTS: 0.0, // [0, ∞]\n\tWEIGHTS: 0.01, // [0, ∞]\n};\n\n/** Options for the {@link weld} function. */\nexport interface WeldOptions {\n\t/** Tolerance for vertex positions, as a fraction of primitive AABB. */\n\ttolerance?: number;\n\t/** Tolerance for vertex normals, in radians. */\n\ttoleranceNormal?: number;\n\t/** Whether to overwrite existing indices. */\n\toverwrite?: boolean;\n\t/** Enables a more thorough, but slower, search for vertices to weld. */\n\texhaustive?: boolean;\n}\n\nexport const WELD_DEFAULTS: Required<WeldOptions> = {\n\ttolerance: Tolerance.DEFAULT,\n\ttoleranceNormal: Tolerance.NORMAL,\n\toverwrite: true,\n\texhaustive: false, // donmccurdy/glTF-Transform#886\n};\n\n/**\n * Index {@link Primitive Primitives} and (optionally) merge similar vertices. When merged\n * and indexed, data is shared more efficiently between vertices. File size can\n * be reduced, and the GPU can sometimes use the vertex cache more efficiently.\n *\n * When welding, the 'tolerance' threshold determines which vertices qualify for\n * welding based on distance between the vertices as a fraction of the primitive's\n * bounding box (AABB). For example, tolerance=0.01 welds vertices within +/-1%\n * of the AABB's longest dimension. Other vertex attributes are also compared\n * during welding, with attribute-specific thresholds. For `tolerance=0`, geometry\n * is indexed in place, without merging.\n *\n * To preserve visual appearance consistently, use low `toleranceNormal` thresholds\n * around 0.1 (±3º). To pre-processing a scene before simplification or LOD creation,\n * use higher thresholds around 0.5 (±30º).\n *\n * Example:\n *\n * ```javascript\n * import { weld } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tweld({ tolerance: 0.001, toleranceNormal: 0.5 })\n * );\n * ```\n *\n * @category Transforms\n */\nexport function weld(_options: WeldOptions = WELD_DEFAULTS): Transform {\n\tconst options = expandWeldOptions(_options);\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tweldPrimitive(prim, options);\n\n\t\t\t\tif (isPrimEmpty(prim)) prim.dispose();\n\t\t\t}\n\n\t\t\tif (mesh.listPrimitives().length === 0) mesh.dispose();\n\t\t}\n\n\t\tif (options.tolerance > 0) {\n\t\t\t// If tolerance is greater than 0, welding may remove a mesh, so we prune\n\t\t\tawait doc.transform(\n\t\t\t\tprune({\n\t\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR, PropertyType.NODE],\n\t\t\t\t\tkeepAttributes: true,\n\t\t\t\t\tkeepIndices: true,\n\t\t\t\t\tkeepLeaves: false,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tawait doc.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**\n * Index a {@link Primitive} and (optionally) weld similar vertices. When merged\n * and indexed, data is shared more efficiently between vertices. File size can\n * be reduced, and the GPU can sometimes use the vertex cache more efficiently.\n *\n * When welding, the 'tolerance' threshold determines which vertices qualify for\n * welding based on distance between the vertices as a fraction of the primitive's\n * bounding box (AABB). For example, tolerance=0.01 welds vertices within +/-1%\n * of the AABB's longest dimension. Other vertex attributes are also compared\n * during welding, with attribute-specific thresholds. For tolerance=0, geometry\n * is indexed in place, without merging.\n *\n * Example:\n *\n * ```javascript\n * import { weldPrimitive } from '@gltf-transform/functions';\n *\n * const mesh = document.getRoot().listMeshes()\n * \t.find((mesh) => mesh.getName() === 'Gizmo');\n *\n * for (const prim of mesh.listPrimitives()) {\n *   weldPrimitive(prim, {tolerance: 0.0001});\n * }\n * ```\n */\nexport function weldPrimitive(prim: Primitive, _options: WeldOptions = WELD_DEFAULTS): void {\n\tconst graph = prim.getGraph();\n\tconst document = Document.fromGraph(graph)!;\n\tconst options = expandWeldOptions(_options);\n\n\tif (prim.getIndices() && !_options.overwrite) return;\n\tif (prim.getMode() === Primitive.Mode.POINTS) return;\n\n\tif (_options.tolerance === 0) {\n\t\t_indexPrimitive(document, prim);\n\t} else {\n\t\t_weldPrimitive(document, prim, options);\n\t}\n}\n\n/** @internal Adds indices, if missing. Does not merge vertices. */\nfunction _indexPrimitive(doc: Document, prim: Primitive): void {\n\t// No need to overwrite here, even if options.overwrite=true.\n\tif (prim.getIndices()) return;\n\n\tconst attr = prim.listAttributes()[0];\n\tconst numVertices = attr.getCount();\n\tconst buffer = attr.getBuffer();\n\tconst indices = doc\n\t\t.createAccessor()\n\t\t.setBuffer(buffer)\n\t\t.setType(Accessor.Type.SCALAR)\n\t\t.setArray(createIndices(numVertices));\n\tprim.setIndices(indices);\n}\n\n/** @internal Weld and merge, combining vertices that are similar on all vertex attributes. */\nfunction _weldPrimitive(doc: Document, prim: Primitive, options: Required<WeldOptions>): void {\n\tconst logger = doc.getLogger();\n\n\tconst srcPosition = prim.getAttribute('POSITION')!;\n\tconst srcIndices = prim.getIndices() || doc.createAccessor().setArray(createIndices(srcPosition.getCount()));\n\tconst uniqueIndices = new Uint32Array(new Set(srcIndices.getArray()!)).sort();\n\n\t// (1) Compute per-attribute tolerance and spatial grid for vertices.\n\n\tconst attributeTolerance: Record<string, number> = {};\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tattributeTolerance[semantic] = getAttributeTolerance(semantic, attribute, options);\n\t}\n\n\tlogger.debug(`${NAME}: Tolerance thresholds: ${formatKV(attributeTolerance)}`);\n\n\t// (2) Compare and identify vertices to weld.\n\n\tconst posA: vec3 = [0, 0, 0];\n\tconst posB: vec3 = [0, 0, 0];\n\n\tconst grid = {} as Record<string, number[]>;\n\tconst cellSize = attributeTolerance.POSITION;\n\n\tfor (let i = 0; i < uniqueIndices.length; i++) {\n\t\tsrcPosition.getElement(uniqueIndices[i], posA);\n\t\tconst key = getGridKey(posA, cellSize);\n\t\tgrid[key] = grid[key] || [];\n\t\tgrid[key].push(uniqueIndices[i]);\n\t}\n\n\t// (2) Compare and identify vertices to weld.\n\n\tconst srcMaxIndex = uniqueIndices[uniqueIndices.length - 1];\n\tconst weldMap = createIndices(srcMaxIndex + 1); // oldIndex → oldCommonIndex\n\tconst writeMap = new Array(uniqueIndices.length).fill(-1); // oldIndex → newIndex\n\n\tconst srcVertexCount = srcPosition.getCount();\n\tlet dstVertexCount = 0;\n\n\tfor (let i = 0; i < uniqueIndices.length; i++) {\n\t\tconst a = uniqueIndices[i];\n\t\tsrcPosition.getElement(a, posA);\n\n\t\tconst cellKeys = options.exhaustive ? getGridNeighborhoodKeys(posA, cellSize) : [getGridKey(posA, cellSize)];\n\n\t\tcells: for (const cellKey of cellKeys) {\n\t\t\tif (!grid[cellKey]) continue cells; // May occur in exhaustive search.\n\n\t\t\tneighbors: for (const j of grid[cellKey]) {\n\t\t\t\tconst b = weldMap[j];\n\n\t\t\t\t// Only weld to lower indices, preventing two-way match.\n\t\t\t\tif (a <= b) continue neighbors;\n\n\t\t\t\tsrcPosition.getElement(b, posB);\n\n\t\t\t\t// Weld if base attributes and morph target attributes match.\n\t\t\t\tconst isBaseMatch = prim.listSemantics().every((semantic) => {\n\t\t\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\t\t\tconst tolerance = attributeTolerance[semantic];\n\t\t\t\t\treturn compareAttributes(attribute, a, b, tolerance, semantic);\n\t\t\t\t});\n\t\t\t\tconst isTargetMatch = prim.listTargets().every((target) => {\n\t\t\t\t\treturn target.listSemantics().every((semantic) => {\n\t\t\t\t\t\tconst attribute = target.getAttribute(semantic)!;\n\t\t\t\t\t\tconst tolerance = attributeTolerance[semantic];\n\t\t\t\t\t\treturn compareAttributes(attribute, a, b, tolerance, semantic);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tif (isBaseMatch && isTargetMatch) {\n\t\t\t\t\tweldMap[a] = b;\n\t\t\t\t\tbreak cells;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Output the vertex if we didn't find a match, else record the index of the match. Because\n\t\t// we iterate vertices in ascending order, and only match to lower indices, we're\n\t\t// guaranteed the source vertex for a weld has already been marked for output.\n\t\tif (weldMap[a] === a) {\n\t\t\twriteMap[a] = dstVertexCount++;\n\t\t} else {\n\t\t\twriteMap[a] = writeMap[weldMap[a]];\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: ${formatDeltaOp(srcVertexCount, dstVertexCount)} vertices.`);\n\n\t// (3) Update indices.\n\n\tconst dstIndicesCount = srcIndices.getCount(); // # primitives does not change.\n\tconst dstIndicesArray = createIndices(dstIndicesCount, uniqueIndices.length);\n\tfor (let i = 0; i < dstIndicesCount; i++) {\n\t\tdstIndicesArray[i] = writeMap[srcIndices.getScalar(i)];\n\t}\n\tprim.setIndices(srcIndices.clone().setArray(dstIndicesArray));\n\tif (srcIndices.listParents().length === 1) srcIndices.dispose();\n\n\t// (4) Update vertex attributes.\n\n\tfor (const srcAttr of prim.listAttributes()) {\n\t\tswapAttributes(prim, srcAttr, writeMap, dstVertexCount);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const srcAttr of target.listAttributes()) {\n\t\t\tswapAttributes(target, srcAttr, writeMap, dstVertexCount);\n\t\t}\n\t}\n\n\t// (5) Clean up degenerate triangles.\n\n\tcleanPrimitive(prim);\n}\n\n/** Creates a new TypedArray of the same type as an original, with a new length. */\nfunction createArrayOfType<T extends TypedArray>(array: T, length: number): T {\n\tconst ArrayCtor = array.constructor as new (length: number) => T;\n\treturn new ArrayCtor(length);\n}\n\n/** Replaces an {@link Attribute}, creating a new one with the given elements. */\nfunction swapAttributes(\n\tparent: Primitive | PrimitiveTarget,\n\tsrcAttr: Accessor,\n\treorder: number[],\n\tdstCount: number,\n): void {\n\tconst dstAttrArray = createArrayOfType(srcAttr.getArray()!, dstCount * srcAttr.getElementSize());\n\tconst dstAttr = srcAttr.clone().setArray(dstAttrArray);\n\tconst done = new Uint8Array(dstCount);\n\n\tfor (let i = 0, el = [] as number[]; i < reorder.length; i++) {\n\t\tif (!done[reorder[i]]) {\n\t\t\tdstAttr.setElement(reorder[i], srcAttr.getElement(i, el));\n\t\t\tdone[reorder[i]] = 1;\n\t\t}\n\t}\n\n\tparent.swap(srcAttr, dstAttr);\n\n\t// Clean up.\n\tif (srcAttr.listParents().length === 1) srcAttr.dispose();\n}\n\nconst _a = [] as number[];\nconst _b = [] as number[];\n\n/** Computes a per-attribute tolerance, based on domain and usage of the attribute. */\nfunction getAttributeTolerance(semantic: string, attribute: Accessor, options: Required<WeldOptions>): number {\n\t// Attributes like NORMAL and COLOR_# do not vary in range like POSITION,\n\t// so do not apply the given tolerance factor to these attributes.\n\tif (semantic === 'NORMAL' || semantic === 'TANGENT') return options.toleranceNormal;\n\tif (semantic.startsWith('COLOR_')) return Tolerance.COLOR;\n\tif (semantic.startsWith('TEXCOORD_')) return Tolerance.TEXCOORD;\n\tif (semantic.startsWith('JOINTS_')) return Tolerance.JOINTS;\n\tif (semantic.startsWith('WEIGHTS_')) return Tolerance.WEIGHTS;\n\n\t_a.length = _b.length = 0;\n\tattribute.getMinNormalized(_a);\n\tattribute.getMaxNormalized(_b);\n\tconst diff = _b.map((bi, i) => bi - _a[i]);\n\tconst range = Math.max(...diff);\n\treturn options.tolerance * range;\n}\n\n/** Compares two vertex attributes against a tolerance threshold. */\nfunction compareAttributes(attribute: Accessor, a: number, b: number, tolerance: number, _semantic: string): boolean {\n\tattribute.getElement(a, _a);\n\tattribute.getElement(b, _b);\n\tfor (let i = 0, il = attribute.getElementSize(); i < il; i++) {\n\t\tif (Math.abs(_a[i] - _b[i]) > tolerance) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction formatKV(kv: Record<string, unknown>): string {\n\treturn Object.entries(kv)\n\t\t.map(([k, v]) => `${k}=${v}`)\n\t\t.join(', ');\n}\n\n// Order to search nearer cells first.\nconst CELL_OFFSETS = [0, -1, 1];\n\nfunction getGridNeighborhoodKeys(p: vec3, cellSize: number): string[] {\n\tconst keys = [] as string[];\n\tconst _p = [0, 0, 0] as vec3;\n\tfor (const i of CELL_OFFSETS) {\n\t\tfor (const j of CELL_OFFSETS) {\n\t\t\tfor (const k of CELL_OFFSETS) {\n\t\t\t\t_p[0] = p[0] + i * cellSize;\n\t\t\t\t_p[1] = p[1] + j * cellSize;\n\t\t\t\t_p[2] = p[2] + k * cellSize;\n\t\t\t\tkeys.push(getGridKey(_p, cellSize));\n\t\t\t}\n\t\t}\n\t}\n\treturn keys;\n}\n\nfunction getGridKey(p: vec3, cellSize: number): string {\n\tconst cellX = Math.round(p[0] / cellSize);\n\tconst cellY = Math.round(p[1] / cellSize);\n\tconst cellZ = Math.round(p[2] / cellSize);\n\treturn cellX + ':' + cellY + ':' + cellZ;\n}\n\nfunction expandWeldOptions(_options: WeldOptions): Required<WeldOptions> {\n\tconst options = { ...WELD_DEFAULTS, ..._options } as Required<WeldOptions>;\n\n\tif (options.tolerance < 0 || options.tolerance > 0.1) {\n\t\tthrow new Error(`${NAME}: Requires 0 <= tolerance <= 0.1`);\n\t}\n\n\tif (options.toleranceNormal < 0 || options.toleranceNormal > Math.PI / 2) {\n\t\tthrow new Error(`${NAME}: Requires 0 <= toleranceNormal <= ${(Math.PI / 2).toFixed(2)}`);\n\t}\n\n\tif (options.tolerance > 0) {\n\t\toptions.tolerance = Math.max(options.tolerance, Number.EPSILON);\n\t\toptions.toleranceNormal = Math.max(options.toleranceNormal, Number.EPSILON);\n\t}\n\n\treturn options;\n}\n\n/**\n * For purposes of welding, we consider a primitive to be 'empty' or degenerate\n * if (1) it has an index, and (2) that index is empty. In some cases\n * (mode=POINTS) the index may be missing — this is outside the scope of welding.\n */\nfunction isPrimEmpty(prim: Primitive): boolean {\n\tconst indices = prim.getIndices();\n\treturn !!indices && indices.getCount() === 0;\n}\n","import { vec3, vec4, mat4, Accessor, Primitive } from '@gltf-transform/core';\nimport { create as createMat3, fromMat4, invert, transpose } from 'gl-matrix/mat3';\nimport { create as createVec3, normalize as normalizeVec3, transformMat3, transformMat4 } from 'gl-matrix/vec3';\nimport { create as createVec4 } from 'gl-matrix/vec4';\nimport { createIndices } from './utils.js';\nimport { weldPrimitive } from './weld.js';\nimport { determinant } from 'gl-matrix/mat4';\n\n/**\n * Applies a transform matrix to a {@link Primitive}.\n *\n * When calling {@link transformPrimitive}, any un-masked vertices are overwritten\n * directly in the underlying vertex streams. If streams should be detached instead,\n * see {@link transformMesh}.\n *\n * Example:\n *\n * ```javascript\n * import { fromTranslation } from 'gl-matrix/mat4';\n * import { transformPrimitive } from '@gltf-transform/functions';\n *\n * // offset vertices, y += 10.\n * transformPrimitive(prim, fromTranslation([], [0, 10, 0]));\n * ```\n *\n * @param prim\n * @param matrix\n * @param skipIndices Vertices, specified by index, to be _excluded_ from the transformation.\n */\nexport function transformPrimitive(prim: Primitive, matrix: mat4, skipIndices = new Set<number>()): void {\n\tconst position = prim.getAttribute('POSITION')!;\n\tconst indices = (prim.getIndices()?.getArray() || createIndices(position!.getCount())) as Uint32Array;\n\n\t// Apply transform to base attributes.\n\tif (position) {\n\t\tapplyMatrix(matrix, position, indices, new Set(skipIndices));\n\t}\n\n\tconst normal = prim.getAttribute('NORMAL');\n\tif (normal) {\n\t\tapplyNormalMatrix(matrix, normal, indices, new Set(skipIndices));\n\t}\n\n\tconst tangent = prim.getAttribute('TANGENT');\n\tif (tangent) {\n\t\tapplyTangentMatrix(matrix, tangent, indices, new Set(skipIndices));\n\t}\n\n\t// Apply transform to morph attributes.\n\tfor (const target of prim.listTargets()) {\n\t\tconst position = target.getAttribute('POSITION');\n\t\tif (position) {\n\t\t\tapplyMatrix(matrix, position, indices, new Set(skipIndices));\n\t\t}\n\n\t\tconst normal = target.getAttribute('NORMAL');\n\t\tif (normal) {\n\t\t\tapplyNormalMatrix(matrix, normal, indices, new Set(skipIndices));\n\t\t}\n\n\t\tconst tangent = target.getAttribute('TANGENT');\n\t\tif (tangent) {\n\t\t\tapplyTangentMatrix(matrix, tangent, indices, new Set(skipIndices));\n\t\t}\n\t}\n\n\t// Reverse winding order if scale is negative.\n\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/NegativeScaleTest\n\tif (determinant(matrix) < 0) {\n\t\treversePrimitiveWindingOrder(prim);\n\t}\n\n\t// Update mask.\n\tfor (let i = 0; i < indices.length; i++) skipIndices.add(indices[i]);\n}\n\nfunction applyMatrix(matrix: mat4, attribute: Accessor, indices: Uint32Array, skipIndices: Set<number>) {\n\t// An arbitrary transform may not keep vertex positions in the required\n\t// range of a normalized attribute. Replace the array, instead.\n\tconst dstArray = new Float32Array(attribute.getCount() * 3);\n\tconst elementSize = attribute.getElementSize();\n\n\tfor (let i = 0, el: number[] = [], il = attribute.getCount(); i < il; i++) {\n\t\tdstArray.set(attribute.getElement(i, el), i * elementSize);\n\t}\n\n\tconst vector = createVec3() as vec3;\n\tfor (let i = 0; i < indices.length; i++) {\n\t\tconst index = indices[i];\n\t\tif (skipIndices.has(index)) continue;\n\n\t\tattribute.getElement(index, vector);\n\t\ttransformMat4(vector, vector, matrix);\n\t\tdstArray.set(vector, index * 3);\n\n\t\tskipIndices.add(index);\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(false);\n}\n\nfunction applyNormalMatrix(matrix: mat4, attribute: Accessor, indices: Uint32Array, skipIndices: Set<number>) {\n\tconst normalMatrix = createMat3();\n\tfromMat4(normalMatrix, matrix);\n\tinvert(normalMatrix, normalMatrix);\n\ttranspose(normalMatrix, normalMatrix);\n\n\tconst vector = createVec3() as vec3;\n\tfor (let i = 0; i < indices.length; i++) {\n\t\tconst index = indices[i];\n\t\tif (skipIndices.has(index)) continue;\n\n\t\tattribute.getElement(index, vector);\n\t\ttransformMat3(vector, vector, normalMatrix);\n\t\tnormalizeVec3(vector, vector);\n\t\tattribute.setElement(index, vector);\n\n\t\tskipIndices.add(index);\n\t}\n}\n\nfunction applyTangentMatrix(matrix: mat4, attribute: Accessor, indices: Uint32Array, skipIndices: Set<number>) {\n\tconst v3 = createVec3() as vec3;\n\tconst v4 = createVec4() as vec4;\n\tfor (let i = 0; i < indices.length; i++) {\n\t\tconst index = indices[i];\n\t\tif (skipIndices.has(index)) continue;\n\n\t\tattribute.getElement(index, v4);\n\n\t\t// mat4 affine matrix applied to vector, vector interpreted as a direction.\n\t\t// Reference: https://github.com/mrdoob/three.js/blob/9f4de99828c05e71c47e6de0beb4c6e7652e486a/src/math/Vector3.js#L286-L300\n\t\tconst [x, y, z] = v4;\n\t\tv3[0] = matrix[0] * x + matrix[4] * y + matrix[8] * z;\n\t\tv3[1] = matrix[1] * x + matrix[5] * y + matrix[9] * z;\n\t\tv3[2] = matrix[2] * x + matrix[6] * y + matrix[10] * z;\n\t\tnormalizeVec3(v3, v3);\n\n\t\t(v4[0] = v3[0]), (v4[1] = v3[1]), (v4[2] = v3[2]);\n\n\t\tattribute.setElement(index, v4);\n\n\t\tskipIndices.add(index);\n\t}\n}\n\nfunction reversePrimitiveWindingOrder(prim: Primitive) {\n\tif (prim.getMode() !== Primitive.Mode.TRIANGLES) return;\n\tif (!prim.getIndices()) weldPrimitive(prim, { tolerance: 0 });\n\n\tconst indices = prim.getIndices()!;\n\tfor (let i = 0, il = indices.getCount(); i < il; i += 3) {\n\t\tconst a = indices.getScalar(i);\n\t\tconst c = indices.getScalar(i + 2);\n\t\tindices.setScalar(i, c);\n\t\tindices.setScalar(i + 2, a);\n\t}\n}\n","import { mat4, Accessor, Primitive, Mesh, PropertyType, PrimitiveTarget } from '@gltf-transform/core';\nimport { transformPrimitive } from './transform-primitive.js';\nimport { deepListAttributes } from './utils.js';\n\n/**\n * Applies a transform matrix to every {@link Primitive} in the given {@link Mesh}.\n *\n * Method:\n * - If any primitives are shared by other meshes, they will be detached.\n * - If any vertex streams are shared by primitives of other meshes, vertex data\n *  will be overwritten unless _overwrite=false_ or the indices are masked. If\n * \t_overwrite=false_, a detached copy of the vertex stream is made before applying\n * \tthe transform.\n * - Primitives within the mesh sharing vertex streams will continue to share those streams.\n * - For indexed primitives, only indexed vertices are modified.\n *\n * Example:\n *\n * ```javascript\n * import { fromTranslation } from 'gl-matrix/mat4';\n * import { transformMesh } from '@gltf-transform/functions';\n *\n * // offset vertices, y += 10.\n * transformMesh(mesh, fromTranslation([], [0, 10, 0]));\n * ```\n *\n * @param mesh\n * @param matrix\n * @param overwrite Whether to overwrite vertex streams in place. If false,\n * \t\tstreams shared with other meshes will be detached.\n * @param skipIndices Vertices, specified by index, to be _excluded_ from the transformation.\n */\nexport function transformMesh(mesh: Mesh, matrix: mat4, overwrite = false, skipIndices?: Set<number>): void {\n\t// (1) Detach shared prims.\n\tfor (const srcPrim of mesh.listPrimitives()) {\n\t\tconst isShared = srcPrim.listParents().some((p) => p.propertyType === PropertyType.MESH && p !== mesh);\n\t\tif (isShared) {\n\t\t\tconst dstPrim = srcPrim.clone();\n\t\t\tmesh.swap(srcPrim, dstPrim);\n\n\t\t\tfor (const srcTarget of dstPrim.listTargets()) {\n\t\t\t\tconst dstTarget = srcTarget.clone();\n\t\t\t\tdstPrim.swap(srcTarget, dstTarget);\n\t\t\t}\n\t\t}\n\t}\n\n\t// (2) Detach shared vertex streams.\n\tif (!overwrite) {\n\t\tconst parents = new Set<Primitive | PrimitiveTarget>([\n\t\t\t...mesh.listPrimitives(),\n\t\t\t...mesh.listPrimitives().flatMap((prim) => prim.listTargets()),\n\t\t]);\n\t\tconst attributes = new Map<Accessor, Accessor>();\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tfor (const srcAttribute of deepListAttributes(prim)) {\n\t\t\t\tconst isShared = srcAttribute\n\t\t\t\t\t.listParents()\n\t\t\t\t\t.some((a) => (a instanceof Primitive || a instanceof PrimitiveTarget) && !parents.has(a));\n\t\t\t\tif (isShared && !attributes.has(srcAttribute)) {\n\t\t\t\t\tattributes.set(srcAttribute, srcAttribute.clone());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const parent of parents) {\n\t\t\tfor (const [srcAttribute, dstAttribute] of attributes) {\n\t\t\t\tparent.swap(srcAttribute, dstAttribute);\n\t\t\t}\n\t\t}\n\t}\n\n\t// (3) Apply transform.\n\tconst attributeSkipIndices = new Map<Accessor, Set<number>>();\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tconst position = prim.getAttribute('POSITION')!;\n\n\t\tlet primSkipIndices;\n\t\tif (skipIndices) {\n\t\t\tprimSkipIndices = skipIndices;\n\t\t} else if (attributeSkipIndices.has(position)) {\n\t\t\tprimSkipIndices = attributeSkipIndices.get(position)!;\n\t\t} else {\n\t\t\tattributeSkipIndices.set(position, (primSkipIndices = new Set<number>()));\n\t\t}\n\n\t\ttransformPrimitive(prim, matrix, primSkipIndices);\n\t}\n}\n","import { mat4, MathUtils, Node } from '@gltf-transform/core';\nimport { multiply as multiplyMat4 } from 'gl-matrix/mat4';\nimport { transformMesh } from './transform-mesh.js';\n\n// prettier-ignore\nconst IDENTITY: mat4 = [\n  1, 0, 0, 0,\n  0, 1, 0, 0,\n  0, 0, 1, 0,\n  0, 0, 0, 1\n];\n\n/**\n * Clears local transform of the {@link Node}, applying the transform to children and meshes.\n *\n * - Applies transform to children\n * - Applies transform to {@link Mesh mesh}\n * - Resets {@link Light lights}, {@link Camera cameras}, and other attachments to the origin\n *\n * Example:\n *\n * ```typescript\n * import { clearNodeTransform } from '@gltf-transform/functions';\n *\n * node.getTranslation(); // → [ 5, 0, 0 ]\n * node.getMesh(); // → vertex data centered at origin\n *\n * clearNodeTransform(node);\n *\n * node.getTranslation(); // → [ 0, 0, 0 ]\n * node.getMesh(); // → vertex data centered at [ 5, 0, 0 ]\n * ```\n *\n * To clear _all_ transforms of a Node, first clear its inherited transforms with\n * {@link clearNodeParent}, then clear the local transform with {@link clearNodeTransform}.\n */\nexport function clearNodeTransform(node: Node): Node {\n\tconst mesh = node.getMesh();\n\tconst localMatrix = node.getMatrix();\n\n\tif (mesh && !MathUtils.eq(localMatrix, IDENTITY)) {\n\t\ttransformMesh(mesh, localMatrix);\n\t}\n\n\tfor (const child of node.listChildren()) {\n\t\tconst matrix = child.getMatrix();\n\t\tmultiplyMat4(matrix, matrix, localMatrix);\n\t\tchild.setMatrix(matrix);\n\t}\n\n\treturn node.setMatrix(IDENTITY);\n}\n","import type { Accessor, Document, Primitive, Transform } from '@gltf-transform/core';\nimport { KHRMeshQuantization } from '@gltf-transform/extensions';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'dequantize';\n\n/** Options for the {@link dequantize} function. */\nexport interface DequantizeOptions {\n\t/**\n\t * Pattern (regex) used to filter vertex attribute semantics for quantization.\n\t * Default: `/^((?!JOINTS_).)*$/`.\n\t */\n\tpattern?: RegExp;\n}\n\nconst DEQUANTIZE_DEFAULTS: DequantizeOptions = {\n\tpattern: /^((?!JOINTS_).)*$/,\n};\n\n/**\n * Dequantize {@link Primitive Primitives}, removing {@link KHRMeshQuantization `KHR_mesh_quantization`}\n * if present. Dequantization will increase the size of the mesh on disk and in memory, but may be\n * necessary for compatibility with applications that don't support quantization.\n *\n * Example:\n *\n * ```javascript\n * import { dequantizePrimitive } from '@gltf-transform/functions';\n *\n * await document.transform(dequantize());\n * ```\n *\n * @category Transforms\n */\nexport function dequantize(_options: DequantizeOptions = DEQUANTIZE_DEFAULTS): Transform {\n\tconst options = { ...DEQUANTIZE_DEFAULTS, ..._options } as Required<DequantizeOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tdequantizePrimitive(prim, options);\n\t\t\t}\n\t\t}\n\t\tdoc.createExtension(KHRMeshQuantization).dispose();\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**\n * Dequantize a single {@link Primitive}, converting all vertex attributes to float32. Dequantization\n * will increase the size of the mesh on disk and in memory, but may be necessary for compatibility\n * with applications that don't support quantization.\n *\n * Example:\n *\n * ```javascript\n * import { dequantizePrimitive } from '@gltf-transform/functions';\n *\n * const mesh = document.getRoot().listMeshes().find((mesh) => mesh.getName() === 'MyMesh');\n *\n * for (const prim of mesh.listPrimitives()) {\n * \tdequantizePrimitive(prim);\n * }\n * ```\n */\nexport function dequantizePrimitive(prim: Primitive, options: Required<DequantizeOptions>): void {\n\tfor (const semantic of prim.listSemantics()) {\n\t\tdequantizeAttribute(semantic, prim.getAttribute(semantic)!, options);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const semantic of target.listSemantics()) {\n\t\t\tdequantizeAttribute(semantic, target.getAttribute(semantic)!, options);\n\t\t}\n\t}\n}\n\nexport function dequantizeAttribute(semantic: string, attribute: Accessor, options: Required<DequantizeOptions>): void {\n\tif (!attribute.getArray()) return;\n\tif (!options.pattern.test(semantic)) return;\n\tif (attribute.getComponentSize() >= 4) return;\n\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = new Float32Array(srcArray.length);\n\n\tfor (let i = 0, il = attribute.getCount(), el = [] as number[]; i < il; i++) {\n\t\tel = attribute.getElement(i, el);\n\t\tattribute.setArray(dstArray).setElement(i, el).setArray(srcArray);\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(false);\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { KHRDracoMeshCompression } from '@gltf-transform/extensions';\nimport { createTransform } from './utils.js';\nimport { weld } from './weld.js';\n\nconst NAME = 'draco';\n\nexport interface DracoOptions {\n\tmethod?: 'edgebreaker' | 'sequential';\n\tencodeSpeed?: number;\n\tdecodeSpeed?: number;\n\tquantizePosition?: number;\n\tquantizeNormal?: number;\n\tquantizeColor?: number;\n\tquantizeTexcoord?: number;\n\tquantizeGeneric?: number;\n\tquantizationVolume?: 'mesh' | 'scene';\n}\n\nexport const DRACO_DEFAULTS: DracoOptions = {\n\tmethod: 'edgebreaker',\n\tencodeSpeed: 5,\n\tdecodeSpeed: 5,\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeColor: 8,\n\tquantizeTexcoord: 12,\n\tquantizeGeneric: 12,\n\tquantizationVolume: 'mesh',\n};\n\n/**\n * Applies Draco compression using {@link KHRDracoMeshCompression KHR_draco_mesh_compression}.\n * This type of compression can reduce the size of triangle geometry.\n *\n * This function is a thin wrapper around the {@link KHRDracoMeshCompression} extension itself.\n *\n * @category Transforms\n */\nexport function draco(_options: DracoOptions = DRACO_DEFAULTS): Transform {\n\tconst options = { ...DRACO_DEFAULTS, ..._options } as Required<DracoOptions>;\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tawait document.transform(weld({ tolerance: 0 }));\n\t\tdocument\n\t\t\t.createExtension(KHRDracoMeshCompression)\n\t\t\t.setRequired(true)\n\t\t\t.setEncoderOptions({\n\t\t\t\tmethod:\n\t\t\t\t\toptions.method === 'edgebreaker'\n\t\t\t\t\t\t? KHRDracoMeshCompression.EncoderMethod.EDGEBREAKER\n\t\t\t\t\t\t: KHRDracoMeshCompression.EncoderMethod.SEQUENTIAL,\n\t\t\t\tencodeSpeed: options.encodeSpeed,\n\t\t\t\tdecodeSpeed: options.decodeSpeed,\n\t\t\t\tquantizationBits: {\n\t\t\t\t\tPOSITION: options.quantizePosition,\n\t\t\t\t\tNORMAL: options.quantizeNormal,\n\t\t\t\t\tCOLOR: options.quantizeColor,\n\t\t\t\t\tTEX_COORD: options.quantizeTexcoord,\n\t\t\t\t\tGENERIC: options.quantizeGeneric,\n\t\t\t\t},\n\t\t\t\tquantizationVolume: options.quantizationVolume,\n\t\t\t});\n\t});\n}\n","import { Document, Node, PropertyType, Transform } from '@gltf-transform/core';\nimport { clearNodeParent } from './clear-node-parent.js';\nimport { prune } from './prune.js';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'flatten';\n\n/** Options for the {@link flatten} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface FlattenOptions {}\n\nexport const FLATTEN_DEFAULTS: Required<FlattenOptions> = {};\n\n/**\n * Flattens the scene graph, leaving {@link Node Nodes} with\n * {@link Mesh Meshes}, {@link Camera Cameras}, and other attachments\n * as direct children of the {@link Scene}. Skeletons and their\n * descendants are left in their original Node structure.\n *\n * {@link Animation} targeting a Node or its parents will\n * prevent that Node from being moved.\n *\n * Example:\n *\n * ```ts\n * import { flatten } from '@gltf-transform/functions';\n *\n * await document.transform(flatten());\n * ```\n *\n * @category Transforms\n */\nexport function flatten(_options: FlattenOptions = FLATTEN_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...FLATTEN_DEFAULTS, ..._options } as Required<FlattenOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst root = document.getRoot();\n\t\tconst logger = document.getLogger();\n\n\t\t// (1) Mark joints.\n\t\tconst joints = new Set<Node>();\n\t\tfor (const skin of root.listSkins()) {\n\t\t\tfor (const joint of skin.listJoints()) {\n\t\t\t\tjoints.add(joint);\n\t\t\t}\n\t\t}\n\n\t\t// (2) Mark nodes with TRS animation.\n\t\tconst animated = new Set<Node>();\n\t\tfor (const animation of root.listAnimations()) {\n\t\t\tfor (const channel of animation.listChannels()) {\n\t\t\t\tconst node = channel.getTargetNode();\n\t\t\t\tif (node && channel.getTargetPath() !== 'weights') {\n\t\t\t\t\tanimated.add(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (3) Mark descendants of joints and animated nodes.\n\t\tconst hasJointParent = new Set<Node>();\n\t\tconst hasAnimatedParent = new Set<Node>();\n\t\tfor (const scene of root.listScenes()) {\n\t\t\tscene.traverse((node) => {\n\t\t\t\tconst parent = node.getParentNode();\n\t\t\t\tif (!parent) return;\n\t\t\t\tif (joints.has(parent) || hasJointParent.has(parent)) {\n\t\t\t\t\thasJointParent.add(node);\n\t\t\t\t}\n\t\t\t\tif (animated.has(parent) || hasAnimatedParent.has(parent)) {\n\t\t\t\t\thasAnimatedParent.add(node);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// (4) For each affected node, in top-down order, clear parents.\n\t\tfor (const scene of root.listScenes()) {\n\t\t\tscene.traverse((node) => {\n\t\t\t\tif (animated.has(node)) return;\n\t\t\t\tif (hasJointParent.has(node)) return;\n\t\t\t\tif (hasAnimatedParent.has(node)) return;\n\n\t\t\t\tclearNodeParent(node);\n\t\t\t});\n\t\t}\n\n\t\t// TODO(feat): Transform animation channels, accounting for previously inherited transforms.\n\t\tif (animated.size) {\n\t\t\tlogger.debug(`${NAME}: Flattening node hierarchies with TRS animation not yet supported.`);\n\t\t}\n\n\t\t// (5) Clean up leaf nodes.\n\t\tawait document.transform(prune({ propertyTypes: [PropertyType.NODE], keepLeaves: false }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import {\n\tAccessor,\n\tDocument,\n\tExtensionProperty,\n\tGLTF,\n\tImageUtils,\n\tTexture,\n\tgetBounds,\n\tPropertyType,\n} from '@gltf-transform/core';\nimport { getGLPrimitiveCount } from './utils.js';\nimport { KHR_DF_MODEL_ETC1S, KHR_DF_MODEL_UASTC, read as readKTX } from 'ktx-parse';\n\n/** Inspects the contents of a glTF file and returns a JSON report. */\nexport function inspect(doc: Document): InspectReport {\n\treturn {\n\t\tscenes: listScenes(doc),\n\t\tmeshes: listMeshes(doc),\n\t\tmaterials: listMaterials(doc),\n\t\ttextures: listTextures(doc),\n\t\tanimations: listAnimations(doc),\n\t};\n}\n\n/** List scenes. */\nfunction listScenes(doc: Document): InspectPropertyReport<InspectSceneReport> {\n\tconst scenes = doc\n\t\t.getRoot()\n\t\t.listScenes()\n\t\t.map((scene) => {\n\t\t\tconst root = scene.listChildren()[0];\n\t\t\tconst sceneBounds = getBounds(scene);\n\t\t\treturn {\n\t\t\t\tname: scene.getName(),\n\t\t\t\trootName: root ? root.getName() : '',\n\t\t\t\tbboxMin: toPrecision(sceneBounds.min),\n\t\t\t\tbboxMax: toPrecision(sceneBounds.max),\n\t\t\t};\n\t\t});\n\treturn { properties: scenes };\n}\n\n/** List meshes. */\nfunction listMeshes(doc: Document): InspectPropertyReport<InspectMeshReport> {\n\tconst meshes: InspectMeshReport[] = doc\n\t\t.getRoot()\n\t\t.listMeshes()\n\t\t.map((mesh) => {\n\t\t\tconst instances = mesh.listParents().filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\t\t\tlet glPrimitives = 0;\n\t\t\tlet verts = 0;\n\t\t\tconst semantics = new Set<string>();\n\t\t\tconst meshIndices = new Set<string>();\n\t\t\tconst meshAccessors: Set<Accessor> = new Set();\n\n\t\t\tmesh.listPrimitives().forEach((prim) => {\n\t\t\t\tfor (const semantic of prim.listSemantics()) {\n\t\t\t\t\tconst attr = prim.getAttribute(semantic)!;\n\t\t\t\t\tsemantics.add(semantic + ':' + accessorToTypeLabel(attr));\n\t\t\t\t\tmeshAccessors.add(attr);\n\t\t\t\t}\n\t\t\t\tfor (const targ of prim.listTargets()) {\n\t\t\t\t\ttarg.listAttributes().forEach((attr) => meshAccessors.add(attr));\n\t\t\t\t}\n\t\t\t\tconst indices = prim.getIndices();\n\t\t\t\tif (indices) {\n\t\t\t\t\tmeshIndices.add(accessorToTypeLabel(indices));\n\t\t\t\t\tmeshAccessors.add(indices);\n\t\t\t\t}\n\t\t\t\tverts += prim.listAttributes()[0].getCount();\n\t\t\t\tglPrimitives += getGLPrimitiveCount(prim);\n\t\t\t});\n\n\t\t\tlet size = 0;\n\t\t\tArray.from(meshAccessors).forEach((a) => (size += a.getArray()!.byteLength));\n\n\t\t\tconst modes = mesh.listPrimitives().map((prim) => MeshPrimitiveModeLabels[prim.getMode()]);\n\n\t\t\treturn {\n\t\t\t\tname: mesh.getName(),\n\t\t\t\tmode: Array.from(new Set(modes)),\n\t\t\t\tprimitives: mesh.listPrimitives().length,\n\t\t\t\tglPrimitives: glPrimitives,\n\t\t\t\tvertices: verts,\n\t\t\t\tindices: Array.from(meshIndices).sort(),\n\t\t\t\tattributes: Array.from(semantics).sort(),\n\t\t\t\tinstances: instances,\n\t\t\t\tsize: size,\n\t\t\t};\n\t\t});\n\n\treturn { properties: meshes };\n}\n\n/** List materials. */\nfunction listMaterials(doc: Document): InspectPropertyReport<InspectMaterialReport> {\n\tconst materials: InspectMaterialReport[] = doc\n\t\t.getRoot()\n\t\t.listMaterials()\n\t\t.map((material) => {\n\t\t\tconst instances = material\n\t\t\t\t.listParents()\n\t\t\t\t.filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\n\t\t\t// Find all texture slots attached to this material or its extensions.\n\t\t\tconst extensions = new Set<ExtensionProperty>(material.listExtensions());\n\t\t\tconst slots = doc\n\t\t\t\t.getGraph()\n\t\t\t\t.listEdges()\n\t\t\t\t.filter((ref) => {\n\t\t\t\t\tconst child = ref.getChild();\n\t\t\t\t\tconst parent = ref.getParent();\n\t\t\t\t\tif (child instanceof Texture && parent === material) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (child instanceof Texture && parent instanceof ExtensionProperty && extensions.has(parent)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t})\n\t\t\t\t.map((ref) => ref.getName());\n\n\t\t\treturn {\n\t\t\t\tname: material.getName(),\n\t\t\t\tinstances,\n\t\t\t\ttextures: slots,\n\t\t\t\talphaMode: material.getAlphaMode(),\n\t\t\t\tdoubleSided: material.getDoubleSided(),\n\t\t\t};\n\t\t});\n\n\treturn { properties: materials };\n}\n\n/** List textures. */\nfunction listTextures(doc: Document): InspectPropertyReport<InspectTextureReport> {\n\tconst textures: InspectTextureReport[] = doc\n\t\t.getRoot()\n\t\t.listTextures()\n\t\t.map((texture) => {\n\t\t\tconst instances = texture\n\t\t\t\t.listParents()\n\t\t\t\t.filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\n\t\t\tconst slots = doc\n\t\t\t\t.getGraph()\n\t\t\t\t.listParentEdges(texture)\n\t\t\t\t.filter((edge) => edge.getParent().propertyType !== PropertyType.ROOT)\n\t\t\t\t.map((edge) => edge.getName());\n\n\t\t\tconst resolution = ImageUtils.getSize(texture.getImage()!, texture.getMimeType());\n\n\t\t\tlet compression = '';\n\t\t\tif (texture.getMimeType() === 'image/ktx2') {\n\t\t\t\tconst container = readKTX(texture.getImage()!);\n\t\t\t\tconst dfd = container.dataFormatDescriptor[0];\n\t\t\t\tif (dfd.colorModel === KHR_DF_MODEL_ETC1S) {\n\t\t\t\t\tcompression = 'ETC1S';\n\t\t\t\t} else if (dfd.colorModel === KHR_DF_MODEL_UASTC) {\n\t\t\t\t\tcompression = 'UASTC';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tname: texture.getName(),\n\t\t\t\turi: texture.getURI(),\n\t\t\t\tslots: Array.from(new Set(slots)),\n\t\t\t\tinstances,\n\t\t\t\tmimeType: texture.getMimeType(),\n\t\t\t\tcompression,\n\t\t\t\tresolution: resolution ? resolution.join('x') : '',\n\t\t\t\tsize: texture.getImage()!.byteLength,\n\t\t\t\tgpuSize: ImageUtils.getVRAMByteLength(texture.getImage()!, texture.getMimeType()),\n\t\t\t};\n\t\t});\n\n\treturn { properties: textures };\n}\n\n/** List animations. */\nfunction listAnimations(doc: Document): InspectPropertyReport<InspectAnimationReport> {\n\tconst animations: InspectAnimationReport[] = doc\n\t\t.getRoot()\n\t\t.listAnimations()\n\t\t.map((anim) => {\n\t\t\tlet minTime = Infinity;\n\t\t\tlet maxTime = -Infinity;\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tif (!input) return;\n\t\t\t\tminTime = Math.min(minTime, input.getMin([])[0]);\n\t\t\t\tmaxTime = Math.max(maxTime, input.getMax([])[0]);\n\t\t\t});\n\n\t\t\tlet size = 0;\n\t\t\tlet keyframes = 0;\n\t\t\tconst accessors: Set<Accessor> = new Set();\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\tif (!input) return;\n\t\t\t\tkeyframes += input.getCount();\n\t\t\t\taccessors.add(input);\n\t\t\t\tif (!output) return;\n\t\t\t\taccessors.add(output);\n\t\t\t});\n\t\t\tArray.from(accessors).forEach((accessor) => {\n\t\t\t\tsize += accessor.getArray()!.byteLength;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tname: anim.getName(),\n\t\t\t\tchannels: anim.listChannels().length,\n\t\t\t\tsamplers: anim.listSamplers().length,\n\t\t\t\tduration: Math.round((maxTime - minTime) * 1000) / 1000,\n\t\t\t\tkeyframes: keyframes,\n\t\t\t\tsize: size,\n\t\t\t};\n\t\t});\n\n\treturn { properties: animations };\n}\n\nexport interface InspectReport {\n\tscenes: InspectPropertyReport<InspectSceneReport>;\n\tmeshes: InspectPropertyReport<InspectMeshReport>;\n\tmaterials: InspectPropertyReport<InspectMaterialReport>;\n\ttextures: InspectPropertyReport<InspectTextureReport>;\n\tanimations: InspectPropertyReport<InspectAnimationReport>;\n}\n\nexport interface InspectPropertyReport<T> {\n\tproperties: T[];\n\terrors?: string[];\n\twarnings?: string[];\n}\n\nexport interface InspectSceneReport {\n\tname: string;\n\trootName: string;\n\tbboxMin: number[];\n\tbboxMax: number[];\n}\n\nexport interface InspectMeshReport {\n\tname: string;\n\tprimitives: number;\n\tmode: string[];\n\tvertices: number;\n\tglPrimitives: number;\n\tindices: string[];\n\tattributes: string[];\n\tinstances: number;\n\tsize: number;\n}\n\nexport interface InspectMaterialReport {\n\tname: string;\n\tinstances: number;\n\ttextures: string[];\n\talphaMode: GLTF.MaterialAlphaMode;\n\tdoubleSided: boolean;\n}\n\nexport interface InspectTextureReport {\n\tname: string;\n\turi: string;\n\tslots: string[];\n\tinstances: number;\n\tmimeType: string;\n\tresolution: string;\n\tcompression: string;\n\tsize: number;\n\tgpuSize: number | null;\n}\n\nexport interface InspectAnimationReport {\n\tname: string;\n\tchannels: number;\n\tsamplers: number;\n\tkeyframes: number;\n\tduration: number;\n\tsize: number;\n}\n\nconst MeshPrimitiveModeLabels = [\n\t'POINTS',\n\t'LINES',\n\t'LINE_LOOP',\n\t'LINE_STRIP',\n\t'TRIANGLES',\n\t'TRIANGLE_STRIP',\n\t'TRIANGLE_FAN',\n];\n\nconst NumericTypeLabels: Record<string, string> = {\n\tFloat32Array: 'f32',\n\tUint32Array: 'u32',\n\tUint16Array: 'u16',\n\tUint8Array: 'u8',\n\tInt32Array: 'i32',\n\tInt16Array: 'i16',\n\tInt8Array: 'i8',\n};\n\n/** Maps values in a vector to a finite precision. */\nfunction toPrecision(v: number[]): number[] {\n\tfor (let i = 0; i < v.length; i++) {\n\t\tif ((v[i] as number).toFixed) v[i] = Number(v[i].toFixed(5));\n\t}\n\treturn v;\n}\n\nfunction accessorToTypeLabel(accessor: Accessor): string {\n\tconst array = accessor.getArray()!;\n\tconst base = NumericTypeLabels[array.constructor.name] || '?';\n\tconst suffix = accessor.getNormalized() ? '_norm' : '';\n\treturn base + suffix;\n}\n","import { Document, ILogger, MathUtils, Mesh, Node, Primitive, Transform, vec3, vec4 } from '@gltf-transform/core';\nimport { InstancedMesh, EXTMeshGPUInstancing } from '@gltf-transform/extensions';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'instance';\n\nexport interface InstanceOptions {\n\t/** Minimum number of meshes considered eligible for instancing. Default: 2. */\n\tmin?: number;\n}\n\nconst INSTANCE_DEFAULTS: Required<InstanceOptions> = {\n\tmin: 2,\n};\n\n/**\n * Creates GPU instances (with `EXT_mesh_gpu_instancing`) for shared {@link Mesh} references. In\n * engines supporting the extension, reused Meshes will be drawn with GPU instancing, greatly\n * reducing draw calls and improving performance in many cases. If you're not sure that identical\n * Meshes share vertex data and materials (\"linked duplicates\"), run {@link dedup} first to link them.\n *\n * Example:\n *\n * ```javascript\n * import { dedup, instance } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tdedup(),\n * \tinstance({min: 2}),\n * );\n * ```\n *\n * @category Transforms\n */\nexport function instance(_options: InstanceOptions = INSTANCE_DEFAULTS): Transform {\n\tconst options = { ...INSTANCE_DEFAULTS, ..._options } as Required<InstanceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\n\t\tif (root.listAnimations().length) {\n\t\t\tlogger.warn(`${NAME}: Instancing is not currently supported for animated models.`);\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst batchExtension = doc.createExtension(EXTMeshGPUInstancing);\n\n\t\tlet numBatches = 0;\n\t\tlet numInstances = 0;\n\n\t\tfor (const scene of root.listScenes()) {\n\t\t\t// Gather a one-to-many Mesh/Node mapping, identifying what we can instance.\n\t\t\tconst meshInstances = new Map<Mesh, Set<Node>>();\n\t\t\tscene.traverse((node) => {\n\t\t\t\tconst mesh = node.getMesh();\n\t\t\t\tif (!mesh) return;\n\t\t\t\tmeshInstances.set(mesh, (meshInstances.get(mesh) || new Set<Node>()).add(node));\n\t\t\t});\n\n\t\t\t// For each Mesh, create an InstancedMesh and collect transforms.\n\t\t\tconst modifiedNodes = [];\n\t\t\tfor (const mesh of Array.from(meshInstances.keys())) {\n\t\t\t\tconst nodes = Array.from(meshInstances.get(mesh)!);\n\t\t\t\tif (nodes.length < options.min) continue;\n\t\t\t\tif (nodes.some((node) => node.getSkin())) continue;\n\n\t\t\t\t// Cannot preserve volumetric effects when instancing with varying scale.\n\t\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/AttenuationTest\n\t\t\t\tif (mesh.listPrimitives().some(hasVolume) && nodes.some(hasScale)) continue;\n\n\t\t\t\tconst batch = createBatch(doc, batchExtension, mesh, nodes.length);\n\t\t\t\tconst batchTranslation = batch.getAttribute('TRANSLATION')!;\n\t\t\t\tconst batchRotation = batch.getAttribute('ROTATION')!;\n\t\t\t\tconst batchScale = batch.getAttribute('SCALE')!;\n\n\t\t\t\tconst batchNode = doc.createNode().setMesh(mesh).setExtension('EXT_mesh_gpu_instancing', batch);\n\t\t\t\tscene.addChild(batchNode);\n\n\t\t\t\tlet needsTranslation = false;\n\t\t\t\tlet needsRotation = false;\n\t\t\t\tlet needsScale = false;\n\n\t\t\t\t// For each Node, write TRS properties into instance attributes.\n\t\t\t\tfor (let i = 0; i < nodes.length; i++) {\n\t\t\t\t\tlet t: vec3, r: vec4, s: vec3;\n\t\t\t\t\tconst node = nodes[i];\n\n\t\t\t\t\tbatchTranslation.setElement(i, (t = node.getWorldTranslation()));\n\t\t\t\t\tbatchRotation.setElement(i, (r = node.getWorldRotation()));\n\t\t\t\t\tbatchScale.setElement(i, (s = node.getWorldScale()));\n\n\t\t\t\t\tif (!MathUtils.eq(t, [0, 0, 0])) needsTranslation = true;\n\t\t\t\t\tif (!MathUtils.eq(r, [0, 0, 0, 1])) needsRotation = true;\n\t\t\t\t\tif (!MathUtils.eq(s, [1, 1, 1])) needsScale = true;\n\n\t\t\t\t\t// Mark the node for cleanup.\n\t\t\t\t\tnode.setMesh(null);\n\t\t\t\t\tmodifiedNodes.push(node);\n\t\t\t\t}\n\n\t\t\t\tif (!needsTranslation) batchTranslation.dispose();\n\t\t\t\tif (!needsRotation) batchRotation.dispose();\n\t\t\t\tif (!needsScale) batchScale.dispose();\n\n\t\t\t\tpruneUnusedNodes(modifiedNodes, logger);\n\n\t\t\t\tnumBatches++;\n\t\t\t\tnumInstances += nodes.length;\n\t\t\t}\n\t\t}\n\n\t\tif (numBatches > 0) {\n\t\t\tlogger.info(`${NAME}: Created ${numBatches} batches, with ${numInstances} total instances.`);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No meshes with >=${options.min} parent nodes were found.`);\n\t\t}\n\n\t\tif (batchExtension.listProperties().length === 0) {\n\t\t\tbatchExtension.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction pruneUnusedNodes(nodes: Node[], logger: ILogger): void {\n\tlet node: Node | undefined;\n\tlet unusedNodes = 0;\n\twhile ((node = nodes.pop())) {\n\t\tif (\n\t\t\tnode.listChildren().length ||\n\t\t\tnode.getCamera() ||\n\t\t\tnode.getMesh() ||\n\t\t\tnode.getSkin() ||\n\t\t\tnode.listExtensions().length\n\t\t) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst nodeParent = node.getParentNode();\n\t\tif (nodeParent) nodes.push(nodeParent);\n\t\tnode.dispose();\n\t\tunusedNodes++;\n\t}\n\n\tlogger.debug(`${NAME}: Removed ${unusedNodes} unused nodes.`);\n}\n\nfunction hasVolume(prim: Primitive) {\n\tconst material = prim.getMaterial();\n\treturn !!(material && material.getExtension('KHR_materials_volume'));\n}\n\nfunction hasScale(node: Node) {\n\tconst scale = node.getWorldScale();\n\treturn !MathUtils.eq(scale, [1, 1, 1]);\n}\n\nfunction createBatch(doc: Document, batchExtension: EXTMeshGPUInstancing, mesh: Mesh, count: number): InstancedMesh {\n\tconst buffer = mesh.listPrimitives()[0].getAttribute('POSITION')!.getBuffer();\n\n\tconst batchTranslation = doc\n\t\t.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\tconst batchRotation = doc\n\t\t.createAccessor()\n\t\t.setType('VEC4')\n\t\t.setArray(new Float32Array(4 * count))\n\t\t.setBuffer(buffer);\n\tconst batchScale = doc\n\t\t.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\n\treturn batchExtension\n\t\t.createInstancedMesh()\n\t\t.setAttribute('TRANSLATION', batchTranslation)\n\t\t.setAttribute('ROTATION', batchRotation)\n\t\t.setAttribute('SCALE', batchScale);\n}\n","import { Document, Primitive, ComponentTypeToTypedArray } from '@gltf-transform/core';\nimport { createIndices, createPrimGroupKey } from './utils.js';\n\ninterface JoinPrimitiveOptions {\n\tskipValidation?: boolean;\n}\n\nconst JOIN_PRIMITIVE_DEFAULTS: Required<JoinPrimitiveOptions> = {\n\tskipValidation: false,\n};\n\n/**\n * Given a list of compatible Mesh {@link Primitive Primitives}, returns new Primitive\n * containing their vertex data. Compatibility requires that all Primitives share the\n * same {@link Material Materials}, draw mode, and vertex attribute types. Primitives\n * using morph targets cannot currently be joined.\n *\n * Example:\n *\n * ```javascript\n * import { joinPrimitives } from '@gltf-transform/functions';\n *\n * // Succeeds if Primitives are compatible, or throws an error.\n * const result = joinPrimitives(mesh.listPrimitives());\n *\n * for (const prim of mesh.listPrimitives()) {\n * \tprim.dispose();\n * }\n *\n * mesh.addPrimitive(result);\n * ```\n */\nexport function joinPrimitives(prims: Primitive[], options: JoinPrimitiveOptions = {}): Primitive {\n\toptions = { ...JOIN_PRIMITIVE_DEFAULTS, ...options };\n\tconst templatePrim = prims[0]!;\n\tconst document = Document.fromGraph(templatePrim.getGraph())!;\n\n\t// (1) Validation.\n\tif (!options.skipValidation && new Set(prims.map(createPrimGroupKey)).size > 1) {\n\t\tthrow new Error(\n\t\t\t'' +\n\t\t\t\t'Requires >=2 Primitives, sharing the same Material ' +\n\t\t\t\t'and Mode, with compatible vertex attributes and indices.',\n\t\t);\n\t}\n\n\tconst remapList = [] as Uint32Array[]; // remap[srcIndex] → dstIndex, by prim\n\tconst countList = [] as number[]; // vertex count, by prim\n\tconst indicesList = [] as (Uint32Array | Uint16Array)[]; // indices, by prim\n\n\tlet dstVertexCount = 0;\n\tlet dstIndicesCount = 0;\n\n\t// (2) Build remap lists.\n\tfor (const srcPrim of prims) {\n\t\tconst indices = _getOrCreateIndices(srcPrim);\n\t\tconst remap = [];\n\t\tlet count = 0;\n\t\tfor (let i = 0; i < indices.length; i++) {\n\t\t\tconst index = indices[i];\n\t\t\tif (remap[index] === undefined) {\n\t\t\t\tremap[index] = dstVertexCount++;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tdstIndicesCount++;\n\t\t}\n\t\tremapList.push(new Uint32Array(remap));\n\t\tcountList.push(count);\n\t\tindicesList.push(indices);\n\t}\n\n\t// (3) Allocate joined attributes.\n\tconst dstPrim = document.createPrimitive().setMode(templatePrim.getMode()).setMaterial(templatePrim.getMaterial());\n\tfor (const semantic of templatePrim.listSemantics()) {\n\t\tconst tplAttribute = templatePrim.getAttribute(semantic)!;\n\t\tconst AttributeArray = ComponentTypeToTypedArray[tplAttribute.getComponentType()];\n\t\tconst dstAttribute = document\n\t\t\t.createAccessor()\n\t\t\t.setType(tplAttribute.getType())\n\t\t\t.setBuffer(tplAttribute.getBuffer())\n\t\t\t.setNormalized(tplAttribute.getNormalized())\n\t\t\t.setArray(new AttributeArray(dstVertexCount * tplAttribute.getElementSize()));\n\t\tdstPrim.setAttribute(semantic, dstAttribute);\n\t}\n\n\t// (4) Allocate joined indices.\n\tconst dstIndicesArray = templatePrim.getIndices() ? createIndices(dstVertexCount) : null;\n\tconst dstIndices =\n\t\tdstIndicesArray &&\n\t\tdocument\n\t\t\t.createAccessor()\n\t\t\t.setBuffer(templatePrim.getIndices()!.getBuffer())\n\t\t\t.setArray(createIndices(dstIndicesCount, dstVertexCount));\n\tdstPrim.setIndices(dstIndices);\n\n\t// (5) Remap attributes into joined Primitive.\n\tlet dstNextIndex = 0;\n\tfor (let primIndex = 0; primIndex < remapList.length; primIndex++) {\n\t\tconst srcPrim = prims[primIndex];\n\t\tconst remap = remapList[primIndex];\n\t\tconst indicesArray = indicesList[primIndex];\n\n\t\tconst primStartIndex = dstNextIndex;\n\t\tlet primNextIndex = primStartIndex;\n\n\t\tfor (const semantic of dstPrim.listSemantics()) {\n\t\t\tconst srcAttribute = srcPrim.getAttribute(semantic)!;\n\t\t\tconst dstAttribute = dstPrim.getAttribute(semantic)!;\n\t\t\tconst el = [] as number[];\n\n\t\t\tprimNextIndex = primStartIndex;\n\t\t\tfor (let i = 0; i < indicesArray.length; i++) {\n\t\t\t\tconst index = indicesArray[i];\n\t\t\t\tsrcAttribute.getElement(index, el);\n\t\t\t\tdstAttribute.setElement(remap[index], el);\n\t\t\t\tif (dstIndices) {\n\t\t\t\t\tdstIndices.setScalar(primNextIndex++, remap[index]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdstNextIndex = primNextIndex;\n\t}\n\n\treturn dstPrim;\n}\n\nfunction _getOrCreateIndices(prim: Primitive): Uint16Array | Uint32Array {\n\tconst indices = prim.getIndices();\n\tif (indices) return indices.getArray() as Uint32Array | Uint16Array;\n\tconst position = prim.getAttribute('POSITION')!;\n\treturn createIndices(position.getCount());\n}\n","import {\n\tAnimationChannel,\n\tDocument,\n\tmat4,\n\tMesh,\n\tNode,\n\tPrimitive,\n\tPropertyType,\n\tScene,\n\tTransform,\n} from '@gltf-transform/core';\nimport { invert, multiply } from 'gl-matrix/mat4';\nimport { joinPrimitives } from './join-primitives.js';\nimport { prune } from './prune.js';\nimport { transformPrimitive } from './transform-primitive.js';\nimport { createPrimGroupKey, createTransform, formatLong, isUsed } from './utils.js';\nimport { dequantizeAttribute } from './dequantize.js';\n\nconst NAME = 'join';\n\nconst { ROOT, NODE, MESH, PRIMITIVE, ACCESSOR } = PropertyType;\n\n// prettier-ignore\nconst _matrix = [\n\t0, 0, 0, 0,\n\t0, 0, 0, 0,\n\t0, 0, 0, 0,\n\t0, 0, 0, 0,\n] as mat4;\n\n/** Options for the {@link join} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface JoinOptions {\n\t/**\n\t * Prevents joining distinct {@link Mesh Meshes} and {@link Node Nodes}.\n\t * Joins only Primitives found within the same parent Mesh. To preserve\n\t * only _named_ Nodes and Meshes, use\n\t * {@link JoinOptions.keepNamed keepNamed} instead. Default: false.\n\t */\n\tkeepMeshes: boolean;\n\t/**\n\t * Prevents joining _named_ {@link Mesh Meshes} and {@link Node Nodes}.\n\t * If {@link JoinOptions.keepMeshes keepMeshes} is enabled, keepNamed will\n\t * have no effect. Default: false.\n\t */\n\tkeepNamed: boolean;\n}\n\nexport const JOIN_DEFAULTS: Required<JoinOptions> = {\n\tkeepMeshes: false,\n\tkeepNamed: false,\n};\n\n/**\n * Joins compatible {@link Primitive Primitives} and reduces draw calls.\n * Primitives are eligible for joining if they are members of the same\n * {@link Mesh} or, optionally, attached to sibling {@link Node Nodes}\n * in the scene hierarchy. For best results, apply {@link dedup} and\n * {@link flatten} first to maximize the number of Primitives that\n * can be joined.\n *\n * NOTE: In a Scene that heavily reuses the same Mesh data, joining may\n * increase vertex count. Consider alternatives, like\n * {@link instance instancing} with {@link EXTMeshGPUInstancing}.\n *\n * Example:\n *\n * ```ts\n * import { PropertyType } from '@gltf-transform/core';\n * import { join, flatten, dedup } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tdedup({ propertyTypes: [PropertyType.MATERIAL] }),\n * \tflatten(),\n * \tjoin({ keepNamed: false }),\n * );\n * ```\n *\n * @category Transforms\n */\nexport function join(_options: JoinOptions = JOIN_DEFAULTS): Transform {\n\tconst options = { ...JOIN_DEFAULTS, ..._options } as Required<JoinOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst root = document.getRoot();\n\t\tconst logger = document.getLogger();\n\n\t\t// Join.\n\t\tfor (const scene of root.listScenes()) {\n\t\t\t_joinLevel(document, scene, options);\n\t\t\tscene.traverse((node) => _joinLevel(document, node, options));\n\t\t}\n\n\t\t// Clean up.\n\t\tawait document.transform(\n\t\t\tprune({\n\t\t\t\tpropertyTypes: [NODE, MESH, PRIMITIVE, ACCESSOR],\n\t\t\t\tkeepAttributes: true,\n\t\t\t\tkeepIndices: true,\n\t\t\t\tkeepLeaves: false,\n\t\t\t}),\n\t\t);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\ninterface IJoinGroup {\n\tkey: string;\n\tprims: Primitive[];\n\tprimMeshes: Mesh[];\n\tprimNodes: Node[];\n\tdstNode: Node;\n\tdstMesh?: Mesh | undefined;\n}\n\nfunction _joinLevel(document: Document, parent: Node | Scene, options: Required<JoinOptions>) {\n\tconst logger = document.getLogger();\n\tconst groups = {} as Record<string, IJoinGroup>;\n\n\t// Scan for compatible Primitives.\n\tconst children = parent.listChildren();\n\tfor (let nodeIndex = 0; nodeIndex < children.length; nodeIndex++) {\n\t\tconst node = children[nodeIndex];\n\n\t\t// Skip animated nodes.\n\t\tconst isAnimated = node.listParents().some((p) => p instanceof AnimationChannel);\n\t\tif (isAnimated) continue;\n\n\t\t// Skip nodes without meshes.\n\t\tconst mesh = node.getMesh();\n\t\tif (!mesh) continue;\n\n\t\t// Skip nodes with instancing; unsupported.\n\t\tif (node.getExtension('EXT_mesh_gpu_instancing')) continue;\n\n\t\t// Skip nodes with skinning; unsupported.\n\t\tif (node.getSkin()) continue;\n\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t// Skip prims with morph targets; unsupported.\n\t\t\tif (prim.listTargets().length > 0) continue;\n\n\t\t\t// Skip prims with volumetric materials; unsupported.\n\t\t\tconst material = prim.getMaterial();\n\t\t\tif (material && material.getExtension('KHR_materials_volume')) continue;\n\n\t\t\tdequantizeTransformableAttributes(prim);\n\n\t\t\tlet key = createPrimGroupKey(prim);\n\n\t\t\tconst isNamed = mesh.getName() || node.getName();\n\t\t\tif (options.keepMeshes || (options.keepNamed && isNamed)) {\n\t\t\t\tkey += `|${nodeIndex}`;\n\t\t\t}\n\n\t\t\tif (!(key in groups)) {\n\t\t\t\tgroups[key] = {\n\t\t\t\t\tprims: [] as Primitive[],\n\t\t\t\t\tprimMeshes: [] as Mesh[],\n\t\t\t\t\tprimNodes: [] as Node[],\n\t\t\t\t\tdstNode: node,\n\t\t\t\t\tdstMesh: undefined,\n\t\t\t\t} as IJoinGroup;\n\t\t\t}\n\n\t\t\tconst group = groups[key];\n\t\t\tgroup.prims.push(prim);\n\t\t\tgroup.primNodes.push(node);\n\t\t}\n\t}\n\n\t// Discard single-Primitive groups.\n\tconst joinGroups = Object.values(groups).filter(({ prims }) => prims.length > 1);\n\n\t// Unlink all affected Meshes at current level, before modifying Primitives.\n\tconst srcNodes = new Set<Node>(joinGroups.flatMap((group) => group.primNodes));\n\tfor (const node of srcNodes) {\n\t\tconst mesh = node.getMesh()!;\n\t\tconst isSharedMesh = mesh.listParents().some((parent) => {\n\t\t\treturn parent.propertyType !== ROOT && node !== parent;\n\t\t});\n\t\tif (isSharedMesh) {\n\t\t\tnode.setMesh(mesh.clone());\n\t\t}\n\t}\n\n\t// Update Meshes in groups.\n\tfor (const group of joinGroups) {\n\t\tconst { dstNode, primNodes } = group;\n\t\tgroup.dstMesh = dstNode.getMesh()!;\n\t\tgroup.primMeshes = primNodes.map((node) => node.getMesh()!);\n\t}\n\n\t// Join Primitives.\n\tfor (const group of joinGroups) {\n\t\tconst { prims, primNodes, primMeshes, dstNode, dstMesh } = group as Required<IJoinGroup>;\n\t\tconst dstMatrix = dstNode.getMatrix();\n\n\t\tfor (let i = 0; i < prims.length; i++) {\n\t\t\tconst primNode = primNodes[i];\n\t\t\tconst primMesh = primMeshes[i];\n\n\t\t\tlet prim = prims[i];\n\t\t\tprimMesh.removePrimitive(prim);\n\n\t\t\t// Primitives may be reused directly, or their attributes may be\n\t\t\t// used in another Primitive with a different Material.\n\t\t\tif (isUsed(prim) || hasSharedAttributes(prim)) {\n\t\t\t\tprim = prims[i] = _deepClonePrimitive(prims[i]);\n\t\t\t}\n\n\t\t\t// Transform Primitive into new local coordinate space.\n\t\t\tif (primNode !== dstNode) {\n\t\t\t\tmultiply(_matrix, invert(_matrix, dstMatrix), primNode.getMatrix());\n\t\t\t\ttransformPrimitive(prim, _matrix);\n\t\t\t}\n\t\t}\n\n\t\tconst dstPrim = joinPrimitives(prims);\n\t\tconst dstVertexCount = dstPrim.listAttributes()[0].getCount();\n\t\tdstMesh.addPrimitive(dstPrim);\n\n\t\tlogger.debug(\n\t\t\t`${NAME}: Joined Primitives (${prims.length}) containing ` +\n\t\t\t\t`${formatLong(dstVertexCount)} vertices under Node \"${dstNode.getName()}\".`,\n\t\t);\n\t}\n}\n\nfunction _deepClonePrimitive(src: Primitive): Primitive {\n\tconst dst = src.clone();\n\tfor (const semantic of dst.listSemantics()) {\n\t\tdst.setAttribute(semantic, dst.getAttribute(semantic)!.clone());\n\t}\n\tconst indices = dst.getIndices();\n\tif (indices) dst.setIndices(indices.clone());\n\treturn dst;\n}\n\nfunction hasSharedAttributes(prim: Primitive): boolean {\n\tfor (const attribute of prim.listAttributes()) {\n\t\tfor (const parent of attribute.listParents()) {\n\t\t\tif (parent !== prim && parent.propertyType !== ROOT) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Dequantize attributes that would be affected by {@link transformPrimitive},\n * to avoid invalidating our primitive group keys.\n *\n * See: https://github.com/donmccurdy/glTF-Transform/issues/844\n */\nfunction dequantizeTransformableAttributes(prim: Primitive) {\n\tfor (const semantic of ['POSITION', 'NORMAL', 'TANGENT']) {\n\t\tconst attribute = prim.getAttribute(semantic);\n\t\tif (attribute && attribute.getComponentSize() < 4) {\n\t\t\tdequantizeAttribute(semantic, attribute, { pattern: /.*/ });\n\t\t}\n\t}\n}\n","import { Document, Texture } from '@gltf-transform/core';\nimport { Material, TextureChannel, PropertyType } from '@gltf-transform/core';\n\n/**\n * Returns a list of {@link TextureChannel TextureChannels} used by the given\n * texture. Determination is based only on the _role_ of the textures, e.g.\n * a texture used for the `occlusionTexture` will have (at least) a red channel\n * in use. See {@link getTextureChannelMask} for bitmask alternative.\n *\n * Example:\n *\n * ```js\n * const channels = listTextureChannels(texture);\n * if (channels.includes(TextureChannel.R)) {\n *   console.log('texture red channel used');\n * }\n * ```\n */\nexport function listTextureChannels(texture: Texture): TextureChannel[] {\n\tconst mask = getTextureChannelMask(texture);\n\tconst channels = [];\n\tif (mask & TextureChannel.R) channels.push(TextureChannel.R);\n\tif (mask & TextureChannel.G) channels.push(TextureChannel.G);\n\tif (mask & TextureChannel.B) channels.push(TextureChannel.B);\n\tif (mask & TextureChannel.A) channels.push(TextureChannel.A);\n\treturn channels;\n}\n\n/**\n * Returns bitmask of all {@link TextureChannel TextureChannels} used by the\n * given texture. Determination is based only on the _role_ of the textures, e.g.\n * a texture used for the `occlusionTexture` will have (at least) a red channel.\n * See {@link listTextureChannels} for an array alternative.\n *\n * Example:\n *\n * ```js\n * const mask = getTextureChannelMask(texture);\n * if (mask & TextureChannel.R) {\n *   console.log('texture red channel used');\n * }\n * ```\n */\nexport function getTextureChannelMask(texture: Texture): number {\n\tconst document = Document.fromGraph(texture.getGraph())!;\n\tlet mask = 0x0000;\n\tfor (const edge of document.getGraph().listParentEdges(texture)) {\n\t\tconst parent = edge.getParent();\n\t\tlet { channels } = edge.getAttributes() as { channels: number | undefined };\n\n\t\tif (\n\t\t\tchannels &&\n\t\t\tedge.getName() === 'baseColorTexture' &&\n\t\t\tparent instanceof Material &&\n\t\t\tparent.getAlphaMode() === Material.AlphaMode.OPAQUE\n\t\t) {\n\t\t\tchannels &= ~TextureChannel.A;\n\t\t}\n\n\t\tif (channels) {\n\t\t\tmask |= channels;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\tdocument.getLogger().warn(`Missing attribute \".channels\" on edge, \"${edge.getName()}\".`);\n\t\t}\n\t}\n\treturn mask;\n}\n","import { Accessor, Document, GLTF, Primitive, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune.js';\nimport { createTransform, deepListAttributes, remapAttribute, SetMap } from './utils.js';\nimport type { MeshoptEncoder } from 'meshoptimizer';\n\nconst NAME = 'reorder';\n\n/** Options for the {@link reorder} function. */\nexport interface ReorderOptions {\n\t/** MeshoptEncoder instance. */\n\tencoder: unknown;\n\t/**\n\t * Whether the order should be optimal for transmission size (recommended for Web)\n\t * or for GPU rendering performance. Default is 'size'.\n\t */\n\ttarget?: 'size' | 'performance';\n}\n\nconst REORDER_DEFAULTS: Required<Omit<ReorderOptions, 'encoder'>> = {\n\ttarget: 'size',\n};\n\n/**\n * Optimizes {@link Mesh} {@link Primitive Primitives} for locality of reference. Choose whether\n * the order should be optimal for transmission size (recommended for Web) or for GPU rendering\n * performance. Requires a MeshoptEncoder instance from the Meshoptimizer library.\n *\n * Example:\n *\n * ```ts\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await MeshoptEncoder.ready;\n *\n * await document.transform(\n * \treorder({encoder: MeshoptEncoder})\n * );\n * ```\n *\n * @category Transforms\n */\nexport function reorder(_options: ReorderOptions): Transform {\n\tconst options = { ...REORDER_DEFAULTS, ..._options } as Required<ReorderOptions>;\n\tconst encoder = options.encoder as typeof MeshoptEncoder | undefined;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${NAME}: encoder dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tawait encoder.ready;\n\n\t\tconst plan = createLayoutPlan(doc);\n\n\t\tfor (const srcIndices of plan.indicesToAttributes.keys()) {\n\t\t\tconst dstIndices = srcIndices.clone();\n\t\t\tlet indicesArray = dstIndices.getArray()!.slice();\n\t\t\tif (!(indicesArray instanceof Uint32Array)) {\n\t\t\t\tindicesArray = new Uint32Array(indicesArray);\n\t\t\t}\n\n\t\t\t// Compute optimal order.\n\t\t\tconst [remap, unique] = encoder.reorderMesh(\n\t\t\t\tindicesArray,\n\t\t\t\tplan.indicesToMode.get(srcIndices) === Primitive.Mode.TRIANGLES,\n\t\t\t\toptions.target === 'size',\n\t\t\t);\n\n\t\t\tdstIndices.setArray(unique <= 65534 ? new Uint16Array(indicesArray) : indicesArray);\n\n\t\t\t// Update affected primitives.\n\t\t\tfor (const srcAttribute of plan.indicesToAttributes.get(srcIndices)) {\n\t\t\t\tconst dstAttribute = srcAttribute.clone();\n\t\t\t\tremapAttribute(dstAttribute, remap, unique);\n\t\t\t\tfor (const prim of plan.attributesToPrimitives.get(srcAttribute)) {\n\t\t\t\t\tif (prim.getIndices() === srcIndices) {\n\t\t\t\t\t\tprim.swap(srcIndices, dstIndices);\n\t\t\t\t\t}\n\t\t\t\t\tif (prim.getIndices() === dstIndices) {\n\t\t\t\t\t\tprim.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\t\t\ttarget.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Clean up any attributes left unused by earlier cloning.\n\t\tawait doc.transform(\n\t\t\tprune({\n\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR],\n\t\t\t\tkeepAttributes: true,\n\t\t\t\tkeepIndices: true,\n\t\t\t}),\n\t\t);\n\n\t\tif (!plan.indicesToAttributes.size) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found; may need to weld first.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\n/** @hidden */\ninterface LayoutPlan {\n\tindicesToMode: Map<Accessor, GLTF.MeshPrimitiveMode>;\n\tindicesToAttributes: SetMap<Accessor, Accessor>;\n\tattributesToPrimitives: SetMap<Accessor, Primitive>;\n}\n\n/**\n * Constructs a plan for processing vertex streams, based on unique\n * index:attribute[] groups. Where different indices are used with the same\n * attributes, we'll end up splitting the primitives to not share attributes,\n * which appears to be consistent with the Meshopt implementation.\n *\n * @hidden\n */\nfunction createLayoutPlan(document: Document): LayoutPlan {\n\tconst indicesToAttributes = new SetMap<Accessor, Accessor>();\n\tconst indicesToMode = new Map<Accessor, GLTF.MeshPrimitiveMode>();\n\tconst attributesToPrimitives = new SetMap<Accessor, Primitive>();\n\n\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tconst indices = prim.getIndices();\n\t\t\tif (!indices) continue;\n\n\t\t\tindicesToMode.set(indices, prim.getMode());\n\n\t\t\tfor (const attribute of deepListAttributes(prim)) {\n\t\t\t\tindicesToAttributes.add(indices, attribute);\n\t\t\t\tattributesToPrimitives.add(attribute, prim);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { indicesToAttributes, indicesToMode, attributesToPrimitives };\n}\n","import { Accessor, GLTF, MathUtils, Primitive, PrimitiveTarget, TypedArray, vec4 } from '@gltf-transform/core';\n\n/**\n * Sorts skinning weights from high to low, for each vertex of the input\n * {@link Primitive} or {@link PrimitiveTarget}, and normalizes the weights.\n * Optionally, uses the given 'limit' to remove least-significant joint\n * influences such that no vertex has more than 'limit' influences.\n *\n * Most realtime engines support a limited number of joint influences per vertex,\n * often 4 or 8. Sorting and removing the additional influences can reduce file\n * size and improve compatibility.\n *\n * Example:\n *\n * ```javascript\n * import { sortPrimitiveWeights } from '@gltf-transform/functions';\n *\n * const limit = 4;\n * for (const mesh of document.getRoot().listMeshes()) {\n * \tfor (const prim of mesh.listPrimitives()) {\n * \t\tsortPrimitiveWeights(prim, limit);\n * \t}\n * }\n * ```\n *\n * @param prim Input, to be modified in place.\n * @param limit Maximum number of joint influences per vertex. Must be a multiple of four.\n */\nexport function sortPrimitiveWeights(prim: Primitive | PrimitiveTarget, limit = Infinity) {\n\tif ((Number.isFinite(limit) && limit % 4) || limit <= 0) {\n\t\tthrow new Error(`Limit must be positive multiple of four.`);\n\t}\n\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst setCount = prim.listSemantics().filter((name) => name.startsWith('WEIGHTS_')).length;\n\n\t// (1) Sort.\n\n\tconst indices = new Uint16Array(setCount * 4);\n\tconst srcWeights = new Float32Array(setCount * 4);\n\tconst dstWeights = new Float32Array(setCount * 4);\n\tconst srcJoints = new Uint32Array(setCount * 4);\n\tconst dstJoints = new Uint32Array(setCount * 4);\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tgetVertexArray(prim, i, 'WEIGHTS', srcWeights);\n\t\tgetVertexArray(prim, i, 'JOINTS', srcJoints);\n\n\t\t// Sort indices to create a lookup table, indices[dstIndex] → srcIndex,\n\t\t// indexed into the weights and joints arrays.\n\t\tfor (let j = 0; j < setCount * 4; j++) indices[j] = j;\n\t\tindices.sort((a, b) => (srcWeights[a] > srcWeights[b] ? -1 : 1));\n\n\t\t// Sort weights and joints.\n\t\tfor (let j = 0; j < indices.length; j++) {\n\t\t\tdstWeights[j] = srcWeights[indices[j]];\n\t\t\tdstJoints[j] = srcJoints[indices[j]];\n\t\t}\n\n\t\tsetVertexArray(prim, i, 'WEIGHTS', dstWeights);\n\t\tsetVertexArray(prim, i, 'JOINTS', dstJoints);\n\t}\n\n\t// (2) Limit.\n\tfor (let i = setCount; i * 4 > limit; i--) {\n\t\tconst weights = prim.getAttribute(`WEIGHTS_${i - 1}`)!;\n\t\tconst joints = prim.getAttribute(`JOINTS_${i - 1}`)!;\n\t\tprim.setAttribute(`WEIGHTS_${i - 1}`, null);\n\t\tprim.setAttribute(`JOINTS_${i - 1}`, null);\n\t\tif (weights.listParents().length === 1) weights.dispose();\n\t\tif (joints.listParents().length === 1) joints.dispose();\n\t}\n\n\t// (3) Normalize.\n\tnormalizePrimitiveWeights(prim);\n}\n\n// Utilities.\n\ntype PrimLike = Primitive | PrimitiveTarget;\n\nfunction normalizePrimitiveWeights(prim: PrimLike): void {\n\t// Would prefer to warn if unsafe, but no logger accessible in this scope.\n\tif (!isNormalizeSafe(prim)) return;\n\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst setCount = prim.listSemantics().filter((name) => name.startsWith('WEIGHTS_')).length;\n\n\tconst templateAttribute = prim.getAttribute('WEIGHTS_0')!;\n\tconst templateArray = templateAttribute.getArray()!;\n\tconst componentType = templateAttribute.getComponentType();\n\tconst normalized = templateAttribute.getNormalized();\n\tconst normalizedComponentType = normalized ? componentType : undefined;\n\tconst delta = normalized ? MathUtils.decodeNormalizedInt(1, componentType) : Number.EPSILON;\n\tconst joints = new Uint32Array(setCount * 4).fill(0);\n\tconst weights = templateArray.slice(0, setCount * 4).fill(0);\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tgetVertexArray(prim, i, 'JOINTS', joints);\n\t\tgetVertexArray(prim, i, 'WEIGHTS', weights, normalizedComponentType);\n\n\t\tlet weightsSum = sum(weights, normalizedComponentType);\n\t\tif (weightsSum === 0) continue;\n\n\t\t// (1) If sum of weights not within δ of 1, renormalize all weights.\n\t\tif (Math.abs(1 - weightsSum) > delta) {\n\t\t\tfor (let j = 0; j < weights.length; j++) {\n\t\t\t\tif (normalized) {\n\t\t\t\t\tconst intValue = MathUtils.encodeNormalizedInt(weights[j] / weightsSum, componentType);\n\t\t\t\t\tweights[j] = MathUtils.decodeNormalizedInt(intValue, componentType);\n\t\t\t\t} else {\n\t\t\t\t\tweights[j] /= weightsSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tweightsSum = sum(weights, normalizedComponentType);\n\n\t\t// (2) Sum of normalized weights may still be off by δ. Compensate\n\t\t// in least-significant weight.\n\t\tif (normalized && weightsSum !== 1) {\n\t\t\tfor (let j = weights.length - 1; j >= 0; j--) {\n\t\t\t\tif (weights[j] > 0) {\n\t\t\t\t\tweights[j] += MathUtils.encodeNormalizedInt(1 - weightsSum, componentType);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (3) Remove joint indices whose weights have fallen to zero.\n\t\tfor (let j = weights.length - 1; j >= 0; j--) {\n\t\t\tif (weights[j] === 0) {\n\t\t\t\tjoints[j] = 0;\n\t\t\t}\n\t\t}\n\n\t\tsetVertexArray(prim, i, 'JOINTS', joints);\n\t\tsetVertexArray(prim, i, 'WEIGHTS', weights, normalizedComponentType);\n\t}\n}\n\n/** Lists all values of a multi-set vertex attribute (WEIGHTS_#, ...) for given vertex. */\nfunction getVertexArray(\n\tprim: PrimLike,\n\tvertexIndex: number,\n\tprefix: string,\n\ttarget: TypedArray,\n\tnormalizedComponentType?: GLTF.AccessorComponentType\n): TypedArray {\n\tlet weights: Accessor | null;\n\tconst el = [0, 0, 0, 0] as vec4;\n\tfor (let i = 0; (weights = prim.getAttribute(`${prefix}_${i}`)); i++) {\n\t\tweights.getElement(vertexIndex, el);\n\t\tfor (let j = 0; j < 4; j++) {\n\t\t\tif (normalizedComponentType) {\n\t\t\t\ttarget[i * 4 + j] = MathUtils.encodeNormalizedInt(el[j], normalizedComponentType);\n\t\t\t} else {\n\t\t\t\ttarget[i * 4 + j] = el[j];\n\t\t\t}\n\t\t}\n\t}\n\treturn target;\n}\n\n/** Sets all values of a multi-set vertex attribute (WEIGHTS_#, ...) for given vertex. */\nfunction setVertexArray(\n\tprim: PrimLike,\n\tvertexIndex: number,\n\tprefix: string,\n\tvalues: TypedArray,\n\tnormalizedComponentType?: GLTF.AccessorComponentType\n): void {\n\tlet weights: Accessor | null;\n\tconst el = [0, 0, 0, 0] as vec4;\n\tfor (let i = 0; (weights = prim.getAttribute(`${prefix}_${i}`)); i++) {\n\t\tfor (let j = 0; j < 4; j++) {\n\t\t\tif (normalizedComponentType) {\n\t\t\t\tel[j] = MathUtils.decodeNormalizedInt(values[i * 4 + j], normalizedComponentType);\n\t\t\t} else {\n\t\t\t\tel[j] = values[i * 4 + j];\n\t\t\t}\n\t\t}\n\t\tweights.setElement(vertexIndex, el);\n\t}\n}\n\n/** Sum an array of numbers. */\nfunction sum(values: TypedArray, normalizedComponentType?: GLTF.AccessorComponentType): number {\n\tlet sum = 0;\n\tfor (let i = 0; i < values.length; i++) {\n\t\tif (normalizedComponentType) {\n\t\t\tsum += MathUtils.decodeNormalizedInt(values[i], normalizedComponentType);\n\t\t} else {\n\t\t\tsum += values[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\n/** Returns true if attribute normalization is supported for this primitive. */\nfunction isNormalizeSafe(prim: PrimLike): boolean {\n\tconst attributes = prim\n\t\t.listSemantics()\n\t\t.filter((name) => name.startsWith('WEIGHTS_'))\n\t\t.map((name) => prim.getAttribute(name)!);\n\tconst normList = attributes.map((a) => a.getNormalized());\n\tconst typeList = attributes.map((a) => a.getComponentType());\n\treturn new Set(normList).size === 1 && new Set(typeList).size === 1;\n}\n","import {\n\tAccessor,\n\tAnimationChannel,\n\tbbox,\n\tDocument,\n\tILogger,\n\tmat4,\n\tMathUtils,\n\tMesh,\n\tNode,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tSkin,\n\tTransform,\n\tvec2,\n\tvec3,\n\tvec4,\n} from '@gltf-transform/core';\nimport { dedup } from './dedup.js';\nimport { fromRotationTranslationScale, fromScaling, invert, multiply as multiplyMat4 } from 'gl-matrix/mat4';\nimport { max, min, scale, transformMat4 } from 'gl-matrix/vec3';\nimport { InstancedMesh, KHRMeshQuantization } from '@gltf-transform/extensions';\nimport type { Volume } from '@gltf-transform/extensions';\nimport { prune } from './prune.js';\nimport { createTransform } from './utils.js';\nimport { sortPrimitiveWeights } from './sort-primitive-weights.js';\n\nconst NAME = 'quantize';\n\ntype TypedArrayConstructor =\n\t| Int8ArrayConstructor\n\t| Int16ArrayConstructor\n\t| Uint8ArrayConstructor\n\t| Uint16ArrayConstructor;\nconst SIGNED_INT = [Int8Array, Int16Array, Int32Array] as TypedArrayConstructor[];\n\nconst { TRANSLATION, ROTATION, SCALE, WEIGHTS } = AnimationChannel.TargetPath;\nconst TRS_CHANNELS = [TRANSLATION, ROTATION, SCALE];\n\n/** Options for the {@link quantize} function. */\nexport interface QuantizeOptions {\n\t/** Pattern (regex) used to filter vertex attribute semantics for quantization. Default: all. */\n\tpattern?: RegExp;\n\t/** Pattern (regex) used to filter morph target semantics for quantization. Default: `options.pattern`. */\n\tpatternTargets?: RegExp;\n\t/** Bounds for quantization grid. */\n\tquantizationVolume?: 'mesh' | 'scene';\n\t/** Quantization bits for `POSITION` attributes. */\n\tquantizePosition?: number;\n\t/** Quantization bits for `NORMAL` attributes. */\n\tquantizeNormal?: number;\n\t/** Quantization bits for `TEXCOORD_*` attributes. */\n\tquantizeTexcoord?: number;\n\t/** Quantization bits for `COLOR_*` attributes. */\n\tquantizeColor?: number;\n\t/** Quantization bits for `WEIGHT_*` attributes. */\n\tquantizeWeight?: number;\n\t/** Quantization bits for application-specific (`_*`) attributes. */\n\tquantizeGeneric?: number;\n\t/** Normalize weight attributes. */\n\tnormalizeWeights?: boolean;\n}\n\nexport const QUANTIZE_DEFAULTS: Required<Omit<QuantizeOptions, 'patternTargets'>> = {\n\tpattern: /.*/,\n\tquantizationVolume: 'mesh',\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeTexcoord: 12,\n\tquantizeColor: 8,\n\tquantizeWeight: 8,\n\tquantizeGeneric: 12,\n\tnormalizeWeights: true,\n};\n\n/**\n * References:\n * - https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n * - http://www.aclockworkberry.com/normal-unpacking-quantization-errors/\n * - https://www.mathworks.com/help/dsp/ref/uniformencoder.html\n * - https://oroboro.com/compressed-unit-vectors/\n */\n\n/**\n * Quantizes vertex attributes with `KHR_mesh_quantization`, reducing the size and memory footprint\n * of the file.\n *\n * @category Transforms\n */\nexport function quantize(_options: QuantizeOptions = QUANTIZE_DEFAULTS): Transform {\n\tconst options = { ...QUANTIZE_DEFAULTS, ..._options } as Required<QuantizeOptions>;\n\n\toptions.patternTargets = options.patternTargets || options.pattern;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\n\t\tdoc.createExtension(KHRMeshQuantization).setRequired(true);\n\n\t\t// Compute vertex position quantization volume.\n\t\tlet nodeTransform: VectorTransform<vec3> | undefined = undefined;\n\t\tif (options.quantizationVolume === 'scene') {\n\t\t\tnodeTransform = getNodeTransform(expandBounds(root.listMeshes().map(getPositionQuantizationVolume)));\n\t\t}\n\n\t\t// Quantize mesh primitives.\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tif (options.quantizationVolume === 'mesh') {\n\t\t\t\tnodeTransform = getNodeTransform(getPositionQuantizationVolume(mesh));\n\t\t\t}\n\n\t\t\tif (nodeTransform && options.pattern.test('POSITION')) {\n\t\t\t\ttransformMeshParents(doc, mesh, nodeTransform);\n\t\t\t\ttransformMeshMaterials(mesh, 1 / nodeTransform.scale);\n\t\t\t}\n\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tquantizePrimitive(doc, prim, nodeTransform!, options);\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tquantizePrimitive(doc, target, nodeTransform!, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait doc.transform(\n\t\t\tprune({\n\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR, PropertyType.SKIN, PropertyType.MATERIAL],\n\t\t\t\tkeepAttributes: true,\n\t\t\t\tkeepIndices: true,\n\t\t\t\tkeepLeaves: true,\n\t\t\t\tkeepSolidTextures: true,\n\t\t\t}),\n\t\t\tdedup({\n\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR, PropertyType.MATERIAL, PropertyType.SKIN],\n\t\t\t\tkeepUniqueNames: true,\n\t\t\t}),\n\t\t);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction quantizePrimitive(\n\tdoc: Document,\n\tprim: Primitive | PrimitiveTarget,\n\tnodeTransform: VectorTransform<vec3>,\n\toptions: Required<QuantizeOptions>,\n): void {\n\tconst isTarget = prim instanceof PrimitiveTarget;\n\tconst logger = doc.getLogger();\n\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (!isTarget && !options.pattern.test(semantic)) continue;\n\t\tif (isTarget && !options.patternTargets.test(semantic)) continue;\n\n\t\tconst srcAttribute = prim.getAttribute(semantic)!;\n\n\t\tconst { bits, ctor } = getQuantizationSettings(semantic, srcAttribute, logger, options);\n\n\t\tif (!ctor) continue;\n\t\tif (bits < 8 || bits > 16) throw new Error(`${NAME}: Requires bits = 8–16.`);\n\t\tif (srcAttribute.getComponentSize() <= bits / 8) continue;\n\n\t\tconst dstAttribute = srcAttribute.clone();\n\n\t\t// Remap position data.\n\t\tif (semantic === 'POSITION') {\n\t\t\tconst scale = nodeTransform.scale;\n\t\t\tconst transform: mat4 = [] as unknown as mat4;\n\t\t\t// Morph targets are relative offsets, don't translate them.\n\t\t\tprim instanceof Primitive\n\t\t\t\t? invert(transform, fromTransform(nodeTransform))\n\t\t\t\t: fromScaling(transform, [1 / scale, 1 / scale, 1 / scale]);\n\t\t\tfor (let i = 0, el: vec3 = [0, 0, 0], il = dstAttribute.getCount(); i < il; i++) {\n\t\t\t\tdstAttribute.getElement(i, el);\n\t\t\t\tdstAttribute.setElement(i, transformMat4(el, el, transform) as vec3);\n\t\t\t}\n\t\t}\n\n\t\t// Quantize the vertex attribute.\n\t\tquantizeAttribute(dstAttribute, ctor, bits);\n\t\tprim.swap(srcAttribute, dstAttribute);\n\t}\n\n\t// Normalize skinning weights.\n\tif (options.normalizeWeights && prim.getAttribute('WEIGHTS_0')) {\n\t\tsortPrimitiveWeights(prim, Infinity);\n\t}\n\n\tif (\n\t\tprim instanceof Primitive &&\n\t\tprim.getIndices() &&\n\t\tprim.listAttributes().length &&\n\t\tprim.listAttributes()[0]!.getCount() < 65535\n\t) {\n\t\tconst indices = prim.getIndices()!;\n\t\tindices.setArray(new Uint16Array(indices.getArray()!));\n\t}\n}\n\n/** Computes node quantization transforms in local space. */\nfunction getNodeTransform(volume: bbox): VectorTransform<vec3> {\n\tconst { min, max } = volume;\n\n\t// Scaling factor transforms [-1,1] box to the mesh AABB in local space.\n\t// See: https://github.com/donmccurdy/glTF-Transform/issues/328\n\tconst scale = Math.max(\n\t\t(max[0] - min[0]) / 2, // Divide because interval [-1,1] has length 2.\n\t\t(max[1] - min[1]) / 2,\n\t\t(max[2] - min[2]) / 2,\n\t);\n\n\t// Original center of the mesh, in local space.\n\tconst offset: vec3 = [\n\t\tmin[0] + (max[0] - min[0]) / 2,\n\t\tmin[1] + (max[1] - min[1]) / 2,\n\t\tmin[2] + (max[2] - min[2]) / 2,\n\t];\n\n\treturn { offset, scale };\n}\n\n/** Applies corrective scale and offset to nodes referencing a quantized Mesh. */\nfunction transformMeshParents(doc: Document, mesh: Mesh, nodeTransform: VectorTransform<vec3>): void {\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tfor (const parent of mesh.listParents()) {\n\t\tif (!(parent instanceof Node)) continue;\n\n\t\tconst animChannels = parent.listParents().filter((p) => p instanceof AnimationChannel) as AnimationChannel[];\n\t\tconst isAnimated = animChannels.some((channel) => TRS_CHANNELS.includes(channel.getTargetPath()!));\n\t\tconst isParentNode = parent.listChildren().length > 0;\n\n\t\tconst skin = parent.getSkin();\n\t\tif (skin) {\n\t\t\tparent.setSkin(transformSkin(skin, nodeTransform));\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst batch = parent.getExtension<InstancedMesh>('EXT_mesh_gpu_instancing');\n\t\tif (batch) {\n\t\t\tparent.setExtension('EXT_mesh_gpu_instancing', transformBatch(batch, nodeTransform));\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet targetNode: Node;\n\t\tif (isParentNode || isAnimated) {\n\t\t\ttargetNode = doc.createNode('').setMesh(mesh);\n\t\t\tparent.addChild(targetNode).setMesh(null);\n\t\t\tanimChannels\n\t\t\t\t.filter((channel) => channel.getTargetPath() === WEIGHTS)\n\t\t\t\t.forEach((channel) => channel.setTargetNode(targetNode));\n\t\t} else {\n\t\t\ttargetNode = parent;\n\t\t}\n\n\t\tconst nodeMatrix = targetNode.getMatrix();\n\t\tmultiplyMat4(nodeMatrix, nodeMatrix, transformMatrix);\n\t\ttargetNode.setMatrix(nodeMatrix);\n\t}\n}\n\n/** Applies corrective scale and offset to skin IBMs. */\nfunction transformSkin(skin: Skin, nodeTransform: VectorTransform<vec3>): Skin {\n\tskin = skin.clone(); // quantize() does cleanup.\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tconst inverseBindMatrices = skin.getInverseBindMatrices()!.clone();\n\tconst ibm = [] as unknown as mat4;\n\tfor (let i = 0, count = inverseBindMatrices.getCount(); i < count; i++) {\n\t\tinverseBindMatrices.getElement(i, ibm);\n\t\tmultiplyMat4(ibm, ibm, transformMatrix);\n\t\tinverseBindMatrices.setElement(i, ibm);\n\t}\n\treturn skin.setInverseBindMatrices(inverseBindMatrices);\n}\n\n/** Applies corrective scale and offset to GPU instancing batches. */\nfunction transformBatch(batch: InstancedMesh, nodeTransform: VectorTransform<vec3>): InstancedMesh {\n\tif (!batch.getAttribute('TRANSLATION') && !batch.getAttribute('ROTATION') && !batch.getAttribute('SCALE')) {\n\t\treturn batch;\n\t}\n\n\tbatch = batch.clone(); // quantize() does cleanup.\n\tconst instanceTranslation = batch.getAttribute('TRANSLATION')?.clone();\n\tconst instanceRotation = batch.getAttribute('ROTATION')?.clone();\n\tconst instanceScale = batch.getAttribute('SCALE')?.clone();\n\tconst tpl = (instanceTranslation || instanceRotation || instanceScale)!;\n\n\tconst T_IDENTITY = [0, 0, 0] as vec3;\n\tconst R_IDENTITY = [0, 0, 0, 1] as vec4;\n\tconst S_IDENTITY = [1, 1, 1] as vec3;\n\n\tconst t = [0, 0, 0] as vec3;\n\tconst r = [0, 0, 0, 1] as vec4;\n\tconst s = [1, 1, 1] as vec3;\n\n\t// prettier-ignore\n\tconst instanceMatrix = [\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 1,\n\t] as mat4;\n\n\tconst transformMatrix = fromTransform(nodeTransform);\n\n\tfor (let i = 0, count = tpl.getCount(); i < count; i++) {\n\t\tMathUtils.compose(\n\t\t\tinstanceTranslation ? (instanceTranslation.getElement(i, t) as vec3) : T_IDENTITY,\n\t\t\tinstanceRotation ? (instanceRotation.getElement(i, r) as vec4) : R_IDENTITY,\n\t\t\tinstanceScale ? (instanceScale.getElement(i, s) as vec3) : S_IDENTITY,\n\t\t\tinstanceMatrix,\n\t\t);\n\n\t\tmultiplyMat4(instanceMatrix, instanceMatrix, transformMatrix);\n\n\t\tMathUtils.decompose(instanceMatrix, t, r, s);\n\n\t\tif (instanceTranslation) instanceTranslation.setElement(i, t);\n\t\tif (instanceRotation) instanceRotation.setElement(i, r);\n\t\tif (instanceScale) instanceScale.setElement(i, s);\n\t}\n\n\tif (instanceTranslation) batch.setAttribute('TRANSLATION', instanceTranslation);\n\tif (instanceRotation) batch.setAttribute('ROTATION', instanceRotation);\n\tif (instanceScale) batch.setAttribute('SCALE', instanceScale);\n\n\treturn batch;\n}\n\n/** Applies corrective scale to volumetric materials, which give thickness in local units. */\nfunction transformMeshMaterials(mesh: Mesh, scale: number) {\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tlet material = prim.getMaterial();\n\t\tif (!material) continue;\n\n\t\tlet volume = material.getExtension<Volume>('KHR_materials_volume');\n\t\tif (!volume || volume.getThicknessFactor() <= 0) continue;\n\n\t\t// quantize() does cleanup.\n\t\tvolume = volume.clone().setThicknessFactor(volume.getThicknessFactor() * scale);\n\t\tmaterial = material.clone().setExtension('KHR_materials_volume', volume);\n\t\tprim.setMaterial(material);\n\t}\n}\n\n/**\n * Quantizes an attribute to the given parameters.\n *\n * Uniformly remap 32-bit floats to reduced-precision 8- or 16-bit integers, so\n * that there are only 2^N unique values, for N within [8, 16].\n *\n * See: https://github.com/donmccurdy/glTF-Transform/issues/208\n */\nfunction quantizeAttribute(attribute: Accessor, ctor: TypedArrayConstructor, bits: number): void {\n\tconst dstArray = new ctor(attribute.getArray()!.length);\n\n\tconst signBits = SIGNED_INT.includes(ctor) ? 1 : 0;\n\tconst quantBits = bits - signBits;\n\tconst storageBits = ctor.BYTES_PER_ELEMENT * 8 - signBits;\n\n\tconst scale = Math.pow(2, quantBits) - 1;\n\tconst lo = storageBits - quantBits;\n\tconst hi = 2 * quantBits - storageBits;\n\tconst range = [signBits > 0 ? -1 : 0, 1] as vec2;\n\n\tfor (let i = 0, di = 0, el: number[] = []; i < attribute.getCount(); i++) {\n\t\tattribute.getElement(i, el);\n\t\tfor (let j = 0; j < el.length; j++) {\n\t\t\t// Clamp to range.\n\t\t\tlet value = clamp(el[j], range);\n\n\t\t\t// Map [0.0 ... 1.0] to [0 ... scale].\n\t\t\tvalue = Math.round(Math.abs(value) * scale);\n\n\t\t\t// Replicate msb to missing lsb.\n\t\t\tvalue = (value << lo) | (value >> hi);\n\n\t\t\t// Restore sign.\n\t\t\tdstArray[di++] = value * Math.sign(el[j]);\n\t\t}\n\t}\n\n\t// TODO(feat): Support sparse accessors, https://github.com/donmccurdy/glTF-Transform/issues/795\n\tattribute.setArray(dstArray).setNormalized(true).setSparse(false);\n}\n\nfunction getQuantizationSettings(\n\tsemantic: string,\n\tattribute: Accessor,\n\tlogger: ILogger,\n\toptions: Required<QuantizeOptions>,\n): { bits: number; ctor?: TypedArrayConstructor } {\n\tconst min = attribute.getMinNormalized([]);\n\tconst max = attribute.getMaxNormalized([]);\n\n\tlet bits: number;\n\tlet ctor: TypedArrayConstructor;\n\n\tif (semantic === 'POSITION') {\n\t\tbits = options.quantizePosition;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic === 'NORMAL' || semantic === 'TANGENT') {\n\t\tbits = options.quantizeNormal;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic.startsWith('COLOR_')) {\n\t\tbits = options.quantizeColor;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('TEXCOORD_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeTexcoord;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('JOINTS_')) {\n\t\tbits = Math.max(...attribute.getMax([])) <= 255 ? 8 : 16;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t\tif (attribute.getComponentSize() > bits / 8) {\n\t\t\tattribute.setArray(new ctor(attribute.getArray()!));\n\t\t}\n\t\treturn { bits: -1 };\n\t} else if (semantic.startsWith('WEIGHTS_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeWeight;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('_')) {\n\t\tif (min.some((v) => v < -1) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [-1,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeGeneric;\n\t\tctor = min.some((v) => v < 0)\n\t\t\t? (ctor = bits <= 8 ? Int8Array : Int16Array)\n\t\t\t: (ctor = bits <= 8 ? Uint8Array : Uint16Array);\n\t} else {\n\t\tthrow new Error(`${NAME}: Unexpected semantic, \"${semantic}\".`);\n\t}\n\n\treturn { bits, ctor };\n}\n\nfunction getPositionQuantizationVolume(mesh: Mesh): bbox {\n\tconst positions: Accessor[] = [];\n\tconst relativePositions: Accessor[] = [];\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tconst attribute = prim.getAttribute('POSITION');\n\t\tif (attribute) positions.push(attribute);\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tconst attribute = target.getAttribute('POSITION');\n\t\t\tif (attribute) relativePositions.push(attribute);\n\t\t}\n\t}\n\n\tif (positions.length === 0) {\n\t\tthrow new Error(`${NAME}: Missing \"POSITION\" attribute.`);\n\t}\n\n\tconst bbox = flatBounds<vec3>(positions, 3);\n\n\t// Morph target quantization volume is computed differently. First, ensure that the origin\n\t// <0, 0, 0> is in the quantization volume. Because we can't offset target positions (they're\n\t// relative deltas), default remapping will only map to a [-2, 2] AABB. Double the bounding box\n\t// to ensure scaling puts them within a [-1, 1] AABB instead.\n\tif (relativePositions.length > 0) {\n\t\tconst { min: relMin, max: relMax } = flatBounds<vec3>(relativePositions, 3);\n\t\tmin(bbox.min, bbox.min, min(relMin, scale(relMin, relMin, 2), [0, 0, 0]));\n\t\tmax(bbox.max, bbox.max, max(relMax, scale(relMax, relMax, 2), [0, 0, 0]));\n\t}\n\n\treturn bbox;\n}\n\n/** Computes total min and max of all Accessors in a list. */\nfunction flatBounds<T = vec2 | vec3>(accessors: Accessor[], elementSize: number): { min: T; max: T } {\n\tconst min: number[] = new Array(elementSize).fill(Infinity);\n\tconst max: number[] = new Array(elementSize).fill(-Infinity);\n\n\tconst tmpMin: number[] = [];\n\tconst tmpMax: number[] = [];\n\n\tfor (const accessor of accessors) {\n\t\taccessor.getMinNormalized(tmpMin);\n\t\taccessor.getMaxNormalized(tmpMax);\n\t\tfor (let i = 0; i < elementSize; i++) {\n\t\t\tmin[i] = Math.min(min[i], tmpMin[i]);\n\t\t\tmax[i] = Math.max(max[i], tmpMax[i]);\n\t\t}\n\t}\n\n\treturn { min, max } as unknown as { min: T; max: T };\n}\n\nfunction expandBounds(bboxes: bbox[]): bbox {\n\tconst result = bboxes[0];\n\tfor (const bbox of bboxes) {\n\t\tmin(result.min, result.min, bbox.min);\n\t\tmax(result.max, result.max, bbox.max);\n\t}\n\treturn result;\n}\n\ninterface VectorTransform<T = vec2 | vec3 | vec4> {\n\toffset: T;\n\tscale: number;\n}\n\nfunction fromTransform(transform: VectorTransform<vec3>): mat4 {\n\treturn fromRotationTranslationScale([] as unknown as mat4, [0, 0, 0, 1], transform.offset, [\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t]) as mat4;\n}\n\nfunction clamp(value: number, range: vec2): number {\n\treturn Math.min(Math.max(value, range[0]), range[1]);\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { EXTMeshoptCompression } from '@gltf-transform/extensions';\nimport type { MeshoptEncoder } from 'meshoptimizer';\nimport { reorder } from './reorder.js';\nimport { QUANTIZE_DEFAULTS, QuantizeOptions, quantize } from './quantize.js';\nimport { createTransform } from './utils.js';\n\nexport interface MeshoptOptions extends Omit<QuantizeOptions, 'pattern' | 'patternTargets'> {\n\tencoder: unknown;\n\tlevel?: 'medium' | 'high';\n}\n\nexport const MESHOPT_DEFAULTS: Required<Omit<MeshoptOptions, 'encoder'>> = {\n\tlevel: 'high',\n\t...QUANTIZE_DEFAULTS,\n};\n\nconst NAME = 'meshopt';\n\n/**\n * Applies Meshopt compression using {@link EXTMeshoptCompression EXT_meshopt_compression}.\n * This type of compression can reduce the size of point, line, and triangle geometry,\n * morph targets, and animation data.\n *\n * This function is a thin wrapper around {@link reorder}, {@link quantize}, and\n * {@link EXTMeshoptCompression}, and exposes relatively few configuration options.\n * To access more options (like quantization bits) direct use of the underlying\n * functions is recommended.\n *\n * Example:\n *\n * ```javascript\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await MeshoptEncoder.ready;\n *\n * await document.transform(\n *   reorder({encoder: MeshoptEncoder, level: 'medium'})\n * );\n * ```\n *\n * @category Transforms\n */\nexport function meshopt(_options: MeshoptOptions): Transform {\n\tconst options = { ...MESHOPT_DEFAULTS, ..._options } as Required<MeshoptOptions>;\n\tconst encoder = options.encoder as typeof MeshoptEncoder | undefined;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${NAME}: encoder dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tlet pattern: RegExp;\n\t\tlet patternTargets: RegExp;\n\t\tlet quantizeNormal = options.quantizeNormal;\n\n\t\t// IMPORTANT: Vertex attributes should be quantized in 'high' mode IFF they are\n\t\t// _not_ filtered in 'packages/extensions/src/ext-meshopt-compression/encoder.ts'.\n\t\t// Note that normals and tangents use octahedral filters, but _morph_ normals\n\t\t// and tangents do not.\n\t\t// See: https://github.com/donmccurdy/glTF-Transform/issues/1142\n\t\tif (options.level === 'medium') {\n\t\t\tpattern = /.*/;\n\t\t\tpatternTargets = /.*/;\n\t\t} else {\n\t\t\tpattern = /^(POSITION|TEXCOORD|JOINTS|WEIGHTS)(_\\d+)?$/;\n\t\t\tpatternTargets = /^(POSITION|TEXCOORD|JOINTS|WEIGHTS|NORMAL|TANGENT)(_\\d+)?$/;\n\t\t\tquantizeNormal = Math.min(quantizeNormal, 8); // See meshopt::getMeshoptFilter.\n\t\t}\n\n\t\tawait document.transform(\n\t\t\treorder({\n\t\t\t\tencoder: encoder,\n\t\t\t\ttarget: 'size',\n\t\t\t}),\n\t\t\tquantize({\n\t\t\t\t...options,\n\t\t\t\tpattern,\n\t\t\t\tpatternTargets,\n\t\t\t\tquantizeNormal,\n\t\t\t}),\n\t\t);\n\n\t\tdocument\n\t\t\t.createExtension(EXTMeshoptCompression)\n\t\t\t.setRequired(true)\n\t\t\t.setEncoderOptions({\n\t\t\t\tmethod:\n\t\t\t\t\toptions.level === 'medium'\n\t\t\t\t\t\t? EXTMeshoptCompression.EncoderMethod.QUANTIZE\n\t\t\t\t\t\t: EXTMeshoptCompression.EncoderMethod.FILTER,\n\t\t\t});\n\t});\n}\n","import type { Document, Texture, Transform } from '@gltf-transform/core';\nimport {\n\tKHRMaterialsIOR,\n\tKHRMaterialsPBRSpecularGlossiness,\n\tKHRMaterialsSpecular,\n\tPBRSpecularGlossiness,\n} from '@gltf-transform/extensions';\nimport { createTransform, rewriteTexture } from './utils.js';\n\nconst NAME = 'metalRough';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MetalRoughOptions {}\n\nconst METALROUGH_DEFAULTS: Required<MetalRoughOptions> = {};\n\n/**\n * Convert {@link Material}s from spec/gloss PBR workflow to metal/rough PBR workflow,\n * removing `KHR_materials_pbrSpecularGlossiness` and adding `KHR_materials_ior` and\n * `KHR_materials_specular`. The metal/rough PBR workflow is preferred for most use cases,\n * and is a prerequisite for other advanced PBR extensions provided by glTF.\n *\n * No options are currently implemented for this function.\n *\n * @category Transforms\n */\nexport function metalRough(_options: MetalRoughOptions = METALROUGH_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...METALROUGH_DEFAULTS, ..._options } as Required<MetalRoughOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tconst extensionsUsed = doc\n\t\t\t.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.map((ext) => ext.extensionName);\n\t\tif (!extensionsUsed.includes('KHR_materials_pbrSpecularGlossiness')) {\n\t\t\tlogger.warn(`${NAME}: KHR_materials_pbrSpecularGlossiness not found on document.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst iorExtension = doc.createExtension(KHRMaterialsIOR);\n\t\tconst specExtension = doc.createExtension(KHRMaterialsSpecular);\n\t\tconst specGlossExtension = doc.createExtension(KHRMaterialsPBRSpecularGlossiness);\n\n\t\tconst inputTextures = new Set<Texture | null>();\n\n\t\tfor (const material of doc.getRoot().listMaterials()) {\n\t\t\tconst specGloss = material.getExtension<PBRSpecularGlossiness>('KHR_materials_pbrSpecularGlossiness');\n\t\t\tif (!specGloss) continue;\n\n\t\t\t// Create specular extension.\n\t\t\tconst specular = specExtension\n\t\t\t\t.createSpecular()\n\t\t\t\t.setSpecularFactor(1.0)\n\t\t\t\t.setSpecularColorFactor(specGloss.getSpecularFactor());\n\n\t\t\t// Stash textures that might become unused, to check and clean up later.\n\t\t\tinputTextures.add(specGloss.getSpecularGlossinessTexture());\n\t\t\tinputTextures.add(material.getBaseColorTexture());\n\t\t\tinputTextures.add(material.getMetallicRoughnessTexture());\n\n\t\t\t// Set up a metal/rough PBR material with IOR=Infinity (or 0), metallic=0. This\n\t\t\t// representation is precise and reliable, but perhaps less convenient for artists\n\t\t\t// than deriving a metalness value. Unfortunately we can't do that without imprecise\n\t\t\t// heuristics, and perhaps user tuning.\n\t\t\t// See: https://github.com/KhronosGroup/glTF/pull/1719#issuecomment-674365677\n\t\t\tmaterial\n\t\t\t\t.setBaseColorFactor(specGloss.getDiffuseFactor())\n\t\t\t\t.setMetallicFactor(0)\n\t\t\t\t.setRoughnessFactor(1)\n\t\t\t\t.setExtension('KHR_materials_ior', iorExtension.createIOR().setIOR(1000))\n\t\t\t\t.setExtension('KHR_materials_specular', specular);\n\n\t\t\t// Move diffuse -> baseColor.\n\t\t\tconst diffuseTexture = specGloss.getDiffuseTexture();\n\t\t\tif (diffuseTexture) {\n\t\t\t\tmaterial.setBaseColorTexture(diffuseTexture);\n\t\t\t\tmaterial.getBaseColorTextureInfo()!.copy(specGloss.getDiffuseTextureInfo()!);\n\t\t\t}\n\n\t\t\t// Move specular + gloss -> specular + roughness.\n\t\t\tconst sgTexture = specGloss.getSpecularGlossinessTexture();\n\t\t\tif (sgTexture) {\n\t\t\t\t// specularGlossiness -> specular.\n\t\t\t\tconst sgTextureInfo = specGloss.getSpecularGlossinessTextureInfo()!;\n\t\t\t\tconst specularTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, specularTexture, (pixels, i, j) => {\n\t\t\t\t\tpixels.set(i, j, 3, 255); // Remove glossiness.\n\t\t\t\t});\n\t\t\t\tspecular.setSpecularTexture(specularTexture);\n\t\t\t\tspecular.setSpecularColorTexture(specularTexture);\n\t\t\t\tspecular.getSpecularTextureInfo()!.copy(sgTextureInfo);\n\t\t\t\tspecular.getSpecularColorTextureInfo()!.copy(sgTextureInfo);\n\n\t\t\t\t// specularGlossiness -> roughness.\n\t\t\t\tconst glossinessFactor = specGloss.getGlossinessFactor();\n\t\t\t\tconst metalRoughTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, metalRoughTexture, (pixels, i, j) => {\n\t\t\t\t\t// Invert glossiness.\n\t\t\t\t\tconst roughness = 255 - Math.round(pixels.get(i, j, 3) * glossinessFactor);\n\t\t\t\t\tpixels.set(i, j, 0, 0);\n\t\t\t\t\tpixels.set(i, j, 1, roughness);\n\t\t\t\t\tpixels.set(i, j, 2, 0);\n\t\t\t\t\tpixels.set(i, j, 3, 255);\n\t\t\t\t});\n\t\t\t\tmaterial.setMetallicRoughnessTexture(metalRoughTexture);\n\t\t\t\tmaterial.getMetallicRoughnessTextureInfo()!.copy(sgTextureInfo);\n\t\t\t} else {\n\t\t\t\tspecular.setSpecularColorFactor(specGloss.getSpecularFactor());\n\t\t\t\tmaterial.setRoughnessFactor(1 - specGloss.getGlossinessFactor());\n\t\t\t}\n\n\t\t\t// Remove KHR_materials_pbrSpecularGlossiness from the material.\n\t\t\tmaterial.setExtension('KHR_materials_pbrSpecularGlossiness', null);\n\t\t}\n\n\t\t// Remove KHR_materials_pbrSpecularGlossiness from the document.\n\t\tspecGlossExtension.dispose();\n\n\t\t// Clean up unused textures.\n\t\tfor (const tex of inputTextures) {\n\t\t\tif (tex && tex.listParents().length === 1) tex.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import type { Accessor, Document, ILogger, Transform, TypedArray } from '@gltf-transform/core';\nimport { createTransform, formatDeltaOp } from './utils.js';\n\nconst NAME = 'unweld';\n\n/** Options for the {@link unweld} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UnweldOptions {}\n\nconst UNWELD_DEFAULTS: UnweldOptions = {};\n\n/**\n * De-index {@link Primitive}s, disconnecting any shared vertices. This operation will generally\n * increase the number of vertices in a mesh, but may be helpful for some geometry operations or\n * for creating hard edges.\n *\n * No options are currently implemented for this function.\n *\n * @category Transforms\n */\nexport function unweld(_options: UnweldOptions = UNWELD_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...UNWELD_DEFAULTS, ..._options } as Required<UnweldOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst visited = new Map<Accessor, Map<Accessor, Accessor>>();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst indices = prim.getIndices();\n\t\t\t\tif (!indices) continue;\n\n\t\t\t\tconst srcVertexCount = prim.getAttribute('POSITION')!.getCount();\n\n\t\t\t\t// Vertex attributes.\n\t\t\t\tfor (const srcAttribute of prim.listAttributes()) {\n\t\t\t\t\tprim.swap(srcAttribute, unweldAttribute(srcAttribute, indices, logger, visited));\n\n\t\t\t\t\t// Clean up.\n\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t}\n\n\t\t\t\t// Morph target vertex attributes.\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tfor (const srcAttribute of target.listAttributes()) {\n\t\t\t\t\t\ttarget.swap(srcAttribute, unweldAttribute(srcAttribute, indices, logger, visited));\n\n\t\t\t\t\t\t// Clean up.\n\t\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst dstVertexCount = prim.getAttribute('POSITION')!.getCount();\n\t\t\t\tlogger.debug(`${NAME}: ${formatDeltaOp(srcVertexCount, dstVertexCount)} vertices.`);\n\n\t\t\t\t// Clean up.\n\t\t\t\tprim.setIndices(null);\n\t\t\t\tif (indices.listParents().length === 1) indices.dispose();\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction unweldAttribute(\n\tsrcAttribute: Accessor,\n\tindices: Accessor,\n\tlogger: ILogger,\n\tvisited: Map<Accessor, Map<Accessor, Accessor>>\n): Accessor {\n\tif (visited.has(srcAttribute) && visited.get(srcAttribute)!.has(indices)) {\n\t\tlogger.debug(`${NAME}: Cache hit for reused attribute, \"${srcAttribute.getName()}\".`);\n\t\treturn visited.get(srcAttribute)!.get(indices)!;\n\t}\n\n\tconst dstAttribute = srcAttribute.clone();\n\tconst ArrayCtor = srcAttribute.getArray()!.constructor as new (len: number) => TypedArray;\n\tdstAttribute.setArray(new ArrayCtor(indices.getCount() * srcAttribute.getElementSize()));\n\n\tconst el: number[] = [];\n\tfor (let i = 0; i < indices.getCount(); i++) {\n\t\tdstAttribute.setElement(i, srcAttribute.getElement(indices.getScalar(i), el));\n\t}\n\n\tif (!visited.has(srcAttribute)) visited.set(srcAttribute, new Map());\n\tvisited.get(srcAttribute)!.set(indices, dstAttribute);\n\n\treturn dstAttribute;\n}\n","import type { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { unweld } from './unweld.js';\nimport { createTransform } from './utils.js';\nimport { normalize } from 'gl-matrix/vec3';\n\nconst NAME = 'normals';\n\n/** Options for the {@link normals} function. */\nexport interface NormalsOptions {\n\t/** Whether to overwrite existing `NORMAL` attributes. */\n\toverwrite?: boolean;\n}\n\nconst NORMALS_DEFAULTS: Required<NormalsOptions> = {\n\toverwrite: false,\n};\n\n/**\n * Generates flat vertex normals for mesh primitives.\n *\n * Example:\n *\n * ```ts\n * import { normals } from '@gltf-transform/functions';\n *\n * await document.transform(normals({overwrite: true}));\n * ```\n *\n * @category Transforms\n */\nexport function normals(_options: NormalsOptions = NORMALS_DEFAULTS): Transform {\n\tconst options = { ...NORMALS_DEFAULTS, ..._options } as Required<NormalsOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tlet modified = 0;\n\n\t\tawait document.transform(unweld());\n\n\t\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst position = prim.getAttribute('POSITION')!;\n\t\t\t\tlet normal = prim.getAttribute('NORMAL');\n\n\t\t\t\tif (options.overwrite && normal) {\n\t\t\t\t\tnormal.dispose();\n\t\t\t\t} else if (normal) {\n\t\t\t\t\tlogger.debug(`${NAME}: Skipping primitive: NORMAL found.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tnormal = document\n\t\t\t\t\t.createAccessor()\n\t\t\t\t\t.setArray(new Float32Array(position.getCount() * 3))\n\t\t\t\t\t.setType('VEC3');\n\n\t\t\t\tconst a = [0, 0, 0] as vec3;\n\t\t\t\tconst b = [0, 0, 0] as vec3;\n\t\t\t\tconst c = [0, 0, 0] as vec3;\n\n\t\t\t\tfor (let i = 0; i < position.getCount(); i += 3) {\n\t\t\t\t\tposition.getElement(i + 0, a);\n\t\t\t\t\tposition.getElement(i + 1, b);\n\t\t\t\t\tposition.getElement(i + 2, c);\n\n\t\t\t\t\tconst faceNormal = computeNormal(a, b, c);\n\n\t\t\t\t\tnormal.setElement(i + 0, faceNormal);\n\t\t\t\t\tnormal.setElement(i + 1, faceNormal);\n\t\t\t\t\tnormal.setElement(i + 2, faceNormal);\n\t\t\t\t}\n\n\t\t\t\tprim.setAttribute('NORMAL', normal);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\n// https://stackoverflow.com/a/23709352/1314762\nfunction computeNormal(a: vec3, b: vec3, c: vec3): vec3 {\n\tconst A = [b[0] - a[0], b[1] - a[1], b[2] - a[2]];\n\tconst B = [c[0] - a[0], c[1] - a[1], c[2] - a[2]];\n\tconst n = [\n\t\tA[1] * B[2] - A[2] * B[1], //\n\t\tA[2] * B[0] - A[0] * B[2],\n\t\tA[0] * B[1] - A[1] * B[0],\n\t] as vec3;\n\treturn normalize([0, 0, 0], n) as vec3;\n}\n","import {\n\tColorUtils,\n\tDocument,\n\tMaterial,\n\tPrimitive,\n\tPropertyType,\n\tTexture,\n\tTextureInfo,\n\tTransform,\n\tvec4,\n} from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\nimport { prune } from './prune.js';\nimport ndarray, { NdArray, TypedArray } from 'ndarray';\nimport { savePixels } from 'ndarray-pixels';\n\nconst NAME = 'palette';\n\ntype TexturableProp = 'baseColor' | 'emissive' | 'metallicRoughness';\n\nexport interface PaletteOptions {\n\t/** Size (in pixels) of a single block within each palette texture. Default: 4. */\n\tblockSize?: number;\n\t/**\n\t * Minimum number of blocks in the palette texture. If fewer unique\n\t * material values are found, no palettes will be generated. Default: 2.\n\t */\n\tmin?: number;\n}\n\nexport const PALETTE_DEFAULTS: Required<PaletteOptions> = {\n\tblockSize: 4,\n\tmin: 2,\n};\n\n/**\n * Creates palette textures containing all unique values of scalar\n * {@link Material} properties within the scene, then merges materials. For\n * scenes with many solid-colored materials (often found in CAD, architectural,\n * or low-poly styles), texture palettes can reduce the number of materials\n * used, and significantly increase the number of {@link Mesh} objects eligible\n * for {@link join} operations.\n *\n * Materials already containing texture coordinates (UVs) are not eligible for\n * texture palette optimizations. Currently only a material's base color,\n * alpha, emissive factor, metallic factor, and roughness factor are converted\n * to palette textures.\n *\n * Example:\n *\n * ```typescript\n * import { palette, flatten, dequantize, join } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tpalette({ min: 5 }),\n * \tflatten(),\n * \tdequantize(),\n * \tjoin()\n * );\n * ```\n *\n * The illustration below shows a typical base color palette texture:\n *\n * <img\n * \tsrc=\"/media/functions/palette.png\"\n * \talt=\"Row of colored blocks\"\n * \tstyle=\"width: 100%; max-width: 320px; image-rendering: pixelated;\">\n *\n * @category Transforms\n */\nexport function palette(_options: PaletteOptions = PALETTE_DEFAULTS): Transform {\n\tconst options = { ...PALETTE_DEFAULTS, ..._options } as Required<PaletteOptions>;\n\tconst blockSize = Math.max(options.blockSize, 1);\n\tconst min = Math.max(options.min, 1);\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tconst root = document.getRoot();\n\n\t\t// Find and remove unused TEXCOORD_n attributes.\n\t\tawait document.transform(\n\t\t\tprune({\n\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR],\n\t\t\t\tkeepAttributes: false,\n\t\t\t\tkeepIndices: true,\n\t\t\t\tkeepLeaves: true,\n\t\t\t}),\n\t\t);\n\n\t\tconst prims = new Set<Primitive>();\n\t\tconst materials = new Set<Material>();\n\n\t\t// (1) Gather list of eligible prims and materials.\n\n\t\tfor (const mesh of root.listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst material = prim.getMaterial();\n\t\t\t\tif (!material || !!prim.getAttribute('TEXCOORD_0')) continue;\n\n\t\t\t\tprims.add(prim);\n\t\t\t\tmaterials.add(material);\n\t\t\t}\n\t\t}\n\n\t\t// (2) Gather list of distinct material properties.\n\n\t\tconst materialKeys = new Set<string>();\n\t\tconst materialKeyMap = new Map<Material, string>();\n\t\tconst materialProps: Record<TexturableProp, Set<string>> = {\n\t\t\tbaseColor: new Set<string>(),\n\t\t\temissive: new Set<string>(),\n\t\t\tmetallicRoughness: new Set<string>(),\n\t\t};\n\n\t\tfor (const material of materials) {\n\t\t\tconst baseColor = encodeRGBA(material.getBaseColorFactor().slice() as vec4);\n\t\t\tconst emissive = encodeRGBA([...material.getEmissiveFactor(), 1]);\n\t\t\tconst roughness = encodeFloat(material.getRoughnessFactor());\n\t\t\tconst metallic = encodeFloat(material.getMetallicFactor());\n\t\t\tconst key = `baseColor:${baseColor},emissive:${emissive},metallicRoughness:${metallic}${roughness}`;\n\t\t\tmaterialProps.baseColor.add(baseColor);\n\t\t\tmaterialProps.emissive.add(emissive);\n\t\t\tmaterialProps.metallicRoughness.add(metallic + '+' + roughness);\n\t\t\tmaterialKeys.add(key);\n\t\t\tmaterialKeyMap.set(material, key);\n\t\t}\n\n\t\t// logger.debug(`${NAME}:\\n${Array.from(materialKeys.values()).join('\\n')}`);\n\n\t\tconst keyCount = materialKeys.size;\n\t\tif (keyCount < min) {\n\t\t\tlogger.debug(`${NAME}: Found <${min} unique material properties. Exiting.`);\n\t\t\treturn;\n\t\t}\n\n\t\t// (3) Allocate palette textures.\n\n\t\tconst w = ceilPowerOfTwo(keyCount * blockSize);\n\t\tconst h = ceilPowerOfTwo(blockSize);\n\t\tconst padWidth = w - keyCount * blockSize;\n\n\t\tconst paletteTexturePixels: Record<TexturableProp, NdArray<Uint8Array> | null> = {\n\t\t\tbaseColor: null,\n\t\t\temissive: null,\n\t\t\tmetallicRoughness: null,\n\t\t};\n\n\t\t// Properties skipped for material equality comparisons.\n\t\tconst skipProps = new Set(['name', 'extras']);\n\t\tconst skip = (...props: string[]) => props.forEach((prop) => skipProps.add(prop));\n\n\t\tlet baseColorTexture: Texture | null = null;\n\t\tlet emissiveTexture: Texture | null = null;\n\t\tlet metallicRoughnessTexture: Texture | null = null;\n\n\t\tif (materialProps.baseColor.size >= min) {\n\t\t\tconst name = 'PaletteBaseColor';\n\t\t\tbaseColorTexture = document.createTexture(name).setURI(`${name}.png`);\n\t\t\tpaletteTexturePixels.baseColor = ndarray(new Uint8Array(w * h * 4), [w, h, 4]);\n\t\t\tskip('baseColorFactor', 'baseColorTexture', 'baseColorTextureInfo');\n\t\t}\n\t\tif (materialProps.emissive.size >= min) {\n\t\t\tconst name = 'PaletteEmissive';\n\t\t\temissiveTexture = document.createTexture(name).setURI(`${name}.png`);\n\t\t\tpaletteTexturePixels.emissive = ndarray(new Uint8Array(w * h * 4), [w, h, 4]);\n\t\t\tskip('emissiveFactor', 'emissiveTexture', 'emissiveTextureInfo');\n\t\t}\n\t\tif (materialProps.metallicRoughness.size >= min) {\n\t\t\tconst name = 'PaletteMetallicRoughness';\n\t\t\tmetallicRoughnessTexture = document.createTexture(name).setURI(`${name}.png`);\n\t\t\tpaletteTexturePixels.metallicRoughness = ndarray(new Uint8Array(w * h * 4), [w, h, 4]);\n\t\t\tskip('metallicFactor', 'roughnessFactor', 'metallicRoughnessTexture', 'metallicRoughnessTextureInfo');\n\t\t}\n\n\t\tif (!(baseColorTexture || emissiveTexture || metallicRoughnessTexture)) {\n\t\t\tlogger.debug(`${NAME}: No material property has >=${min} unique values. Exiting.`);\n\t\t\treturn;\n\t\t}\n\n\t\t// (4) Write blocks to palette textures.\n\n\t\tconst visitedKeys = new Set<string>();\n\t\tconst materialIndices = new Map<string, number>();\n\t\tconst paletteMaterials: Material[] = [];\n\n\t\tlet nextIndex = 0;\n\t\tfor (const material of materials) {\n\t\t\tconst key = materialKeyMap.get(material)!;\n\t\t\tif (visitedKeys.has(key)) continue;\n\n\t\t\tconst index = nextIndex++;\n\n\t\t\tif (paletteTexturePixels.baseColor) {\n\t\t\t\tconst pixels = paletteTexturePixels.baseColor;\n\t\t\t\tconst baseColor = [...material.getBaseColorFactor()] as vec4;\n\t\t\t\tColorUtils.convertLinearToSRGB(baseColor, baseColor);\n\t\t\t\twriteBlock(pixels, index, baseColor, blockSize);\n\t\t\t}\n\t\t\tif (paletteTexturePixels.emissive) {\n\t\t\t\tconst pixels = paletteTexturePixels.emissive;\n\t\t\t\tconst emissive = [...material.getEmissiveFactor(), 1] as vec4;\n\t\t\t\tColorUtils.convertLinearToSRGB(emissive, emissive);\n\t\t\t\twriteBlock(pixels, index, emissive, blockSize);\n\t\t\t}\n\t\t\tif (paletteTexturePixels.metallicRoughness) {\n\t\t\t\tconst pixels = paletteTexturePixels.metallicRoughness;\n\t\t\t\tconst metallic = material.getMetallicFactor();\n\t\t\t\tconst roughness = material.getRoughnessFactor();\n\t\t\t\twriteBlock(pixels, index, [0, roughness, metallic, 1], blockSize);\n\t\t\t}\n\n\t\t\tvisitedKeys.add(key);\n\t\t\tmaterialIndices.set(key, index);\n\t\t}\n\n\t\t// (5) Compress palette textures and assign to palette materials.\n\n\t\tconst mimeType = 'image/png';\n\n\t\tif (baseColorTexture) {\n\t\t\tconst image = await savePixels(paletteTexturePixels.baseColor!, mimeType);\n\t\t\tbaseColorTexture.setImage(image).setMimeType(mimeType);\n\t\t}\n\t\tif (emissiveTexture) {\n\t\t\tconst image = await savePixels(paletteTexturePixels.emissive!, mimeType);\n\t\t\temissiveTexture.setImage(image).setMimeType(mimeType);\n\t\t}\n\t\tif (metallicRoughnessTexture) {\n\t\t\tconst image = await savePixels(paletteTexturePixels.metallicRoughness!, mimeType);\n\t\t\tmetallicRoughnessTexture.setImage(image).setMimeType(mimeType);\n\t\t}\n\n\t\t// (6) Create palette materials, generate UVs, and assign both to prims.\n\n\t\tlet nextPaletteMaterialIndex = 1;\n\t\tfor (const prim of prims) {\n\t\t\tconst srcMaterial = prim.getMaterial()!;\n\t\t\tconst key = materialKeyMap.get(srcMaterial)!;\n\t\t\tconst blockIndex = materialIndices.get(key)!;\n\n\t\t\t// UVs are centered horizontally in each block, descending vertically\n\t\t\t// to form a diagonal line in the UV layout. Easy and compressible.\n\t\t\tconst baseUV = (blockIndex + 0.5) / keyCount;\n\t\t\tconst padUV = (baseUV * (w - padWidth)) / w;\n\n\t\t\tconst position = prim.getAttribute('POSITION')!;\n\t\t\tconst buffer = position.getBuffer();\n\t\t\tconst array = new Float32Array(position.getCount() * 2).fill(padUV);\n\t\t\tconst uv = document.createAccessor().setType('VEC2').setArray(array).setBuffer(buffer);\n\n\t\t\tlet dstMaterial;\n\t\t\tfor (const material of paletteMaterials) {\n\t\t\t\tif (material.equals(srcMaterial, skipProps)) {\n\t\t\t\t\tdstMaterial = material;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!dstMaterial) {\n\t\t\t\tconst suffix = (nextPaletteMaterialIndex++).toString().padStart(3, '0');\n\t\t\t\tdstMaterial = srcMaterial.clone().setName(`PaletteMaterial${suffix}`);\n\n\t\t\t\tif (baseColorTexture) {\n\t\t\t\t\tdstMaterial\n\t\t\t\t\t\t.setBaseColorFactor([1, 1, 1, 1])\n\t\t\t\t\t\t.setBaseColorTexture(baseColorTexture)\n\t\t\t\t\t\t.getBaseColorTextureInfo()!\n\t\t\t\t\t\t.setMinFilter(TextureInfo.MinFilter.NEAREST)\n\t\t\t\t\t\t.setMagFilter(TextureInfo.MagFilter.NEAREST);\n\t\t\t\t}\n\t\t\t\tif (emissiveTexture) {\n\t\t\t\t\tdstMaterial\n\t\t\t\t\t\t.setEmissiveFactor([1, 1, 1])\n\t\t\t\t\t\t.setEmissiveTexture(emissiveTexture)\n\t\t\t\t\t\t.getEmissiveTextureInfo()!\n\t\t\t\t\t\t.setMinFilter(TextureInfo.MinFilter.NEAREST)\n\t\t\t\t\t\t.setMagFilter(TextureInfo.MagFilter.NEAREST);\n\t\t\t\t}\n\t\t\t\tif (metallicRoughnessTexture) {\n\t\t\t\t\tdstMaterial\n\t\t\t\t\t\t.setMetallicFactor(1)\n\t\t\t\t\t\t.setRoughnessFactor(1)\n\t\t\t\t\t\t.setMetallicRoughnessTexture(metallicRoughnessTexture)\n\t\t\t\t\t\t.getMetallicRoughnessTextureInfo()!\n\t\t\t\t\t\t.setMinFilter(TextureInfo.MinFilter.NEAREST)\n\t\t\t\t\t\t.setMagFilter(TextureInfo.MagFilter.NEAREST);\n\t\t\t\t}\n\n\t\t\t\tpaletteMaterials.push(dstMaterial);\n\t\t\t}\n\n\t\t\tprim.setMaterial(dstMaterial).setAttribute('TEXCOORD_0', uv);\n\t\t}\n\n\t\tawait document.transform(prune({ propertyTypes: [PropertyType.MATERIAL] }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/** Encodes a floating-point value on the interval [0,1] at 8-bit precision. */\nfunction encodeFloat(value: number): string {\n\tconst hex = Math.round(value * 255).toString(16);\n\treturn hex.length === 1 ? '0' + hex : hex;\n}\n\n/** Encodes an RGBA color in Linear-sRGB-D65 color space. */\nfunction encodeRGBA(value: vec4): string {\n\tColorUtils.convertLinearToSRGB(value, value);\n\treturn value.map(encodeFloat).join('');\n}\n\n/** Returns the nearest higher power of two. */\nfunction ceilPowerOfTwo(value: number): number {\n\treturn Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n}\n\n/** Writes an NxN block of pixels to an image, at the given block index. */\nfunction writeBlock(pixels: NdArray<TypedArray>, index: number, value: vec4, blockSize: number): void {\n\tfor (let i = 0; i < blockSize; i++) {\n\t\tfor (let j = 0; j < blockSize; j++) {\n\t\t\tpixels.set(index * blockSize + i, j, 0, value[0] * 255);\n\t\t\tpixels.set(index * blockSize + i, j, 1, value[1] * 255);\n\t\t\tpixels.set(index * blockSize + i, j, 2, value[2] * 255);\n\t\t\tpixels.set(index * blockSize + i, j, 3, value[3] * 255);\n\t\t}\n\t}\n}\n","import { Document, ILogger, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune.js';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'partition';\n\nexport interface PartitionOptions {\n\tanimations?: boolean | Array<string>;\n\tmeshes?: boolean | Array<string>;\n}\n\nconst PARTITION_DEFAULTS: Required<PartitionOptions> = {\n\tanimations: true,\n\tmeshes: true,\n};\n\n/**\n * Partitions the binary payload of a glTF file so separate mesh or animation data is in separate\n * `.bin` {@link Buffer}s. This technique may be useful for engines that support lazy-loading\n * specific binary resources as needed over the application lifecycle.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer]\n *\n * await document.transform(partition({meshes: true}));\n *\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n * ```\n *\n * @category Transforms\n */\nexport function partition(_options: PartitionOptions = PARTITION_DEFAULTS): Transform {\n\tconst options = { ...PARTITION_DEFAULTS, ..._options } as Required<PartitionOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (options.meshes !== false) partitionMeshes(doc, logger, options);\n\t\tif (options.animations !== false) partitionAnimations(doc, logger, options);\n\n\t\tif (!options.meshes && !options.animations) {\n\t\t\tlogger.warn(`${NAME}: Select animations or meshes to create a partition.`);\n\t\t}\n\n\t\tawait doc.transform(prune({ propertyTypes: [PropertyType.BUFFER] }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction partitionMeshes(doc: Document, logger: ILogger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(\n\t\tdoc\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.map((b) => b.getURI())\n\t);\n\n\tdoc.getRoot()\n\t\t.listMeshes()\n\t\t.forEach((mesh, meshIndex) => {\n\t\t\tif (Array.isArray(options.meshes) && !options.meshes.includes(mesh.getName())) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping mesh #${meshIndex} with name \"${mesh.getName()}\".`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for mesh \"${mesh.getName()}\".`);\n\n\t\t\tconst buffer = doc\n\t\t\t\t.createBuffer(mesh.getName())\n\t\t\t\t.setURI(createBufferURI(mesh.getName() || 'mesh', existingURIs));\n\n\t\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\t\tconst indices = primitive.getIndices();\n\t\t\t\tif (indices) indices.setBuffer(buffer);\n\t\t\t\tprimitive.listAttributes().forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\tprimitive.listTargets().forEach((primTarget) => {\n\t\t\t\t\tprimTarget.listAttributes().forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\t});\n\t\t\t});\n\t\t});\n}\n\nfunction partitionAnimations(doc: Document, logger: ILogger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(\n\t\tdoc\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.map((b) => b.getURI())\n\t);\n\n\tdoc.getRoot()\n\t\t.listAnimations()\n\t\t.forEach((anim, animIndex) => {\n\t\t\tif (Array.isArray(options.animations) && !options.animations.includes(anim.getName())) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping animation #${animIndex} with name \"${anim.getName()}\".`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for animation \"${anim.getName()}\".`);\n\n\t\t\tconst buffer = doc\n\t\t\t\t.createBuffer(anim.getName())\n\t\t\t\t.setURI(createBufferURI(anim.getName() || 'animation', existingURIs));\n\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\tif (input) input.setBuffer(buffer);\n\t\t\t\tif (output) output.setBuffer(buffer);\n\t\t\t});\n\t\t});\n}\n\nfunction createBufferURI(basename: string, existing: Set<string>): string {\n\tlet uri = `${basename}.bin`;\n\tlet i = 1;\n\twhile (existing.has(uri)) uri = `${basename}_${i++}.bin`;\n\treturn uri;\n}\n","var InterpolationInternal;\n\n(function (InterpolationInternal) {\n  InterpolationInternal[InterpolationInternal[\"STEP\"] = 0] = \"STEP\";\n  InterpolationInternal[InterpolationInternal[\"LERP\"] = 1] = \"LERP\";\n  InterpolationInternal[InterpolationInternal[\"SLERP\"] = 2] = \"SLERP\";\n})(InterpolationInternal || (InterpolationInternal = {}));\n\nconst TO_INTERPOLATION_INTERNAL = {\n  step: InterpolationInternal.STEP,\n  lerp: InterpolationInternal.LERP,\n  slerp: InterpolationInternal.SLERP\n};\nconst EPSILON = 0.000001;\n\n/* Implementation */\n\nfunction resampleDebug(input, output, interpolation, tolerance = 1e-4) {\n  const elementSize = output.length / input.length;\n  const tmp = new Array(elementSize).fill(0);\n  const value = new Array(elementSize).fill(0);\n  const valueNext = new Array(elementSize).fill(0);\n  const valuePrev = new Array(elementSize).fill(0);\n  const lastIndex = input.length - 1;\n  let writeIndex = 1;\n\n  for (let i = 1; i < lastIndex; ++i) {\n    const timePrev = input[writeIndex - 1];\n    const time = input[i];\n    const timeNext = input[i + 1];\n    const t = (time - timePrev) / (timeNext - timePrev);\n    let keep = false; // Remove unnecessary adjacent keyframes.\n\n    if (time !== timeNext && (i !== 1 || time !== input[0])) {\n      getElement(output, writeIndex - 1, valuePrev);\n      getElement(output, i, value);\n      getElement(output, i + 1, valueNext);\n\n      if (interpolation === 'slerp') {\n        // Prune keyframes colinear with prev/next keyframes.\n        const sample = slerp(tmp, valuePrev, valueNext, t);\n        const angle = getAngle(valuePrev, value) + getAngle(value, valueNext);\n        keep = !eq(value, sample, tolerance) || angle + Number.EPSILON >= Math.PI;\n      } else if (interpolation === 'lerp') {\n        // Prune keyframes colinear with prev/next keyframes.\n        const sample = vlerp(tmp, valuePrev, valueNext, t);\n        keep = !eq(value, sample, tolerance);\n      } else if (interpolation === 'step') {\n        // Prune keyframes identical to prev/next keyframes.\n        keep = !eq(value, valuePrev) || !eq(value, valueNext);\n      }\n    } // In-place compaction.\n\n\n    if (keep) {\n      if (i !== writeIndex) {\n        input[writeIndex] = input[i];\n        setElement(output, writeIndex, getElement(output, i, tmp));\n      }\n\n      writeIndex++;\n    }\n  } // Flush last keyframe (compaction looks ahead).\n\n\n  if (lastIndex > 0) {\n    input[writeIndex] = input[lastIndex];\n    setElement(output, writeIndex, getElement(output, lastIndex, tmp));\n    writeIndex++;\n  }\n\n  return writeIndex;\n}\n/* Utilities */\n\nfunction getElement(array, index, target) {\n  for (let i = 0, elementSize = target.length; i < elementSize; i++) {\n    target[i] = array[index * elementSize + i];\n  }\n\n  return target;\n}\n\nfunction setElement(array, index, value) {\n  for (let i = 0, elementSize = value.length; i < elementSize; i++) {\n    array[index * elementSize + i] = value[i];\n  }\n}\n\nfunction eq(a, b, tolerance = 0) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (Math.abs(a[i] - b[i]) > tolerance) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction lerp(v0, v1, t) {\n  return v0 * (1 - t) + v1 * t;\n}\n\nfunction vlerp(out, a, b, t) {\n  for (let i = 0; i < a.length; i++) out[i] = lerp(a[i], b[i], t);\n\n  return out;\n} // From gl-matrix.\n\n\nfunction slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  let bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  let omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n\nfunction getAngle(a, b) {\n  const dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/** WASM loader for Web environments. */\nconst wasm = /* #__PURE__ */fetch( /* #__PURE__ */new URL('./release.wasm', import.meta.url));\n\n// SETUP\n///////////////////////////////////////////////////////////////////////////////\n\nlet exports;\nconst ready = /* #__PURE__ */new Promise(async (resolve, reject) => {\n  try {\n    const module = await WebAssembly.compile(await wasm);\n    exports = await instantiate(module, {});\n    resolve();\n  } catch (e) {\n    reject(e);\n  }\n});\n\nasync function instantiate(module, imports = {}) {\n  const instance = await WebAssembly.instantiate(module, {\n    env: Object.assign(Object.create(globalThis), {}, {\n      abort: __abort\n    })\n  });\n  return instance.exports;\n} ///////////////////////////////////////////////////////////////////////////////\n// PUBLIC API\n///////////////////////////////////////////////////////////////////////////////\n\n\nconst CHUNK_SIZE = 1024; // The first and last keyframes cannot be removed in any given step, but we need to\n// somehow remove keyframes on chunk boundaries. So after processing each chunk,\n// we copy its last two keyframes in front of the next chunk, and run from there.\n//\n// 🟩 ⬜️ ⬜️ ⬜️ ⬜️ ⬜️                  // chunk 1, original\n// 🟩 ⬜️ 🟨 🟥                       // chunk 1, resampled\n//            🟨 🟥 🟩 ⬜️ ⬜️ ⬜️       // chunk 2, original\n//            🟨 🟩 ⬜️ ⬜️            // chunk 2, resampled\n// ...\n\nfunction resample(input, output, interpolation, tolerance = 1e-4) {\n  __assert(!!exports, 'Await \"ready\" before using module.');\n\n  __assert(input instanceof Float32Array, 'Missing Float32Array input.');\n\n  __assert(output instanceof Float32Array, 'Missing Float32Array output.');\n\n  const outputSize = output.length / input.length;\n\n  __assert(Number.isInteger(outputSize), 'Invalid input/output counts.');\n\n  __assert(interpolation in TO_INTERPOLATION_INTERNAL, 'Invalid interpolation.');\n\n  __assert(Number.isFinite(tolerance), 'Invalid tolerance');\n\n  const interpVal = TO_INTERPOLATION_INTERNAL[interpolation];\n  const srcCount = input.length;\n  let dstCount = 0;\n\n  for (let chunkStart = 0; chunkStart < input.length; chunkStart += CHUNK_SIZE) {\n    const chunkCount = Math.min(srcCount - chunkStart, CHUNK_SIZE); // Allocate a two-keyframe prefix for all chunks after the first.\n\n    const prefixCount = chunkStart > 0 ? 2 : 0;\n    const chunkInput = new Float32Array(input.buffer, input.byteOffset + (chunkStart - prefixCount) * Float32Array.BYTES_PER_ELEMENT, chunkCount + prefixCount);\n    const chunkOutput = new Float32Array(output.buffer, output.byteOffset + (chunkStart - prefixCount) * outputSize * Float32Array.BYTES_PER_ELEMENT, (chunkCount + prefixCount) * outputSize); // Copy prefix to start of next chunk.\n\n    if (prefixCount > 0) {\n      input.copyWithin(chunkStart - prefixCount, dstCount - prefixCount, dstCount);\n      output.copyWithin((chunkStart - prefixCount) * outputSize, (dstCount - prefixCount) * outputSize, dstCount * outputSize);\n    }\n\n    const inputPtr = __retain(__lowerStaticArray(chunkInput, 4, 2));\n\n    const outputPtr = __retain(__lowerStaticArray(chunkOutput, 4, 2));\n\n    try {\n      exports.__setArgumentsLength(4);\n\n      const count = exports.resample(inputPtr, outputPtr, interpVal, tolerance) >>> 0;\n      dstCount -= prefixCount;\n\n      __liftStaticArray(inputPtr, input, dstCount, count);\n\n      __liftStaticArray(outputPtr, output, dstCount * outputSize, count * outputSize);\n\n      dstCount += count;\n    } finally {\n      __release(inputPtr);\n\n      __release(outputPtr);\n\n      exports.__collect();\n    }\n  } // console.log(`Memory: ${exports.memory.buffer.byteLength} bytes`);\n\n\n  return dstCount;\n} ///////////////////////////////////////////////////////////////////////////////\n// INTERNAL\n///////////////////////////////////////////////////////////////////////////////\n\nfunction __assert(cond, msg) {\n  if (!cond) throw new Error(msg);\n}\n\nfunction __retain(ptr) {\n  exports.__pin(ptr);\n\n  return ptr;\n}\n\nfunction __release(ptr) {\n  exports.__unpin(ptr);\n\n  return ptr;\n}\n\nfunction __liftString(ptr) {\n  if (!ptr) return null;\n  const end = ptr + new Uint32Array(exports.memory.buffer)[ptr - 4 >>> 2] >>> 1,\n        memoryU16 = new Uint16Array(exports.memory.buffer);\n  let start = ptr >>> 1,\n      string = '';\n\n  while (end - start > 1024) string += String.fromCharCode(...memoryU16.subarray(start, start += 1024));\n\n  return string + String.fromCharCode(...memoryU16.subarray(start, end));\n}\n\nfunction __lowerStaticArray(values, id, align) {\n  const ptr = exports.__pin(exports.__new(values.length << align, id)) >>> 0;\n  new Float32Array(exports.memory.buffer, ptr, values.length).set(values);\n\n  exports.__unpin(ptr);\n\n  return ptr;\n}\n\nfunction __liftStaticArray(ptr, values, offset, count) {\n  values.set(new Float32Array(exports.memory.buffer, ptr, count), offset);\n}\n\nfunction __abort(messagePtr, fileNamePtr, lineNumber, columnNumber) {\n  const message = __liftString(messagePtr >>> 0);\n\n  const fileName = __liftString(fileNamePtr >>> 0);\n\n  lineNumber = lineNumber >>> 0;\n  columnNumber = columnNumber >>> 0;\n\n  (() => {\n    throw Error(`${message} in ${fileName}:${lineNumber}:${columnNumber}`);\n  })();\n}\n\nexport { ready, resample, resampleDebug };\n//# sourceMappingURL=keyframe-resample-browser.modern.js.map\n","import {\n\tAccessor,\n\tAnimationSampler,\n\tComponentTypeToTypedArray,\n\tDocument,\n\tGLTF,\n\tMathUtils,\n\tPropertyType,\n\tRoot,\n\tTransform,\n\tTransformContext,\n\tTypedArray,\n} from '@gltf-transform/core';\nimport { dedup } from './dedup.js';\nimport { createTransform, isTransformPending } from './utils.js';\nimport { resampleDebug } from 'keyframe-resample';\n\nconst NAME = 'resample';\n\nconst EMPTY_ARRAY = new Float32Array(0);\n\nexport interface ResampleOptions {\n\tready?: Promise<void>;\n\tresample?: unknown; // glTF-Transform/issues/996\n\ttolerance?: number;\n}\n\nconst RESAMPLE_DEFAULTS: Required<ResampleOptions> = {\n\tready: Promise.resolve(),\n\tresample: resampleDebug,\n\ttolerance: 1e-4,\n};\n\n/**\n * Resample {@link AnimationChannel AnimationChannels}, losslessly deduplicating keyframes to\n * reduce file size. Duplicate keyframes are commonly present in animation 'baked' by the\n * authoring software to apply IK constraints or other software-specific features.\n *\n * Optionally, a WebAssembly implementation from the\n * [`keyframe-resample`](https://github.com/donmccurdy/keyframe-resample-wasm) library may be\n * provided. The WebAssembly version is usually much faster at processing large animation\n * sequences, but may not be compatible with all runtimes and JavaScript build tools.\n *\n * Result: (0,0,0,0,1,1,1,0,0,0,0,0,0,0) → (0,0,1,1,0,0)\n *\n * Example:\n *\n * ```\n * import { resample } from '@gltf-transform/functions';\n * import { ready, resample as resampleWASM } from 'keyframe-resample';\n *\n * // JavaScript (slower)\n * await document.transform(resample());\n *\n * // WebAssembly (faster)\n * await document.transform(resample({ ready, resample: resampleWASM }));\n * ```\n *\n * @privateRemarks Implementation based on THREE.KeyframeTrack#optimize().\n * @category Transforms\n */\nexport function resample(_options: ResampleOptions = RESAMPLE_DEFAULTS): Transform {\n\tconst options = { ...RESAMPLE_DEFAULTS, ..._options } as Required<ResampleOptions>;\n\n\treturn createTransform(NAME, async (document: Document, context?: TransformContext): Promise<void> => {\n\t\tconst accessorsVisited = new Set<Accessor>();\n\t\tconst srcAccessorCount = document.getRoot().listAccessors().length;\n\t\tconst logger = document.getLogger();\n\n\t\tconst ready = options.ready;\n\t\tconst resample = options.resample as typeof resampleDebug;\n\n\t\tawait ready;\n\n\t\tfor (const animation of document.getRoot().listAnimations()) {\n\t\t\tconst samplerTargetPaths = new Map<AnimationSampler, GLTF.AnimationChannelTargetPath>();\n\t\t\tfor (const channel of animation.listChannels()) {\n\t\t\t\tsamplerTargetPaths.set(channel.getSampler()!, channel.getTargetPath()!);\n\t\t\t}\n\n\t\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\t\tconst samplerInterpolation = sampler.getInterpolation();\n\n\t\t\t\tif (samplerInterpolation === 'STEP' || samplerInterpolation === 'LINEAR') {\n\t\t\t\t\tconst input = sampler.getInput()!;\n\t\t\t\t\tconst output = sampler.getOutput()!;\n\n\t\t\t\t\taccessorsVisited.add(input);\n\t\t\t\t\taccessorsVisited.add(output);\n\n\t\t\t\t\t// prettier-ignore\n\t\t\t\t\tconst tmpTimes = toFloat32Array(\n\t\t\t\t\t\tinput.getArray()!,\n\t\t\t\t\t\tinput.getComponentType(),\n\t\t\t\t\t\tinput.getNormalized()\n\t\t\t\t\t);\n\t\t\t\t\tconst tmpValues = toFloat32Array(\n\t\t\t\t\t\toutput.getArray()!,\n\t\t\t\t\t\toutput.getComponentType(),\n\t\t\t\t\t\toutput.getNormalized(),\n\t\t\t\t\t);\n\n\t\t\t\t\tconst elementSize = tmpValues.length / tmpTimes.length;\n\t\t\t\t\tconst srcCount = tmpTimes.length;\n\t\t\t\t\tlet dstCount: number;\n\n\t\t\t\t\tif (samplerInterpolation === 'STEP') {\n\t\t\t\t\t\tdstCount = resample(tmpTimes, tmpValues, 'step', options.tolerance);\n\t\t\t\t\t} else if (samplerTargetPaths.get(sampler) === 'rotation') {\n\t\t\t\t\t\tdstCount = resample(tmpTimes, tmpValues, 'slerp', options.tolerance);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdstCount = resample(tmpTimes, tmpValues, 'lerp', options.tolerance);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dstCount < srcCount) {\n\t\t\t\t\t\t// Clone the input/output accessors, without cloning their underlying\n\t\t\t\t\t\t// arrays. Then assign the resampled data.\n\t\t\t\t\t\tconst srcTimes = input.getArray()!;\n\t\t\t\t\t\tconst srcValues = output.getArray()!;\n\n\t\t\t\t\t\tconst dstTimes = fromFloat32Array(\n\t\t\t\t\t\t\tnew Float32Array(tmpTimes.buffer, tmpTimes.byteOffset, dstCount),\n\t\t\t\t\t\t\tinput.getComponentType(),\n\t\t\t\t\t\t\tinput.getNormalized(),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst dstValues = fromFloat32Array(\n\t\t\t\t\t\t\tnew Float32Array(tmpValues.buffer, tmpValues.byteOffset, dstCount * elementSize),\n\t\t\t\t\t\t\toutput.getComponentType(),\n\t\t\t\t\t\t\toutput.getNormalized(),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tinput.setArray(EMPTY_ARRAY);\n\t\t\t\t\t\toutput.setArray(EMPTY_ARRAY);\n\n\t\t\t\t\t\tsampler.setInput(input.clone().setArray(dstTimes));\n\t\t\t\t\t\tsampler.setOutput(output.clone().setArray(dstValues));\n\n\t\t\t\t\t\tinput.setArray(srcTimes);\n\t\t\t\t\t\toutput.setArray(srcValues);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const accessor of Array.from(accessorsVisited.values())) {\n\t\t\tconst used = accessor.listParents().some((p) => !(p instanceof Root));\n\t\t\tif (!used) accessor.dispose();\n\t\t}\n\n\t\t// Resampling may result in duplicate input or output sampler\n\t\t// accessors. Find and remove the duplicates after processing.\n\t\tconst dstAccessorCount = document.getRoot().listAccessors().length;\n\t\tif (dstAccessorCount > srcAccessorCount && !isTransformPending(context, NAME, 'dedup')) {\n\t\t\tawait document.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/** Returns a copy of the source array, as a denormalized Float32Array. */\nfunction toFloat32Array(\n\tsrcArray: TypedArray,\n\tcomponentType: GLTF.AccessorComponentType,\n\tnormalized: boolean,\n): Float32Array {\n\tif (srcArray instanceof Float32Array) return srcArray.slice();\n\tconst dstArray = new Float32Array(srcArray);\n\tif (!normalized) return dstArray;\n\n\tfor (let i = 0; i < dstArray.length; i++) {\n\t\tdstArray[i] = MathUtils.decodeNormalizedInt(dstArray[i], componentType);\n\t}\n\n\treturn dstArray;\n}\n\n/** Returns a copy of the source array, with specified component type and normalization. */\nfunction fromFloat32Array(\n\tsrcArray: Float32Array,\n\tcomponentType: GLTF.AccessorComponentType,\n\tnormalized: boolean,\n): TypedArray {\n\tif (componentType === Accessor.ComponentType.FLOAT) return srcArray.slice();\n\tconst TypedArray = ComponentTypeToTypedArray[componentType];\n\tconst dstArray = new TypedArray(srcArray.length);\n\n\tfor (let i = 0; i < dstArray.length; i++) {\n\t\tdstArray[i] = normalized ? MathUtils.encodeNormalizedInt(srcArray[i], componentType) : srcArray[i];\n\t}\n\n\treturn dstArray;\n}\n","import { Accessor, AnimationChannel, AnimationSampler, Document, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'sequence';\n\nexport interface SequenceOptions {\n\t/** Frames per second, where one node is shown each frame. Default 10. */\n\tfps?: number;\n\t/** Pattern (regex) used to filter nodes for the sequence. Required. */\n\tpattern: RegExp;\n\t/** Name of the new animation. */\n\tname?: string;\n\t/** Whether to sort the nodes by name, or use original order. Default true. */\n\tsort?: boolean;\n}\n\nconst SEQUENCE_DEFAULTS: Required<SequenceOptions> = {\n\tname: '',\n\tfps: 10,\n\tpattern: /.*/,\n\tsort: true,\n};\n\n/**\n * Creates an {@link Animation} displaying each of the specified {@link Node}s sequentially.\n *\n * @category Transforms\n */\nexport function sequence(_options: SequenceOptions = SEQUENCE_DEFAULTS): Transform {\n\tconst options = { ...SEQUENCE_DEFAULTS, ..._options } as Required<SequenceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst fps = options.fps;\n\n\t\t// Collect sequence nodes.\n\t\tconst sequenceNodes = root.listNodes().filter((node) => node.getName().match(options.pattern));\n\n\t\t// Sort by node name.\n\t\tif (options.sort) {\n\t\t\tsequenceNodes.sort((a, b) => (a.getName() > b.getName() ? 1 : -1));\n\t\t}\n\n\t\t// Create animation cycling visibility of each node.\n\t\tconst anim = doc.createAnimation(options.name);\n\t\tconst animBuffer = root.listBuffers()[0];\n\t\tsequenceNodes.forEach((node, i) => {\n\t\t\t// Create keyframe tracks that show each node for a single frame.\n\t\t\tlet inputArray;\n\t\t\tlet outputArray;\n\t\t\tif (i === 0) {\n\t\t\t\tinputArray = [i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [1, 1, 1, 0, 0, 0];\n\t\t\t} else if (i === sequenceNodes.length - 1) {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1];\n\t\t\t} else {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1, 0, 0, 0];\n\t\t\t}\n\n\t\t\t// Append channel to animation sequence.\n\t\t\tconst input = doc.createAccessor().setArray(new Float32Array(inputArray)).setBuffer(animBuffer);\n\t\t\tconst output = doc\n\t\t\t\t.createAccessor()\n\t\t\t\t.setArray(new Float32Array(outputArray))\n\t\t\t\t.setBuffer(animBuffer)\n\t\t\t\t.setType(Accessor.Type.VEC3);\n\t\t\tconst sampler = doc\n\t\t\t\t.createAnimationSampler()\n\t\t\t\t.setInterpolation(AnimationSampler.Interpolation.STEP)\n\t\t\t\t.setInput(input)\n\t\t\t\t.setOutput(output);\n\t\t\tconst channel = doc\n\t\t\t\t.createAnimationChannel()\n\t\t\t\t.setTargetNode(node)\n\t\t\t\t.setTargetPath(AnimationChannel.TargetPath.SCALE)\n\t\t\t\t.setSampler(sampler);\n\t\t\tanim.addSampler(sampler).addChannel(channel);\n\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { Accessor, Document, Primitive, PropertyType, Transform, TransformContext } from '@gltf-transform/core';\nimport {\n\tcreateTransform,\n\tformatDeltaOp,\n\tdeepListAttributes,\n\tremapAttribute,\n\tdeepSwapAttribute,\n\tisTransformPending,\n} from './utils.js';\nimport { weld } from './weld.js';\nimport type { MeshoptSimplifier } from 'meshoptimizer';\nimport { dedup } from './dedup.js';\nimport { prune } from './prune.js';\n\nconst NAME = 'simplify';\n\n/** Options for the {@link simplify} function. */\nexport interface SimplifyOptions {\n\t/** MeshoptSimplifier instance. */\n\tsimplifier: unknown;\n\t/** Target ratio (0–1) of vertices to keep. Default: 0.0 (0%). */\n\tratio?: number;\n\t/** Limit on error, as a fraction of mesh radius. Default: 0.0001 (0.01%). */\n\terror?: number;\n\t/**\n\t * Whether to lock topological borders of the mesh. May be necessary when\n\t * adjacent 'chunks' of a large mesh (e.g. terrain) share a border, helping\n\t * to ensure no seams appear.\n\t */\n\tlockBorder?: boolean;\n}\n\nexport const SIMPLIFY_DEFAULTS: Required<Omit<SimplifyOptions, 'simplifier'>> = {\n\tratio: 0.0,\n\terror: 0.0001,\n\tlockBorder: false,\n};\n\n/**\n * Simplification algorithm, based on meshoptimizer, producing meshes with fewer\n * triangles and vertices. Simplification is lossy, but the algorithm aims to\n * preserve visual quality as much as possible for given parameters.\n *\n * The algorithm aims to reach the target 'ratio', while minimizing error. If\n * error exceeds the specified 'error' threshold, the algorithm will quit\n * before reaching the target ratio. Examples:\n *\n * - ratio=0.0, error=0.0001: Aims for maximum simplification, constrained to 0.01% error.\n * - ratio=0.5, error=0.0001: Aims for 50% simplification, constrained to 0.01% error.\n * - ratio=0.5, error=1: Aims for 50% simplification, unconstrained by error.\n *\n * Topology, particularly split vertices, will also limit the simplifier. For\n * best results, apply a {@link weld} operation before simplification.\n *\n * Example:\n *\n * ```javascript\n * import { simplify, weld } from '@gltf-transform/functions';\n * import { MeshoptSimplifier } from 'meshoptimizer';\n *\n * await document.transform(\n *   weld({ tolerance: 0.0001 }),\n *   simplify({ simplifier: MeshoptSimplifier, ratio: 0.75, error: 0.001 })\n * );\n * ```\n *\n * References:\n * - https://github.com/zeux/meshoptimizer/blob/master/js/README.md#simplifier\n *\n * @category Transforms\n */\nexport function simplify(_options: SimplifyOptions): Transform {\n\tconst options = { ...SIMPLIFY_DEFAULTS, ..._options } as Required<SimplifyOptions>;\n\n\tconst simplifier = options.simplifier as typeof MeshoptSimplifier | undefined;\n\n\tif (!simplifier) {\n\t\tthrow new Error(`${NAME}: simplifier dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (document: Document, context?: TransformContext): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\n\t\tawait simplifier.ready;\n\t\tawait document.transform(weld({ overwrite: false }));\n\n\t\t// Simplify mesh primitives.\n\t\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tif (prim.getMode() !== Primitive.Mode.TRIANGLES) {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t`${NAME}: Skipping primitive of mesh \"${mesh.getName()}\": Requires TRIANGLES draw mode.`,\n\t\t\t\t\t);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tsimplifyPrimitive(document, prim, options);\n\n\t\t\t\tif (prim.getIndices()!.getCount() === 0) prim.dispose();\n\t\t\t}\n\n\t\t\tif (mesh.listPrimitives().length === 0) mesh.dispose();\n\t\t}\n\n\t\t// Where simplification removes meshes, we may need to prune leaf nodes.\n\t\tawait document.transform(\n\t\t\tprune({\n\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR, PropertyType.NODE],\n\t\t\t\tkeepAttributes: true,\n\t\t\t\tkeepIndices: true,\n\t\t\t\tkeepLeaves: false,\n\t\t\t}),\n\t\t);\n\n\t\t// Where multiple primitive indices point into the same vertex streams, simplification\n\t\t// may write duplicate streams. Find and remove the duplicates after processing.\n\t\tif (!isTransformPending(context, NAME, 'dedup')) {\n\t\t\tawait document.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nexport function simplifyPrimitive(document: Document, prim: Primitive, _options: SimplifyOptions): Primitive {\n\tconst options = { ...SIMPLIFY_DEFAULTS, ..._options } as Required<SimplifyOptions>;\n\tconst simplifier = options.simplifier as typeof MeshoptSimplifier;\n\n\tconst logger = document.getLogger();\n\tconst position = prim.getAttribute('POSITION')!;\n\tconst srcIndices = prim.getIndices()!;\n\tconst srcVertexCount = position.getCount();\n\n\tlet positionArray = position.getArray()!;\n\tlet indicesArray = srcIndices.getArray()!;\n\n\t// (1) Gather attributes and indices in Meshopt-compatible format.\n\n\tif (position.getComponentType() !== Accessor.ComponentType.FLOAT) {\n\t\tif (position.getNormalized()) {\n\t\t\tconst src = positionArray;\n\t\t\tconst dst = new Float32Array(src.length);\n\n\t\t\t// Dequantize.\n\t\t\tfor (let i = 0, il = position.getCount(), el = [] as number[]; i < il; i++) {\n\t\t\t\tel = position.getElement(i, el);\n\t\t\t\tposition.setArray(dst).setElement(i, el).setArray(src);\n\t\t\t}\n\n\t\t\tpositionArray = dst;\n\t\t} else {\n\t\t\tpositionArray = new Float32Array(positionArray);\n\t\t}\n\t}\n\n\tif (srcIndices.getComponentType() !== Accessor.ComponentType.UNSIGNED_INT) {\n\t\tindicesArray = new Uint32Array(indicesArray);\n\t}\n\n\t// (2) Run simplification.\n\n\tconst targetCount = Math.floor((options.ratio * srcVertexCount) / 3) * 3;\n\tconst [dstIndicesArray, error] = simplifier.simplify(\n\t\tindicesArray as Uint32Array,\n\t\tpositionArray as Float32Array,\n\t\t3,\n\t\ttargetCount,\n\t\toptions.error,\n\t\toptions.lockBorder ? ['LockBorder'] : [],\n\t);\n\n\tconst [remap, unique] = simplifier.compactMesh(dstIndicesArray);\n\n\tlogger.debug(`${NAME}: ${formatDeltaOp(position.getCount(), unique)} vertices, error: ${error.toFixed(4)}.`);\n\n\t// (3) Write vertex attributes.\n\n\tfor (const srcAttribute of deepListAttributes(prim)) {\n\t\tconst dstAttribute = srcAttribute.clone();\n\t\tremapAttribute(dstAttribute, remap, unique);\n\t\tdeepSwapAttribute(prim, srcAttribute, dstAttribute);\n\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t}\n\n\t// (4) Write indices.\n\n\tconst dstIndices = srcIndices.clone();\n\tdstIndices.setArray(srcVertexCount <= 65534 ? new Uint16Array(dstIndicesArray) : dstIndicesArray);\n\tprim.setIndices(dstIndices);\n\tif (srcIndices.listParents().length === 1) srcIndices.dispose();\n\n\treturn prim;\n}\n","import { Document, MathUtils, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'sparse';\n\n/** Options for the {@link sparse} function. */\nexport interface SparseOptions {\n\t/**\n\t * Threshold ratio used to determine when an accessor should be sparse.\n\t * Default: 1 / 3.\n\t */\n\tratio: number;\n}\n\nconst SPARSE_DEFAULTS: Required<SparseOptions> = {\n\tratio: 1 / 3,\n};\n\n/**\n * Scans all {@link Accessor Accessors} in the Document, detecting whether each Accessor\n * would benefit from sparse data storage. Currently, sparse data storage is used only\n * when many values (>= ratio) are zeroes. Particularly for assets using morph target\n * (\"shape key\") animation, sparse data storage may significantly reduce file sizes.\n *\n * Example:\n *\n * ```ts\n * import { sparse } from '@gltf-transform/functions';\n *\n * accessor.getArray(); // → [ 0, 0, 0, 0, 0, 25.0, 0, 0, ... ]\n * accessor.getSparse(); // → false\n *\n * await document.transform(sparse({ratio: 1 / 10}));\n *\n * accessor.getSparse(); // → true\n * ```\n *\n * @experimental\n * @category Transforms\n */\nexport function sparse(_options: SparseOptions = SPARSE_DEFAULTS): Transform {\n\tconst options = { ...SPARSE_DEFAULTS, ..._options } as Required<SparseOptions>;\n\n\tconst ratio = options.ratio;\n\tif (ratio < 0 || ratio > 1) {\n\t\tthrow new Error(`${NAME}: Ratio must be between 0 and 1.`);\n\t}\n\n\treturn createTransform(NAME, (document: Document): void => {\n\t\tconst root = document.getRoot();\n\t\tconst logger = document.getLogger();\n\n\t\tlet modifiedCount = 0;\n\n\t\tfor (const accessor of root.listAccessors()) {\n\t\t\tconst count = accessor.getCount();\n\t\t\tconst base = Array(accessor.getElementSize()).fill(0);\n\t\t\tconst el = Array(accessor.getElementSize()).fill(0);\n\n\t\t\tlet nonZeroCount = 0;\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\taccessor.getElement(i, el);\n\t\t\t\tif (!MathUtils.eq(el, base, 0)) nonZeroCount++;\n\t\t\t\tif (nonZeroCount / count >= ratio) break;\n\t\t\t}\n\n\t\t\tconst sparse = nonZeroCount / count < ratio;\n\t\t\tif (sparse !== accessor.getSparse()) {\n\t\t\t\taccessor.setSparse(sparse);\n\t\t\t\tmodifiedCount++;\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Updated ${modifiedCount} accessors.`);\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { BufferUtils, Document, ImageUtils, Texture, TextureChannel, Transform, vec2 } from '@gltf-transform/core';\nimport { EXTTextureAVIF, EXTTextureWebP } from '@gltf-transform/extensions';\nimport { getTextureChannelMask } from './list-texture-channels.js';\nimport { listTextureSlots } from './list-texture-slots.js';\nimport type sharp from 'sharp';\nimport { createTransform, fitWithin, formatBytes } from './utils.js';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport ndarray from 'ndarray';\nimport { lanczos2, lanczos3 } from 'ndarray-lanczos';\n\nconst NAME = 'textureCompress';\n\ntype Format = (typeof TEXTURE_COMPRESS_SUPPORTED_FORMATS)[number];\nexport const TEXTURE_COMPRESS_SUPPORTED_FORMATS = ['jpeg', 'png', 'webp', 'avif'] as const;\nconst SUPPORTED_MIME_TYPES = ['image/jpeg', 'image/png', 'image/webp', 'image/avif'];\n\n/** Resampling filter methods. LANCZOS3 is sharper, LANCZOS2 is smoother. */\nexport enum TextureResizeFilter {\n\t/** Lanczos3 (sharp) */\n\tLANCZOS3 = 'lanczos3',\n\t/** Lanczos2 (smooth) */\n\tLANCZOS2 = 'lanczos2',\n}\n\nexport interface TextureCompressOptions {\n\t/** Instance of the Sharp encoder, which must be installed from the\n\t * 'sharp' package and provided by the caller. When not provided, a\n\t * platform-specific fallback implementation will be used, and most\n\t * quality- and compression-related options are ignored.\n\t */\n\tencoder?: unknown;\n\t/**\n\t * Target image format. If specified, included textures in other formats\n\t * will be converted. Default: original format.\n\t */\n\ttargetFormat?: Format;\n\t/**\n\t * Resizes textures to given maximum width/height, preserving aspect ratio.\n\t * For example, a 4096x8192 texture, resized with limit [2048, 2048] will\n\t * be reduced to 1024x2048.\n\t */\n\tresize?: vec2;\n\t/** Interpolation used if resizing. Default: TextureResizeFilter.LANCZOS3. */\n\tresizeFilter?: TextureResizeFilter;\n\t/** Pattern identifying textures to compress, matched to name or URI. */\n\tpattern?: RegExp | null;\n\t/**\n\t * Pattern matching the format(s) to be compressed or converted. Some examples\n\t * of formats include \"jpeg\" and \"png\".\n\t */\n\tformats?: RegExp | null;\n\t/**\n\t * Pattern matching the material texture slot(s) to be compressed or converted.\n\t * Some examples of slot names include \"baseColorTexture\", \"occlusionTexture\",\n\t * \"metallicRoughnessTexture\", and \"normalTexture\".\n\t */\n\tslots?: RegExp | null;\n\n\t/** Quality, 1-100. Default: auto. */\n\tquality?: number | null;\n\t/**\n\t * Level of CPU effort to reduce file size, 0-100. PNG, WebP, and AVIF\n\t * only. Supported only when a Sharp encoder is provided. Default: auto.\n\t */\n\teffort?: number | null;\n\t/**\n\t * Use lossless compression mode. WebP and AVIF only. Supported only when a\n\t * Sharp encoder is provided. Default: false.\n\t */\n\tlossless?: boolean;\n\t/**\n\t * Use near lossless compression mode. WebP only. Supported only when a\n\t * Sharp encoder is provided. Default: false.\n\t */\n\tnearLossless?: boolean;\n}\n\nexport type CompressTextureOptions = Omit<TextureCompressOptions, 'pattern' | 'formats' | 'slots'>;\n\n// IMPORTANT: No defaults for quality flags, see https://github.com/donmccurdy/glTF-Transform/issues/969.\nexport const TEXTURE_COMPRESS_DEFAULTS: Omit<TextureCompressOptions, 'resize' | 'targetFormat' | 'encoder'> = {\n\tresizeFilter: TextureResizeFilter.LANCZOS3,\n\tpattern: undefined,\n\tformats: undefined,\n\tslots: undefined,\n\tquality: undefined,\n\teffort: undefined,\n\tlossless: false,\n\tnearLossless: false,\n};\n\n/**\n * Optimizes images, optionally resizing or converting to JPEG, PNG, WebP, or AVIF formats.\n *\n * For best results use a Node.js environment, install the `sharp` module, and\n * provide an encoder. When the encoder is omitted — `sharp` works only in Node.js —\n * the implementation will use a platform-specific fallback encoder, and most\n * quality- and compression-related options are ignored.\n *\n * Example:\n *\n * ```javascript\n * import { textureCompress } from '@gltf-transform/functions';\n * import sharp from 'sharp';\n *\n * // (A) Optimize without conversion.\n * await document.transform(\n * \ttextureCompress({encoder: sharp})\n * );\n *\n * // (B) Optimize and convert images to WebP.\n * await document.transform(\n * \ttextureCompress({\n * \t\tencoder: sharp,\n * \t\ttargetFormat: 'webp',\n * \t\tslots: /^(?!normalTexture).*$/ // exclude normal maps\n * \t})\n * );\n *\n * // (C) Resize and convert images to WebP in a browser, without a Sharp\n * // encoder. Most quality- and compression-related options are ignored.\n * await document.transform(\n * \ttextureCompress({ targetFormat: 'webp', resize: [1024, 1024] })\n * );\n * ```\n *\n * @category Transforms\n */\nexport function textureCompress(_options: TextureCompressOptions): Transform {\n\tconst options = { ...TEXTURE_COMPRESS_DEFAULTS, ..._options } as Required<TextureCompressOptions>;\n\tconst targetFormat = options.targetFormat as Format | undefined;\n\tconst patternRe = options.pattern;\n\tconst formatsRe = options.formats;\n\tconst slotsRe = options.slots;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tconst textures = document.getRoot().listTextures();\n\n\t\tawait Promise.all(\n\t\t\ttextures.map(async (texture, textureIndex) => {\n\t\t\t\tconst slots = listTextureSlots(texture);\n\t\t\t\tconst channels = getTextureChannelMask(texture);\n\t\t\t\tconst textureLabel =\n\t\t\t\t\ttexture.getURI() ||\n\t\t\t\t\ttexture.getName() ||\n\t\t\t\t\t`${textureIndex + 1}/${document.getRoot().listTextures().length}`;\n\t\t\t\tconst prefix = `${NAME}(${textureLabel})`;\n\n\t\t\t\t// FILTER: Exclude textures that don't match (a) 'slots' or (b) expected formats.\n\n\t\t\t\tif (!SUPPORTED_MIME_TYPES.includes(texture.getMimeType())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, unsupported texture type \"${texture.getMimeType()}\".`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (patternRe && !patternRe.test(texture.getName()) && !patternRe.test(texture.getURI())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, excluded by \"pattern\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (formatsRe && !formatsRe.test(texture.getMimeType())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, \"${texture.getMimeType()}\" excluded by \"formats\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (slotsRe && slots.length && !slots.some((slot) => slotsRe.test(slot))) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, [${slots.join(', ')}] excluded by \"slots\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (options.targetFormat === 'jpeg' && channels & TextureChannel.A) {\n\t\t\t\t\tlogger.warn(`${prefix}: Skipping, [${slots.join(', ')}] requires alpha channel.`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst srcFormat = getFormat(texture);\n\t\t\t\tconst dstFormat = targetFormat || srcFormat;\n\t\t\t\tlogger.debug(`${prefix}: Format = ${srcFormat} → ${dstFormat}`);\n\t\t\t\tlogger.debug(`${prefix}: Slots = [${slots.join(', ')}]`);\n\n\t\t\t\tconst srcImage = texture.getImage()!;\n\t\t\t\tconst srcByteLength = srcImage.byteLength;\n\n\t\t\t\tawait compressTexture(texture, options);\n\n\t\t\t\tconst dstImage = texture.getImage()!;\n\t\t\t\tconst dstByteLength = dstImage.byteLength;\n\n\t\t\t\tconst flag = srcImage === dstImage ? ' (SKIPPED' : '';\n\n\t\t\t\tlogger.debug(`${prefix}: Size = ${formatBytes(srcByteLength)} → ${formatBytes(dstByteLength)}${flag}`);\n\t\t\t}),\n\t\t);\n\n\t\t// Attach EXT_texture_webp if needed.\n\t\tconst webpExtension = document.createExtension(EXTTextureWebP);\n\t\tif (textures.some((texture) => texture.getMimeType() === 'image/webp')) {\n\t\t\twebpExtension.setRequired(true);\n\t\t} else {\n\t\t\twebpExtension.dispose();\n\t\t}\n\n\t\t// Attach EXT_texture_avif if needed.\n\t\tconst avifExtension = document.createExtension(EXTTextureAVIF);\n\t\tif (textures.some((texture) => texture.getMimeType() === 'image/avif')) {\n\t\t\tavifExtension.setRequired(true);\n\t\t} else {\n\t\t\tavifExtension.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**\n * Optimizes a single {@link Texture}, optionally resizing or converting to JPEG, PNG, WebP, or AVIF formats.\n *\n * For best results use a Node.js environment, install the `sharp` module, and\n * provide an encoder. When the encoder is omitted — `sharp` works only in Node.js —\n * the implementation will use a platform-specific fallback encoder, and most\n * quality- and compression-related options are ignored.\n *\n * Example:\n *\n * ```javascript\n * import { compressTexture } from '@gltf-transform/functions';\n * import sharp from 'sharp';\n *\n * const texture = document.getRoot().listTextures()\n * \t.find((texture) => texture.getName() === 'MyTexture');\n *\n * // (A) Node.js.\n * await compressTexture(texture, {\n * \tencoder: sharp,\n * \ttargetFormat: 'webp',\n * \tresize: [1024, 1024]\n * });\n *\n * // (B) Web.\n * await compressTexture(texture, {\n * \ttargetFormat: 'webp',\n * \tresize: [1024, 1024]\n * });\n * ```\n */\nexport async function compressTexture(texture: Texture, _options: CompressTextureOptions) {\n\tconst options = { ...TEXTURE_COMPRESS_DEFAULTS, ..._options } as Required<CompressTextureOptions>;\n\tconst encoder = options.encoder as typeof sharp | null;\n\n\tconst srcFormat = getFormat(texture);\n\tconst dstFormat = options.targetFormat || srcFormat;\n\tconst srcMimeType = texture.getMimeType();\n\tconst dstMimeType = `image/${dstFormat}`;\n\n\tconst srcImage = texture.getImage()!;\n\tconst dstImage = encoder\n\t\t? await _encodeWithSharp(srcImage, srcMimeType, dstMimeType, options)\n\t\t: await _encodeWithNdarrayPixels(srcImage, srcMimeType, dstMimeType, options);\n\n\tconst srcByteLength = srcImage.byteLength;\n\tconst dstByteLength = dstImage.byteLength;\n\n\tif (srcMimeType === dstMimeType && dstByteLength >= srcByteLength && !options.resize) {\n\t\t// Skip if src/dst formats match and dst is larger than the original.\n\t\treturn;\n\t} else if (srcMimeType === dstMimeType) {\n\t\t// Overwrite if src/dst formats match and dst is smaller than the original.\n\t\ttexture.setImage(dstImage);\n\t} else {\n\t\t// Overwrite, then update path and MIME type if src/dst formats differ.\n\t\tconst srcExtension = ImageUtils.mimeTypeToExtension(srcMimeType);\n\t\tconst dstExtension = ImageUtils.mimeTypeToExtension(dstMimeType);\n\t\tconst dstURI = texture.getURI().replace(new RegExp(`\\\\.${srcExtension}$`), `.${dstExtension}`);\n\t\ttexture.setImage(dstImage).setMimeType(dstMimeType).setURI(dstURI);\n\t}\n}\n\nasync function _encodeWithSharp(\n\tsrcImage: Uint8Array,\n\t_srcMimeType: string,\n\tdstMimeType: string,\n\toptions: Required<CompressTextureOptions>,\n): Promise<Uint8Array> {\n\tconst encoder = options.encoder as typeof sharp;\n\tlet encoderOptions: sharp.JpegOptions | sharp.PngOptions | sharp.WebpOptions | sharp.AvifOptions = {};\n\n\tconst dstFormat = getFormatFromMimeType(dstMimeType);\n\n\tswitch (dstFormat) {\n\t\tcase 'jpeg':\n\t\t\tencoderOptions = { quality: options.quality } as sharp.JpegOptions;\n\t\t\tbreak;\n\t\tcase 'png':\n\t\t\tencoderOptions = {\n\t\t\t\tquality: options.quality,\n\t\t\t\teffort: remap(options.effort, 100, 10),\n\t\t\t} as sharp.PngOptions;\n\t\t\tbreak;\n\t\tcase 'webp':\n\t\t\tencoderOptions = {\n\t\t\t\tquality: options.quality,\n\t\t\t\teffort: remap(options.effort, 100, 6),\n\t\t\t\tlossless: options.lossless,\n\t\t\t\tnearLossless: options.nearLossless,\n\t\t\t} as sharp.WebpOptions;\n\t\t\tbreak;\n\t\tcase 'avif':\n\t\t\tencoderOptions = {\n\t\t\t\tquality: options.quality,\n\t\t\t\teffort: remap(options.effort, 100, 9),\n\t\t\t\tlossless: options.lossless,\n\t\t\t} as sharp.AvifOptions;\n\t\t\tbreak;\n\t}\n\n\tconst instance = encoder(srcImage).toFormat(dstFormat, encoderOptions);\n\n\tif (options.resize) {\n\t\tinstance.resize(options.resize[0], options.resize[1], {\n\t\t\tfit: 'inside',\n\t\t\tkernel: options.resizeFilter,\n\t\t\twithoutEnlargement: true,\n\t\t});\n\t}\n\n\treturn BufferUtils.toView(await instance.toBuffer());\n}\n\nasync function _encodeWithNdarrayPixels(\n\tsrcImage: Uint8Array,\n\tsrcMimeType: string,\n\tdstMimeType: string,\n\toptions: Required<CompressTextureOptions>,\n): Promise<Uint8Array> {\n\tconst srcPixels = (await getPixels(srcImage, srcMimeType)) as ndarray.NdArray<Uint8Array>;\n\n\tif (options.resize) {\n\t\tconst [w, h] = srcPixels.shape;\n\t\tconst dstSize = fitWithin([w, h], options.resize);\n\t\tconst dstPixels = ndarray(new Uint8Array(dstSize[0] * dstSize[1] * 4), [...dstSize, 4]);\n\t\toptions.resizeFilter === TextureResizeFilter.LANCZOS3\n\t\t\t? lanczos3(srcPixels, dstPixels)\n\t\t\t: lanczos2(srcPixels, dstPixels);\n\t\treturn savePixels(dstPixels, dstMimeType);\n\t}\n\n\treturn savePixels(srcPixels, dstMimeType);\n}\n\nfunction getFormat(texture: Texture): Format {\n\treturn getFormatFromMimeType(texture.getMimeType());\n}\n\nfunction getFormatFromMimeType(mimeType: string): Format {\n\tconst format = mimeType.split('/').pop() as Format | undefined;\n\tif (!format || !TEXTURE_COMPRESS_SUPPORTED_FORMATS.includes(format)) {\n\t\tthrow new Error(`Unknown MIME type \"${mimeType}\".`);\n\t}\n\treturn format;\n}\n\nfunction remap(value: number | null | undefined, srcMax: number, dstMax: number): number | undefined {\n\tif (value == null) return undefined;\n\treturn Math.round((value / srcMax) * dstMax);\n}\n","import { Accessor, Document, ILogger, Primitive, Transform, TypedArray, uuid } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'tangents';\n\n/** Options for the {@link tangents} function. */\nexport interface TangentsOptions {\n\t/**\n\t * Callback function to generate tangents from position, uv, and normal attributes.\n\t * Generally, users will want to provide the `generateTangents` from the\n\t * [mikktspace](https://github.com/donmccurdy/mikktspace-wasm) library, which is not\n\t * included by default.\n\t */\n\tgenerateTangents?: (pos: Float32Array, norm: Float32Array, uv: Float32Array) => Float32Array;\n\t/** Whether to overwrite existing `TANGENT` attributes. */\n\toverwrite?: boolean;\n}\n\nconst TANGENTS_DEFAULTS: Required<Omit<TangentsOptions, 'generateTangents'>> = {\n\toverwrite: false,\n};\n\n/**\n * Generates MikkTSpace vertex tangents for mesh primitives, which may fix rendering issues\n * occuring with some baked normal maps. Requires access to the [mikktspace](https://github.com/donmccurdy/mikktspace-wasm)\n * WASM package, or equivalent.\n *\n * Example:\n *\n * ```ts\n * import { generateTangents } from 'mikktspace';\n * import { tangents } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \ttangents({generateTangents})\n * );\n * ```\n *\n * @category Transforms\n */\nexport function tangents(_options: TangentsOptions = TANGENTS_DEFAULTS): Transform {\n\tif (!_options.generateTangents) {\n\t\tthrow new Error(`${NAME}: generateTangents callback required — install \"mikktspace\".`);\n\t}\n\n\tconst options = { ...TANGENTS_DEFAULTS, ..._options } as Required<TangentsOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst attributeIDs = new Map<TypedArray, string>();\n\t\tconst tangentCache = new Map<string, Accessor>();\n\t\tlet modified = 0;\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tconst meshName = mesh.getName();\n\t\t\tconst meshPrimitives = mesh.listPrimitives();\n\n\t\t\tfor (let i = 0; i < meshPrimitives.length; i++) {\n\t\t\t\tconst prim = meshPrimitives[i];\n\n\t\t\t\t// Skip primitives for which we can't compute tangents.\n\t\t\t\tif (!filterPrimitive(prim, logger, meshName, i, options.overwrite)) continue;\n\n\t\t\t\tconst texcoordSemantic = getNormalTexcoord(prim);\n\n\t\t\t\t// Nullability conditions checked by filterPrimitive() above.\n\t\t\t\tconst position = prim.getAttribute('POSITION')!.getArray()!;\n\t\t\t\tconst normal = prim.getAttribute('NORMAL')!.getArray()!;\n\t\t\t\tconst texcoord = prim.getAttribute(texcoordSemantic)!.getArray()!;\n\n\t\t\t\t// Compute UUIDs for each attribute.\n\t\t\t\tconst positionID = attributeIDs.get(position) || uuid();\n\t\t\t\tattributeIDs.set(position, positionID);\n\n\t\t\t\tconst normalID = attributeIDs.get(normal) || uuid();\n\t\t\t\tattributeIDs.set(normal, normalID);\n\n\t\t\t\tconst texcoordID = attributeIDs.get(texcoord) || uuid();\n\t\t\t\tattributeIDs.set(texcoord, texcoordID);\n\n\t\t\t\t// Dispose of previous TANGENT accessor if only used by this primitive (and Root).\n\t\t\t\tconst prevTangent = prim.getAttribute('TANGENT');\n\t\t\t\tif (prevTangent && prevTangent.listParents().length === 2) prevTangent.dispose();\n\n\t\t\t\t// If we've already computed tangents for this pos/norm/uv set, reuse them.\n\t\t\t\tconst attributeHash = `${positionID}|${normalID}|${texcoordID}`;\n\t\t\t\tlet tangent = tangentCache.get(attributeHash);\n\t\t\t\tif (tangent) {\n\t\t\t\t\tlogger.debug(`${NAME}: Found cache for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\t\t\t\t\tmodified++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise, generate tangents with the 'mikktspace' WASM library.\n\t\t\t\tlogger.debug(`${NAME}: Generating for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\tconst tangentBuffer = prim.getAttribute('POSITION')!.getBuffer();\n\t\t\t\tconst tangentArray = options.generateTangents(\n\t\t\t\t\tposition instanceof Float32Array ? position : new Float32Array(position),\n\t\t\t\t\tnormal instanceof Float32Array ? normal : new Float32Array(normal),\n\t\t\t\t\ttexcoord instanceof Float32Array ? texcoord : new Float32Array(texcoord)\n\t\t\t\t);\n\n\t\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/issues/174\n\t\t\t\tfor (let i = 3; i < tangentArray.length; i += 4) tangentArray[i] *= -1;\n\n\t\t\t\ttangent = doc.createAccessor().setBuffer(tangentBuffer).setArray(tangentArray).setType('VEC4');\n\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\n\t\t\t\ttangentCache.set(attributeHash, tangent);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\nfunction getNormalTexcoord(prim: Primitive): string {\n\tconst material = prim.getMaterial();\n\tif (!material) return 'TEXCOORD_0';\n\n\tconst normalTextureInfo = material.getNormalTextureInfo();\n\tif (!normalTextureInfo) return 'TEXCOORD_0';\n\n\tconst texcoord = normalTextureInfo.getTexCoord();\n\tconst semantic = `TEXCOORD_${texcoord}`;\n\tif (prim.getAttribute(semantic)) return semantic;\n\n\treturn 'TEXCOORD_0';\n}\n\nfunction filterPrimitive(prim: Primitive, logger: ILogger, meshName: string, i: number, overwrite: boolean): boolean {\n\tif (\n\t\tprim.getMode() !== Primitive.Mode.TRIANGLES ||\n\t\t!prim.getAttribute('POSITION') ||\n\t\t!prim.getAttribute('NORMAL') ||\n\t\t!prim.getAttribute('TEXCOORD_0')\n\t) {\n\t\tlogger.debug(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must` +\n\t\t\t\t' have attributes=[POSITION, NORMAL, TEXCOORD_0] and mode=TRIANGLES.'\n\t\t);\n\t\treturn false;\n\t}\n\n\tif (prim.getAttribute('TANGENT') && !overwrite) {\n\t\tlogger.debug(`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": TANGENT found.`);\n\t\treturn false;\n\t}\n\n\tif (prim.getIndices()) {\n\t\t// TODO(feat): Do this automatically for qualifying primitives.\n\t\tlogger.warn(`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must` + ' be unwelded.');\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { KHRMaterialsUnlit } from '@gltf-transform/extensions';\n\n/**\n * @category Transforms\n */\nexport function unlit(): Transform {\n\treturn (doc: Document): void => {\n\t\tconst unlitExtension = doc.createExtension(KHRMaterialsUnlit) as KHRMaterialsUnlit;\n\t\tconst unlit = unlitExtension.createUnlit();\n\t\tdoc.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tmaterial.setExtension('KHR_materials_unlit', unlit);\n\t\t\t});\n\t};\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'unpartition';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UnpartitionOptions {}\nconst UNPARTITION_DEFAULTS: Required<UnpartitionOptions> = {};\n\n/**\n * Removes partitions from the binary payload of a glTF file, so that the asset\n * contains at most one (1) `.bin` {@link Buffer}. This process reverses the\n * changes from a {@link partition} transform.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n *\n * await document.transform(unpartition());\n *\n * document.getRoot().listBuffers(); // → [Buffer]\n * ```\n *\n * @category Transforms\n */\nexport function unpartition(_options: UnpartitionOptions = UNPARTITION_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...UNPARTITION_DEFAULTS, ..._options } as Required<UnpartitionOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\n\t\tconst buffer = document.getRoot().listBuffers()[0];\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listAccessors()\n\t\t\t.forEach((a) => a.setBuffer(buffer));\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.forEach((b, index) => (index > 0 ? b.dispose() : null));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import type { Accessor, Document, Primitive, Transform, vec3 } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'vertexColorSpace';\n\n/** Options for the {@link vertexColorSpace} function. */\nexport interface ColorSpaceOptions {\n\t/** Input color space of vertex colors, to be converted to \"srgb-linear\". Required. */\n\tinputColorSpace: 'srgb' | 'srgb-linear';\n}\n\n/**\n * Vertex color color space correction. The glTF format requires vertex colors to be stored\n * in Linear Rec. 709 D65 color space, and this function provides a way to correct vertex\n * colors that are (incorrectly) stored in sRGB.\n *\n * Example:\n *\n * ```typescript\n * import { vertexColorSpace } from '@gltf-transform/functions';\n *\n * await document.transform(\n *   vertexColorSpace({ inputColorSpace: 'srgb' })\n * );\n * ```\n *\n * @category Transforms\n */\nexport function vertexColorSpace(options: ColorSpaceOptions): Transform {\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\n\t\tconst inputColorSpace = (options.inputColorSpace || '').toLowerCase();\n\n\t\tif (inputColorSpace === 'srgb-linear') {\n\t\t\tlogger.info(`${NAME}: Vertex colors already linear. Skipping conversion.`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (inputColorSpace !== 'srgb') {\n\t\t\tlogger.error(\n\t\t\t\t`${NAME}: Unknown input color space \"${inputColorSpace}\" – should be \"srgb\" or ` +\n\t\t\t\t\t'\"srgb-linear\". Skipping conversion.',\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst converted = new Set<Accessor>();\n\n\t\t// Source: THREE.Color\n\t\tfunction sRGBToLinear(c: number): number {\n\t\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t\t}\n\n\t\tfunction updatePrimitive(primitive: Primitive): void {\n\t\t\tconst color = [0, 0, 0] as vec3;\n\t\t\tlet attribute: Accessor | null;\n\t\t\tfor (let i = 0; (attribute = primitive.getAttribute(`COLOR_${i}`)); i++) {\n\t\t\t\tif (converted.has(attribute)) continue;\n\n\t\t\t\tfor (let j = 0; j < attribute.getCount(); j++) {\n\t\t\t\t\tattribute.getElement(j, color);\n\t\t\t\t\tcolor[0] = sRGBToLinear(color[0]);\n\t\t\t\t\tcolor[1] = sRGBToLinear(color[1]);\n\t\t\t\t\tcolor[2] = sRGBToLinear(color[2]);\n\t\t\t\t\tattribute.setElement(j, color);\n\t\t\t\t}\n\n\t\t\t\tconverted.add(attribute);\n\t\t\t}\n\t\t}\n\n\t\tdoc.getRoot()\n\t\t\t.listMeshes()\n\t\t\t.forEach((mesh) => mesh.listPrimitives().forEach(updatePrimitive));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n"],"names":["rewriteTexture","source","target","fn","Promise","resolve","srcImage","getImage","getPixels","getMimeType","then","pixels","i","shape","j","savePixels","dstImage","setImage","setMimeType","e","reject","createTransform","name","Object","defineProperty","value","isTransformPending","context","initial","pending","initialIndex","stack","lastIndexOf","pendingIndex","getGLPrimitiveCount","prim","indices","getIndices","position","getAttribute","getMode","Primitive","Mode","POINTS","getCount","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Error","SetMap","constructor","_map","Map","size","has","k","add","v","entry","get","Set","set","keys","formatBytes","bytes","decimals","dm","sizes","Math","floor","log","parseFloat","pow","toFixed","formatLong","x","toString","replace","formatDelta","a","b","prefix","suffix","abs","formatDeltaOp","deepListAttributes","accessors","attribute","listAttributes","push","listTargets","Array","from","deepSwapAttribute","src","dst","swap","shallowEqualsArray","length","remapAttribute","remap","dstCount","elementSize","getElementSize","srcCount","srcArray","getArray","dstArray","slice","setArray","createIndices","count","maxIndex","array","Uint16Array","Uint32Array","isUsed","prop","listParents","some","parent","propertyType","PropertyType","ROOT","createPrimGroupKey","document","Document","fromGraph","getGraph","material","getMaterial","materialIndex","getRoot","listMaterials","indexOf","mode","attributes","listSemantics","sort","map","semantic","componentType","getComponentType","join","targets","fitWithin","limit","maxWidth","maxHeight","srcWidth","srcHeight","dstWidth","dstHeight","NAME","CENTER_DEFAULTS","pivot","center","_options","options","doc","logger","getLogger","root","isAnimated","listAnimations","listSkins","listScenes","forEach","scene","index","debug","bbox","getBounds","max","min","offset","offsetNode","createNode","setTranslation","listChildren","child","addChild","t","getTranslation","listNodeScenes","node","visited","getParentNode","filter","Scene","clearNodeParent","scenes","setMatrix","getWorldMatrix","removeChild","invert","multiply","create","glMatrix.ARRAY_TYPE","scale","mul","cleanPrimitive","tmpIndicesArray","Infinity","il","getScalar","c","dstIndicesArray","DEDUP_DEFAULTS","keepUniqueNames","propertyTypes","ACCESSOR","MESH","TEXTURE","MATERIAL","SKIN","dedup","includes","dedupAccessors","dedupImages","dedupMaterials","dedupMeshes","dedupSkins","indicesMap","attributeMap","inputMap","outputMap","meshes","listMeshes","mesh","listPrimitives","primitive","accessor","hashAccessor","animation","sampler","listSamplers","getInput","getOutput","group","hash","getType","getNormalized","getSparse","hashSet","detectDuplicates","duplicates","aData","BufferUtils","toView","equals","total","hashGroup","values","input","output","dispose","refs","listAccessors","numMeshes","uniqueMeshes","srcKeyItems","createPrimitiveKey","meshKey","getName","targetMesh","textures","listTextures","bData","aSize","getSize","bSize","entries","_ref","property","Root","materials","modifierCache","skip","hasModifier","_ref2","skins","listJoints","_ref3","primKeyItems","cache","graph","visitedNodes","edgeQueue","listParentEdges","edge","pop","getAttributes","modifyChild","getChild","childEdge","listChildEdges","SRGB_PATTERN","getTextureColorSpace","texture","edges","isSRGB","isColor","test","listTextureInfo","results","textureEdge","getParent","TextureInfo","listTextureInfoByMaterial","traverse","textureInfoNames","Texture","ExtensionProperty","listTextureSlots","slots","maybeGetPixels","_catch","getTextureFactor","width","height","len","sub","EPS","pruneSolidTextures","counter","factor","_texture$getSize","ColorUtils","convertSRGBToLinear","getURI","applyMaterialFactor","all","PRUNE_DEFAULTS","NODE","CAMERA","PRIMITIVE","PRIMITIVE_TARGET","ANIMATION","BUFFER","keepLeaves","keepAttributes","keepIndices","keepSolidTextures","prune","_temp3","treeShake","listBuffers","buffer","empty","str","type","info","DisposeCounter","nodeTreeShake","listNodes","skin","camera","listCameras","indirectTreeShake","materialPrims","required","listRequiredSemantics","unused","listUnusedSemantics","pruneAttributes","prims","shiftTexCoords","pruneIndices","anim","channel","listChannels","getTargetNode","samplers","_temp2","_temp","disposed","key","parents","p","AnimationChannel","listEdges","ptype","SCENE","isEmpty","setAttribute","setIndices","startsWith","semantics","textureNames","getTexCoord","match","textureInfoList","texCoordSet","texCoordList","texCoordMap","texCoord","semanticMap","textureInfo","setTexCoord","updatePrim","srcSemantics","srcSemantic","uv","dstSemantic","slot","Material","setBaseColorFactor","getBaseColorFactor","setEmissiveFactor","mulVec3","getEmissiveFactor","setRoughnessFactor","getRoughnessFactor","setMetallicFactor","getMetallicFactor","warn","Tolerance","DEFAULT","TEXCOORD","COLOR","NORMAL","JOINTS","WEIGHTS","WELD_DEFAULTS","tolerance","toleranceNormal","overwrite","exhaustive","weld","expandWeldOptions","transform","weldPrimitive","isPrimEmpty","_indexPrimitive","_weldPrimitive","attr","numVertices","getBuffer","createAccessor","setBuffer","setType","Accessor","Type","SCALAR","srcPosition","srcIndices","uniqueIndices","attributeTolerance","getAttributeTolerance","formatKV","posA","posB","grid","cellSize","POSITION","getElement","getGridKey","srcMaxIndex","weldMap","writeMap","fill","srcVertexCount","dstVertexCount","cellKeys","getGridNeighborhoodKeys","cells","cellKey","neighbors","isBaseMatch","every","compareAttributes","isTargetMatch","dstIndicesCount","clone","srcAttr","swapAttributes","createArrayOfType","ArrayCtor","reorder","dstAttrArray","dstAttr","done","Uint8Array","el","setElement","_a","_b","getMinNormalized","getMaxNormalized","diff","bi","range","_semantic","kv","CELL_OFFSETS","_p","cellX","round","cellY","cellZ","PI","Number","EPSILON","transformPrimitive","matrix","skipIndices","_prim$getIndices","applyMatrix","normal","applyNormalMatrix","tangent","applyTangentMatrix","determinant","reversePrimitiveWindingOrder","Float32Array","vector","createVec3","transformMat4","setNormalized","normalMatrix","createMat3","fromMat4","transpose","transformMat3","normalizeVec3","v3","v4","createVec4","y","z","setScalar","transformMesh","srcPrim","isShared","dstPrim","srcTarget","dstTarget","flatMap","srcAttribute","PrimitiveTarget","dstAttribute","attributeSkipIndices","primSkipIndices","IDENTITY","clearNodeTransform","getMesh","localMatrix","getMatrix","MathUtils","eq","multiplyMat4","DEQUANTIZE_DEFAULTS","pattern","dequantize","dequantizePrimitive","createExtension","KHRMeshQuantization","dequantizeAttribute","getComponentSize","DRACO_DEFAULTS","method","encodeSpeed","decodeSpeed","quantizePosition","quantizeNormal","quantizeColor","quantizeTexcoord","quantizeGeneric","quantizationVolume","draco","KHRDracoMeshCompression","setRequired","setEncoderOptions","EncoderMethod","EDGEBREAKER","SEQUENTIAL","quantizationBits","TEX_COORD","GENERIC","FLATTEN_DEFAULTS","flatten","joints","joint","animated","getTargetPath","hasJointParent","hasAnimatedParent","inspect","animations","sceneBounds","rootName","bboxMin","toPrecision","bboxMax","properties","instances","glPrimitives","verts","meshIndices","meshAccessors","accessorToTypeLabel","targ","byteLength","modes","MeshPrimitiveModeLabels","primitives","vertices","extensions","listExtensions","ref","alphaMode","getAlphaMode","doubleSided","getDoubleSided","resolution","ImageUtils","compression","container","readKTX","dfd","dataFormatDescriptor","colorModel","KHR_DF_MODEL_ETC1S","KHR_DF_MODEL_UASTC","uri","mimeType","gpuSize","getVRAMByteLength","minTime","maxTime","getMin","getMax","keyframes","channels","duration","NumericTypeLabels","Int32Array","Int16Array","Int8Array","base","INSTANCE_DEFAULTS","instance","batchExtension","EXTMeshGPUInstancing","numBatches","numInstances","meshInstances","modifiedNodes","nodes","getSkin","hasVolume","hasScale","batch","createBatch","batchTranslation","batchRotation","batchScale","batchNode","setMesh","setExtension","needsTranslation","needsRotation","needsScale","r","s","getWorldTranslation","getWorldRotation","getWorldScale","pruneUnusedNodes","listProperties","unusedNodes","getCamera","nodeParent","getExtension","createInstancedMesh","JOIN_PRIMITIVE_DEFAULTS","skipValidation","joinPrimitives","templatePrim","remapList","indicesList","_getOrCreateIndices","undefined","createPrimitive","setMode","setMaterial","tplAttribute","AttributeArray","ComponentTypeToTypedArray","dstIndices","dstNextIndex","primIndex","indicesArray","primStartIndex","primNextIndex","_matrix","JOIN_DEFAULTS","keepMeshes","keepNamed","_joinLevel","groups","children","nodeIndex","dequantizeTransformableAttributes","isNamed","primMeshes","primNodes","dstNode","dstMesh","joinGroups","srcNodes","isSharedMesh","dstMatrix","primNode","primMesh","removePrimitive","hasSharedAttributes","_deepClonePrimitive","addPrimitive","listTextureChannels","mask","getTextureChannelMask","TextureChannel","R","G","B","A","AlphaMode","OPAQUE","REORDER_DEFAULTS","encoder","ready","plan","createLayoutPlan","indicesToAttributes","unique","reorderMesh","indicesToMode","attributesToPrimitives","sortPrimitiveWeights","isFinite","vertexCount","setCount","srcWeights","dstWeights","srcJoints","dstJoints","getVertexArray","setVertexArray","weights","normalizePrimitiveWeights","isNormalizeSafe","templateAttribute","templateArray","normalized","normalizedComponentType","delta","decodeNormalizedInt","weightsSum","sum","intValue","encodeNormalizedInt","vertexIndex","normList","typeList","SIGNED_INT","TRANSLATION","ROTATION","SCALE","TargetPath","TRS_CHANNELS","QUANTIZE_DEFAULTS","quantizeWeight","normalizeWeights","quantize","patternTargets","nodeTransform","getNodeTransform","expandBounds","getPositionQuantizationVolume","transformMeshParents","transformMeshMaterials","quantizePrimitive","isTarget","bits","ctor","getQuantizationSettings","fromTransform","fromScaling","quantizeAttribute","volume","transformMatrix","Node","animChannels","isParentNode","setSkin","transformSkin","transformBatch","targetNode","setTargetNode","nodeMatrix","inverseBindMatrices","getInverseBindMatrices","ibm","setInverseBindMatrices","_batch$getAttribute","_batch$getAttribute2","_batch$getAttribute3","instanceTranslation","instanceRotation","instanceScale","tpl","T_IDENTITY","R_IDENTITY","S_IDENTITY","instanceMatrix","compose","decompose","getThicknessFactor","setThicknessFactor","signBits","quantBits","storageBits","BYTES_PER_ELEMENT","lo","hi","di","clamp","sign","setSparse","positions","relativePositions","flatBounds","relMin","relMax","tmpMin","tmpMax","bboxes","result","fromRotationTranslationScale","MESHOPT_DEFAULTS","level","meshopt","EXTMeshoptCompression","QUANTIZE","FILTER","_settle","pact","state","_Pact","bind","observer","o","prototype","onFulfilled","onRejected","_this","_isSettledPact","thenable","metalRough","_temp4","specGlossExtension","tex","inputTextures","extensionsUsed","listExtensionsUsed","ext","extensionName","iorExtension","KHRMaterialsIOR","specExtension","KHRMaterialsSpecular","KHRMaterialsPBRSpecularGlossiness","_forOf","specGloss","specular","createSpecular","setSpecularFactor","setSpecularColorFactor","getSpecularFactor","getSpecularGlossinessTexture","getBaseColorTexture","getMetallicRoughnessTexture","getDiffuseFactor","createIOR","setIOR","diffuseTexture","getDiffuseTexture","setBaseColorTexture","getBaseColorTextureInfo","copy","getDiffuseTextureInfo","sgTexture","sgTextureInfo","getSpecularGlossinessTextureInfo","specularTexture","createTexture","setSpecularTexture","setSpecularColorTexture","getSpecularTextureInfo","getSpecularColorTextureInfo","glossinessFactor","getGlossinessFactor","metalRoughTexture","roughness","setMetallicRoughnessTexture","getMetallicRoughnessTextureInfo","unweld","unweldAttribute","NORMALS_DEFAULTS","normals","modified","faceNormal","computeNormal","n","normalize","PALETTE_DEFAULTS","blockSize","palette","_temp6","nextPaletteMaterialIndex","srcMaterial","materialKeyMap","blockIndex","materialIndices","baseUV","keyCount","padUV","w","padWidth","dstMaterial","paletteMaterials","skipProps","padStart","setName","baseColorTexture","setMinFilter","MinFilter","NEAREST","setMagFilter","MagFilter","emissiveTexture","setEmissiveTexture","getEmissiveTextureInfo","metallicRoughnessTexture","paletteTexturePixels","metallicRoughness","image","emissive","materialKeys","materialProps","baseColor","encodeRGBA","encodeFloat","metallic","ceilPowerOfTwo","h","call","arguments","setURI","ndarray","visitedKeys","nextIndex","convertLinearToSRGB","writeBlock","_temp5","hex","ceil","LN2","PARTITION_DEFAULTS","partition","partitionMeshes","partitionAnimations","existingURIs","meshIndex","isArray","createBuffer","createBufferURI","primTarget","animIndex","basename","existing","EMPTY_ARRAY","RESAMPLE_DEFAULTS","resample","resampleDebug","accessorsVisited","srcAccessorCount","samplerTargetPaths","getSampler","samplerInterpolation","getInterpolation","tmpTimes","toFloat32Array","tmpValues","srcTimes","srcValues","dstTimes","fromFloat32Array","byteOffset","dstValues","setInput","setOutput","used","dstAccessorCount","ComponentType","FLOAT","TypedArray","SEQUENCE_DEFAULTS","fps","sequence","sequenceNodes","createAnimation","animBuffer","inputArray","outputArray","VEC3","createAnimationSampler","setInterpolation","AnimationSampler","Interpolation","STEP","createAnimationChannel","setTargetPath","setSampler","addSampler","addChannel","SIMPLIFY_DEFAULTS","ratio","error","lockBorder","simplify","simplifier","simplifyPrimitive","positionArray","UNSIGNED_INT","targetCount","compactMesh","SPARSE_DEFAULTS","sparse","modifiedCount","nonZeroCount","_encodeWithNdarrayPixels","srcMimeType","dstMimeType","srcPixels","resize","dstSize","dstPixels","resizeFilter","TextureResizeFilter","LANCZOS3","lanczos3","lanczos2","_encodeWithSharp","_srcMimeType","encoderOptions","dstFormat","getFormatFromMimeType","quality","effort","lossless","nearLossless","toFormat","fit","kernel","withoutEnlargement","_toView","toBuffer","_instance$toBuffer","compressTexture","TEXTURE_COMPRESS_DEFAULTS","srcFormat","getFormat","targetFormat","srcByteLength","dstByteLength","srcExtension","mimeTypeToExtension","dstExtension","dstURI","RegExp","TEXTURE_COMPRESS_SUPPORTED_FORMATS","SUPPORTED_MIME_TYPES","formats","textureCompress","patternRe","formatsRe","slotsRe","textureIndex","textureLabel","flag","webpExtension","EXTTextureWebP","avifExtension","EXTTextureAVIF","format","split","srcMax","dstMax","TANGENTS_DEFAULTS","tangents","generateTangents","attributeIDs","tangentCache","meshName","meshPrimitives","filterPrimitive","texcoordSemantic","getNormalTexcoord","texcoord","positionID","uuid","normalID","texcoordID","prevTangent","attributeHash","tangentBuffer","tangentArray","normalTextureInfo","getNormalTextureInfo","unlit","unlitExtension","KHRMaterialsUnlit","createUnlit","unpartition","vertexColorSpace","inputColorSpace","toLowerCase","converted","sRGBToLinear","updatePrimitive","color"],"mappings":"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AC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AACtD,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AACtD,EAAE,GAAG,C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;AACrD,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACtD,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACtD,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACtD,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACtD,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACtD,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACtD,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AA0UD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,WAAW,CAAC,GAAG,EAAE,CAAC,EAAE;AACpC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACb,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACb,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACb,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACb,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACb,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACb,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACb,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACb,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AACd,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AACd,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AACd,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AACd,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AACd,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AAgVD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,4BAA4B,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;AAC3D;AACA,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACd,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACd,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACd,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;AACjB,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;AACjB,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;AACjB,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;AAClB,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;AAClB,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;AAClB,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;AAClB,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;AAClB,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;AAClB,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;AAClB,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;AAClB,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;AAClB,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;AAChC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;AAC1B,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;AAC1B,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACb,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;AAC1B,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;AAChC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;AAC1B,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACb,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;AAC1B,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;AAC1B,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;AACjC,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AACd,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AACd,EAAE,OAAO,GAAG,CAAC;AACb;;ACtrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,QAAM,GAAG;AACzB,EAAE,IAAI,GAAG,GAAG,IAAIC,UAAmB,CAAC,CAAC,CAAC,CAAC;AACvC;AACA,EAAE,IAAIA,UAAmB,IAAI,YAAY,EAAE;AAC3C,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,GAAG;AACH;AACA,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACb,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACb,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACb,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE;AACjC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACjB,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AAoHD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE;AAClC;AACA,EAAE,IAAI,GAAG,KAAK,CAAC,EAAE;AACjB,IAAI,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAClB,QAAQ,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAClB,QAAQ,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;AACjB,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;AACjB,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;AACjB,GAAG,MAAM;AACT,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,GAAG;AACH;AACA,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE;AAC/B,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,EAAE,IAAI,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AACnC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC;AACA,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC9C;AACA,EAAE,IAAI,CAAC,GAAG,EAAE;AACZ,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH;AACA,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;AACrB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AAC1C,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AACzC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;AACrB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AACzC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AAC1C,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;AACrB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AAC1C,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AACzC,EAAE,OAAO,GAAG,CAAC;AACb;;AC5OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASD,QAAM,GAAG;AACzB,EAAE,IAAI,GAAG,GAAG,IAAIC,UAAmB,CAAC,CAAC,CAAC,CAAC;AACvC;AACA,EAAE,IAAIA,UAAmB,IAAI,YAAY,EAAE;AAC3C,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,GAAG;AACH;AACA,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AAwGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASF,UAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;AACpC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AA4CD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;AAC/B,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;AAC/B,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AAeD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,OAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;AACjC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACpB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACpB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACpB,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AAsFD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE;AAClC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,EAAE,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAClC;AACA,EAAE,IAAI,GAAG,GAAG,CAAC,EAAE;AACf;AACA,IAAI,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC7B,GAAG;AACH;AACA,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;AACtB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;AACtB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;AACtB,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AAsHD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;AACzC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACd,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACd,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAClD,EAAE,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC;AACf,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;AACxD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;AACxD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;AACzD,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;AACzC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACd,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACd,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AAuMD;AACA;AACA;AACA;AACA;AACO,IAAIC,KAAG,GAAGJ,UAAQ,CAAC;AA+B1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CACqB,YAAY;AACjC,EAAE,IAAI,GAAG,GAAGC,QAAM,EAAE,CAAC;AACrB,EAAE,OAAO,UAAU,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE;AACtD,IAAI,IAAI,CAAC,EAAE,CAAC,CAAC;AACb;AACA,IAAI,IAAI,CAAC,MAAM,EAAE;AACjB,MAAM,MAAM,GAAG,CAAC,CAAC;AACjB,KAAK;AACL;AACA,IAAI,IAAI,CAAC,MAAM,EAAE;AACjB,MAAM,MAAM,GAAG,CAAC,CAAC;AACjB,KAAK;AACL;AACA,IAAI,IAAI,KAAK,EAAE;AACf,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,MAAM,GAAG,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;AACtD,KAAK,MAAM;AACX,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;AACnB,KAAK;AACL;AACA,IAAI,KAAK,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,MAAM,EAAE;AACzC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACxB,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACxB,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AACxB,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACpB,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACxB,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACxB,KAAK;AACL;AACA,IAAI,OAAO,CAAC,CAAC;AACb,GAAG,CAAC;AACJ,EAAC;;ACjxBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,MAAM,GAAG;AACzB,EAAE,IAAI,GAAG,GAAG,IAAIC,UAAmB,CAAC,CAAC,CAAC,CAAC;AACvC;AACA,EAAE,IAAIA,UAAmB,IAAI,YAAY,EAAE;AAC3C,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,GAAG;AACH;AACA,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AAmED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;AAC/B,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;AACpC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;AACpC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AA8FD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;AACjC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACpB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACpB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACpB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACpB,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AAgDD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,MAAM,CAAC,CAAC,EAAE;AAC1B,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,EAAE,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAChC,CAAC;AA2QD;AACA;AACA;AACA;AACA;AACO,IAAI,GAAG,GAAG,QAAQ,CAAC;AAC1B;AACA;AACA;AACA;AACA;AACO,IAAI,GAAG,GAAG,QAAQ,CAAC;AAmB1B;AACA;AACA;AACA;AACA;AACO,IAAI,GAAG,GAAG,MAAM,CAAC;AAOxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CACqB,YAAY;AACjC,EAAE,IAAI,GAAG,GAAG,MAAM,EAAE,CAAC;AACrB,EAAE,OAAO,UAAU,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE;AACtD,IAAI,IAAI,CAAC,EAAE,CAAC,CAAC;AACb;AACA,IAAI,IAAI,CAAC,MAAM,EAAE;AACjB,MAAM,MAAM,GAAG,CAAC,CAAC;AACjB,KAAK;AACL;AACA,IAAI,IAAI,CAAC,MAAM,EAAE;AACjB,MAAM,MAAM,GAAG,CAAC,CAAC;AACjB,KAAK;AACL;AACA,IAAI,IAAI,KAAK,EAAE;AACf,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,MAAM,GAAG,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;AACtD,KAAK,MAAM;AACX,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;AACnB,KAAK;AACL;AACA,IAAI,KAAK,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,MAAM,EAAE;AACzC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACxB,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACxB,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACxB,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AACxB,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACpB,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACxB,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACxB,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACxB,KAAK;AACL;AACA,IAAI,OAAO,CAAC,CAAC;AACb,GAAG,CAAC;AACJ,EAAC;;ACnpBD;;;;;;AAMG;AACG,SAAUG,cAAcA,CAACzK,IAAe,EAAA;AAC7C,EAAA,MAAMC,OAAO,GAAGD,IAAI,CAACE,UAAU,EAAE,CAAA;EACjC,IAAI,CAACD,OAAO,EAAE,OAAA;EAEd,MAAMyK,eAAe,GAAG,EAAE,CAAA;EAC1B,IAAI1F,QAAQ,GAAG,CAAC2F,QAAQ,CAAA;EAExB,KAAK,IAAIlM,CAAC,GAAG,CAAC,EAAEmM,EAAE,GAAG3K,OAAO,CAACQ,QAAQ,EAAE,EAAEhC,CAAC,GAAGmM,EAAE,EAAEnM,CAAC,IAAI,CAAC,EAAE;AACxD,IAAA,MAAMsE,CAAC,GAAG9C,OAAO,CAAC4K,SAAS,CAACpM,CAAC,CAAC,CAAA;IAC9B,MAAMuE,CAAC,GAAG/C,OAAO,CAAC4K,SAAS,CAACpM,CAAC,GAAG,CAAC,CAAC,CAAA;IAClC,MAAMqM,CAAC,GAAG7K,OAAO,CAAC4K,SAAS,CAACpM,CAAC,GAAG,CAAC,CAAC,CAAA;IAElC,IAAIsE,CAAC,KAAKC,CAAC,IAAID,CAAC,KAAK+H,CAAC,IAAI9H,CAAC,KAAK8H,CAAC,EAAE,SAAA;IAEnCJ,eAAe,CAACjH,IAAI,CAACV,CAAC,EAAEC,CAAC,EAAE8H,CAAC,CAAC,CAAA;AAC7B9F,IAAAA,QAAQ,GAAG5C,IAAI,CAACyG,GAAG,CAAC7D,QAAQ,EAAEjC,CAAC,EAAEC,CAAC,EAAE8H,CAAC,CAAC,CAAA;AACvC,GAAA;EAEA,MAAMC,eAAe,GAAGjG,aAAa,CAAC4F,eAAe,CAACxG,MAAM,EAAEc,QAAQ,CAAC,CAAA;AACvE+F,EAAAA,eAAe,CAAClJ,GAAG,CAAC6I,eAAe,CAAC,CAAA;AACpCzK,EAAAA,OAAO,CAAC4E,QAAQ,CAACkG,eAAe,CAAC,CAAA;AAClC;;ACdA,MAAMtD,MAAI,GAAG,OAAO,CAAA;AASpB,MAAMuD,cAAc,GAA2B;AAC9CC,EAAAA,eAAe,EAAE,KAAK;EACtBC,aAAa,EAAE,CACdxF,iBAAY,CAACyF,QAAQ,EACrBzF,iBAAY,CAAC0F,IAAI,EACjB1F,iBAAY,CAAC2F,OAAO,EACpB3F,iBAAY,CAAC4F,QAAQ,EACrB5F,iBAAY,CAAC6F,IAAI,CAAA;CAElB,CAAA;AAED;;;;;;;;;;;;;;;;;AAiBG;AACa,SAAAC,KAAKA,CAAC3D,QAAA,EAAuC;AAAA,EAAA,IAAvCA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,QAAA,GAAyBmD,cAAc,CAAA;AAAA,GAAA;AAC5D,EAAA,MAAMlD,OAAO,GAAG;AAAE,IAAA,GAAGkD,cAAc;IAAE,GAAGnD,QAAAA;GAAoC,CAAA;EAE5E,MAAMqD,aAAa,GAAG,IAAItJ,GAAG,CAACkG,OAAO,CAACoD,aAAa,CAAC,CAAA;AACpD,EAAA,KAAK,MAAMzF,YAAY,IAAIqC,OAAO,CAACoD,aAAa,EAAE;IACjD,IAAI,CAACF,cAAc,CAACE,aAAa,CAACO,QAAQ,CAAChG,YAAY,CAAC,EAAE;MACzD,MAAM,IAAIzE,KAAK,CAAC,CAAA,EAAGyG,MAA4C,CAAAhC,qCAAAA,EAAAA,YAAgB,IAAA,CAAC,CAAA;AACjF,KAAA;AACD,GAAA;AAEA,EAAA,OAAOvG,eAAe,CAACuI,MAAI,EAAG5B,QAAkB,IAAU;AACzD,IAAA,MAAMmC,MAAM,GAAGnC,QAAQ,CAACoC,SAAS,EAAE,CAAA;AAEnC,IAAA,IAAIiD,aAAa,CAAC5J,GAAG,CAACoE,iBAAY,CAACyF,QAAQ,CAAC,EAAEO,cAAc,CAAC7F,QAAQ,CAAC,CAAA;AACtE,IAAA,IAAIqF,aAAa,CAAC5J,GAAG,CAACoE,iBAAY,CAAC2F,OAAO,CAAC,EAAEM,WAAW,CAAC9F,QAAQ,EAAEiC,OAAO,CAAC,CAAA;AAC3E,IAAA,IAAIoD,aAAa,CAAC5J,GAAG,CAACoE,iBAAY,CAAC4F,QAAQ,CAAC,EAAEM,cAAc,CAAC/F,QAAQ,EAAEiC,OAAO,CAAC,CAAA;AAC/E,IAAA,IAAIoD,aAAa,CAAC5J,GAAG,CAACoE,iBAAY,CAAC0F,IAAI,CAAC,EAAES,WAAW,CAAChG,QAAQ,EAAEiC,OAAO,CAAC,CAAA;AACxE,IAAA,IAAIoD,aAAa,CAAC5J,GAAG,CAACoE,iBAAY,CAAC6F,IAAI,CAAC,EAAEO,UAAU,CAACjG,QAAQ,EAAEiC,OAAO,CAAC,CAAA;AAEvEE,IAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AACnC,GAAC,CAAC,CAAA;AACH,CAAA;AAEA,SAASiE,cAAcA,CAAC7F,QAAkB,EAAA;AACzC,EAAA,MAAMmC,MAAM,GAAGnC,QAAQ,CAACoC,SAAS,EAAE,CAAA;AAEnC;AACA,EAAA,MAAM8D,UAAU,GAAG,IAAI3K,GAAG,EAAyB,CAAA;AACnD,EAAA,MAAM4K,YAAY,GAAG,IAAI5K,GAAG,EAAyB,CAAA;AACrD,EAAA,MAAM6K,QAAQ,GAAG,IAAI7K,GAAG,EAAyB,CAAA;AACjD,EAAA,MAAM8K,SAAS,GAAG,IAAI9K,GAAG,EAAyB,CAAA;EAElD,MAAM+K,MAAM,GAAGtG,QAAQ,CAACO,OAAO,EAAE,CAACgG,UAAU,EAAE,CAAA;AAC9CD,EAAAA,MAAM,CAAC5D,OAAO,CAAE8D,IAAI,IAAI;IACvBA,IAAI,CAACC,cAAc,EAAE,CAAC/D,OAAO,CAAEgE,SAAS,IAAI;AAC3CA,MAAAA,SAAS,CAAC/I,cAAc,EAAE,CAAC+E,OAAO,CAAEiE,QAAQ,IAAKC,YAAY,CAACD,QAAQ,EAAER,YAAY,CAAC,CAAC,CAAA;MACtFS,YAAY,CAACF,SAAS,CAACrM,UAAU,EAAE,EAAE6L,UAAU,CAAC,CAAA;AACjD,KAAC,CAAC,CAAA;AACH,GAAC,CAAC,CAAA;AAEF,EAAA,KAAK,MAAMW,SAAS,IAAI7G,QAAQ,CAACO,OAAO,EAAE,CAACgC,cAAc,EAAE,EAAE;IAC5D,KAAK,MAAMuE,OAAO,IAAID,SAAS,CAACE,YAAY,EAAE,EAAE;MAC/CH,YAAY,CAACE,OAAO,CAACE,QAAQ,EAAE,EAAEZ,QAAQ,CAAC,CAAA;MAC1CQ,YAAY,CAACE,OAAO,CAACG,SAAS,EAAE,EAAEZ,SAAS,CAAC,CAAA;AAC7C,KAAA;AACD,GAAA;AAEA;AACA;AACA,EAAA,SAASO,YAAYA,CAACD,QAAyB,EAAEO,KAAiC,EAAA;IACjF,IAAI,CAACP,QAAQ,EAAE,OAAA;AAEf,IAAA,MAAMQ,IAAI,GAAG,CACZR,QAAQ,CAAC/L,QAAQ,EAAE,EACnB+L,QAAQ,CAACS,OAAO,EAAE,EAClBT,QAAQ,CAAC1F,gBAAgB,EAAE,EAC3B0F,QAAQ,CAACU,aAAa,EAAE,EACxBV,QAAQ,CAACW,SAAS,EAAE,CACpB,CAACpG,IAAI,CAAC,GAAG,CAAC,CAAA;AAEX,IAAA,IAAIqG,OAAO,GAAGL,KAAK,CAACpL,GAAG,CAACqL,IAAI,CAAC,CAAA;AAC7B,IAAA,IAAI,CAACI,OAAO,EAAEL,KAAK,CAAClL,GAAG,CAACmL,IAAI,EAAGI,OAAO,GAAG,IAAIxL,GAAG,EAAa,CAAC,CAAA;AAC9DwL,IAAAA,OAAO,CAAC5L,GAAG,CAACgL,QAAQ,CAAC,CAAA;AACtB,GAAA;AAEA;AACA,EAAA,SAASa,gBAAgBA,CAAC/J,SAAqB,EAAEgK,UAAmC,EAAA;AACnF,IAAA,KAAK,IAAI7O,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6E,SAAS,CAACY,MAAM,EAAEzF,CAAC,EAAE,EAAE;AAC1C,MAAA,MAAMsE,CAAC,GAAGO,SAAS,CAAC7E,CAAC,CAAC,CAAA;MACtB,MAAM8O,KAAK,GAAGC,gBAAW,CAACC,MAAM,CAAC1K,CAAC,CAAC2B,QAAQ,EAAG,CAAC,CAAA;AAE/C,MAAA,IAAI4I,UAAU,CAAChM,GAAG,CAACyB,CAAC,CAAC,EAAE,SAAA;AAEvB,MAAA,KAAK,IAAIpE,CAAC,GAAGF,CAAC,GAAG,CAAC,EAAEE,CAAC,GAAG2E,SAAS,CAACY,MAAM,EAAEvF,CAAC,EAAE,EAAE;AAC9C,QAAA,MAAMqE,CAAC,GAAGM,SAAS,CAAC3E,CAAC,CAAC,CAAA;AAEtB,QAAA,IAAI2O,UAAU,CAAChM,GAAG,CAAC0B,CAAC,CAAC,EAAE,SAAA;AAEvB;AACA;AACA;AACA,QAAA,IAAIwK,gBAAW,CAACE,MAAM,CAACH,KAAK,EAAEC,gBAAW,CAACC,MAAM,CAACzK,CAAC,CAAC0B,QAAQ,EAAG,CAAC,CAAC,EAAE;AACjE4I,UAAAA,UAAU,CAACzL,GAAG,CAACmB,CAAC,EAAED,CAAC,CAAC,CAAA;AACrB,SAAA;AACD,OAAA;AACD,KAAA;AACD,GAAA;EAEA,IAAI4K,KAAK,GAAG,CAAC,CAAA;AACb,EAAA,MAAML,UAAU,GAAG,IAAIlM,GAAG,EAAsB,CAAA;AAChD,EAAA,KAAK,MAAM2L,KAAK,IAAI,CAACf,YAAY,EAAED,UAAU,EAAEE,QAAQ,EAAEC,SAAS,CAAC,EAAE;IACpE,KAAK,MAAM0B,SAAS,IAAIb,KAAK,CAACc,MAAM,EAAE,EAAE;MACvCF,KAAK,IAAIC,SAAS,CAACvM,IAAI,CAAA;MACvBgM,gBAAgB,CAAC1J,KAAK,CAACC,IAAI,CAACgK,SAAS,CAAC,EAAEN,UAAU,CAAC,CAAA;AACpD,KAAA;AACD,GAAA;AAEAtF,EAAAA,MAAM,CAACU,KAAK,CAAC,CAAA,EAAGjB,MAAI,CAAA,SAAA,EAAY6F,UAAU,CAACjM,IAAI,CAAA,IAAA,EAAOsM,KAAK,CAAA,WAAA,CAAa,CAAC,CAAA;AAEzE;AACAxB,EAAAA,MAAM,CAAC5D,OAAO,CAAE8D,IAAI,IAAI;IACvBA,IAAI,CAACC,cAAc,EAAE,CAAC/D,OAAO,CAAEgE,SAAS,IAAI;MAC3CA,SAAS,CAAC/I,cAAc,EAAE,CAAC+E,OAAO,CAAEiE,QAAQ,IAAI;AAC/C,QAAA,IAAIc,UAAU,CAAChM,GAAG,CAACkL,QAAQ,CAAC,EAAE;UAC7BD,SAAS,CAACvI,IAAI,CAACwI,QAAQ,EAAEc,UAAU,CAAC3L,GAAG,CAAC6K,QAAQ,CAAa,CAAC,CAAA;AAC/D,SAAA;AACD,OAAC,CAAC,CAAA;AACF,MAAA,MAAMvM,OAAO,GAAGsM,SAAS,CAACrM,UAAU,EAAE,CAAA;MACtC,IAAID,OAAO,IAAIqN,UAAU,CAAChM,GAAG,CAACrB,OAAO,CAAC,EAAE;QACvCsM,SAAS,CAACvI,IAAI,CAAC/D,OAAO,EAAEqN,UAAU,CAAC3L,GAAG,CAAC1B,OAAO,CAAa,CAAC,CAAA;AAC7D,OAAA;AACD,KAAC,CAAC,CAAA;AACH,GAAC,CAAC,CAAA;AAEF;AACA,EAAA,KAAK,MAAMyM,SAAS,IAAI7G,QAAQ,CAACO,OAAO,EAAE,CAACgC,cAAc,EAAE,EAAE;IAC5D,KAAK,MAAMuE,OAAO,IAAID,SAAS,CAACE,YAAY,EAAE,EAAE;AAC/C,MAAA,MAAMkB,KAAK,GAAGnB,OAAO,CAACE,QAAQ,EAAE,CAAA;AAChC,MAAA,MAAMkB,MAAM,GAAGpB,OAAO,CAACG,SAAS,EAAE,CAAA;MAClC,IAAIgB,KAAK,IAAIR,UAAU,CAAChM,GAAG,CAACwM,KAAK,CAAC,EAAE;QACnCnB,OAAO,CAAC3I,IAAI,CAAC8J,KAAK,EAAER,UAAU,CAAC3L,GAAG,CAACmM,KAAK,CAAa,CAAC,CAAA;AACvD,OAAA;MACA,IAAIC,MAAM,IAAIT,UAAU,CAAChM,GAAG,CAACyM,MAAM,CAAC,EAAE;QACrCpB,OAAO,CAAC3I,IAAI,CAAC+J,MAAM,EAAET,UAAU,CAAC3L,GAAG,CAACoM,MAAM,CAAa,CAAC,CAAA;AACzD,OAAA;AACD,KAAA;AACD,GAAA;AAEApK,EAAAA,KAAK,CAACC,IAAI,CAAC0J,UAAU,CAACxL,IAAI,EAAE,CAAC,CAACyG,OAAO,CAAEiE,QAAQ,IAAKA,QAAQ,CAACwB,OAAO,EAAE,CAAC,CAAA;AACxE,CAAA;AAEA,SAASnC,WAAWA,CAAChG,QAAkB,EAAEiC,OAA+B,EAAA;AACvE,EAAA,MAAME,MAAM,GAAGnC,QAAQ,CAACoC,SAAS,EAAE,CAAA;AACnC,EAAA,MAAMC,IAAI,GAAGrC,QAAQ,CAACO,OAAO,EAAE,CAAA;AAE/B;AACA,EAAA,MAAM6H,IAAI,GAAG,IAAI7M,GAAG,EAA+B,CAAA;EACnD8G,IAAI,CAACgG,aAAa,EAAE,CAAC3F,OAAO,CAAC,CAACiE,QAAQ,EAAE/D,KAAK,KAAKwF,IAAI,CAACpM,GAAG,CAAC2K,QAAQ,EAAE/D,KAAK,CAAC,CAAC,CAAA;EAC5EP,IAAI,CAAC7B,aAAa,EAAE,CAACkC,OAAO,CAAC,CAACtC,QAAQ,EAAEwC,KAAK,KAAKwF,IAAI,CAACpM,GAAG,CAACoE,QAAQ,EAAEwC,KAAK,CAAC,CAAC,CAAA;AAE5E;EACA,MAAM0F,SAAS,GAAGjG,IAAI,CAACkE,UAAU,EAAE,CAAClI,MAAM,CAAA;AAC1C,EAAA,MAAMkK,YAAY,GAAG,IAAIhN,GAAG,EAAgB,CAAA;EAC5C,KAAK,MAAM0C,GAAG,IAAIoE,IAAI,CAACkE,UAAU,EAAE,EAAE;AACpC;IACA,MAAMiC,WAAW,GAAG,EAAE,CAAA;IACtB,KAAK,MAAMrO,IAAI,IAAI8D,GAAG,CAACwI,cAAc,EAAE,EAAE;MACxC+B,WAAW,CAAC5K,IAAI,CAAC6K,kBAAkB,CAACtO,IAAI,EAAEiO,IAAI,CAAC,CAAC,CAAA;AACjD,KAAA;AAEA;AACA;IACA,IAAIM,OAAO,GAAG,EAAE,CAAA;AAChB,IAAA,IAAIzG,OAAO,CAACmD,eAAe,EAAEsD,OAAO,IAAIzK,GAAG,CAAC0K,OAAO,EAAE,GAAG,GAAG,CAAA;AAC3DD,IAAAA,OAAO,IAAIF,WAAW,CAACtH,IAAI,CAAC,GAAG,CAAC,CAAA;AAEhC,IAAA,IAAIqH,YAAY,CAAC9M,GAAG,CAACiN,OAAO,CAAC,EAAE;AAC9B,MAAA,MAAME,UAAU,GAAGL,YAAY,CAACzM,GAAG,CAAC4M,OAAO,CAAE,CAAA;MAC7CzK,GAAG,CAACwB,WAAW,EAAE,CAACiD,OAAO,CAAE/C,MAAM,IAAI;AACpC,QAAA,IAAIA,MAAM,CAACC,YAAY,KAAKC,iBAAY,CAACC,IAAI,EAAE;AAC9CH,UAAAA,MAAM,CAACxB,IAAI,CAACF,GAAG,EAAE2K,UAAU,CAAC,CAAA;AAC7B,SAAA;AACD,OAAC,CAAC,CAAA;MACF3K,GAAG,CAACkK,OAAO,EAAE,CAAA;AACd,KAAC,MAAM;AACNI,MAAAA,YAAY,CAACvM,GAAG,CAAC0M,OAAO,EAAEzK,GAAG,CAAC,CAAA;AAC/B,KAAA;AACD,GAAA;AAEAkE,EAAAA,MAAM,CAACU,KAAK,CAAC,CAAA,EAAGjB,MAAgB,CAAA0G,SAAAA,EAAAA,SAAS,GAAGC,YAAY,CAAC/M,IAAI,CAAO8M,IAAAA,EAAAA,SAAS,UAAU,CAAC,CAAA;AACzF,CAAA;AAEA,SAASxC,WAAWA,CAAC9F,QAAkB,EAAEiC,OAA+B,EAAA;AACvE,EAAA,MAAME,MAAM,GAAGnC,QAAQ,CAACoC,SAAS,EAAE,CAAA;AACnC,EAAA,MAAMC,IAAI,GAAGrC,QAAQ,CAACO,OAAO,EAAE,CAAA;AAC/B,EAAA,MAAMsI,QAAQ,GAAGxG,IAAI,CAACyG,YAAY,EAAE,CAAA;AACpC,EAAA,MAAMrB,UAAU,GAA0B,IAAIlM,GAAG,EAAE,CAAA;AAEnD;AACA,EAAA,KAAK,IAAI3C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiQ,QAAQ,CAACxK,MAAM,EAAEzF,CAAC,EAAE,EAAE;AACzC,IAAA,MAAMsE,CAAC,GAAG2L,QAAQ,CAACjQ,CAAC,CAAC,CAAA;AACrB,IAAA,MAAM8O,KAAK,GAAGxK,CAAC,CAAC3E,QAAQ,EAAE,CAAA;AAE1B,IAAA,IAAIkP,UAAU,CAAChM,GAAG,CAACyB,CAAC,CAAC,EAAE,SAAA;AAEvB,IAAA,KAAK,IAAIpE,CAAC,GAAGF,CAAC,GAAG,CAAC,EAAEE,CAAC,GAAG+P,QAAQ,CAACxK,MAAM,EAAEvF,CAAC,EAAE,EAAE;AAC7C,MAAA,MAAMqE,CAAC,GAAG0L,QAAQ,CAAC/P,CAAC,CAAC,CAAA;AACrB,MAAA,MAAMiQ,KAAK,GAAG5L,CAAC,CAAC5E,QAAQ,EAAE,CAAA;AAE1B,MAAA,IAAIkP,UAAU,CAAChM,GAAG,CAAC0B,CAAC,CAAC,EAAE,SAAA;AAEvB;MACA,IAAID,CAAC,CAACzE,WAAW,EAAE,KAAK0E,CAAC,CAAC1E,WAAW,EAAE,EAAE,SAAA;AACzC,MAAA,IAAIwJ,OAAO,CAACmD,eAAe,IAAIlI,CAAC,CAACyL,OAAO,EAAE,KAAKxL,CAAC,CAACwL,OAAO,EAAE,EAAE,SAAA;AAE5D,MAAA,MAAMK,KAAK,GAAG9L,CAAC,CAAC+L,OAAO,EAAE,CAAA;AACzB,MAAA,MAAMC,KAAK,GAAG/L,CAAC,CAAC8L,OAAO,EAAE,CAAA;AACzB,MAAA,IAAI,CAACD,KAAK,IAAI,CAACE,KAAK,EAAE,SAAA;MACtB,IAAIF,KAAK,CAAC,CAAC,CAAC,KAAKE,KAAK,CAAC,CAAC,CAAC,EAAE,SAAA;MAC3B,IAAIF,KAAK,CAAC,CAAC,CAAC,KAAKE,KAAK,CAAC,CAAC,CAAC,EAAE,SAAA;AAC3B,MAAA,IAAI,CAACxB,KAAK,IAAI,CAACqB,KAAK,EAAE,SAAA;MACtB,IAAIpB,gBAAW,CAACE,MAAM,CAACH,KAAK,EAAEqB,KAAK,CAAC,EAAE;AACrCtB,QAAAA,UAAU,CAACzL,GAAG,CAACmB,CAAC,EAAED,CAAC,CAAC,CAAA;AACrB,OAAA;AACD,KAAA;AACD,GAAA;AAEAiF,EAAAA,MAAM,CAACU,KAAK,IAAIjB,MAAI,CAAA,SAAA,EAAY6F,UAAU,CAACjM,IAAW,CAAA6G,IAAAA,EAAAA,IAAI,CAACyG,YAAY,EAAE,CAACzK,MAAM,YAAY,CAAC,CAAA;AAE7FP,EAAAA,KAAK,CAACC,IAAI,CAAC0J,UAAU,CAAC0B,OAAO,EAAE,CAAC,CAACzG,OAAO,CAAC0G,IAAA,IAAe;AAAA,IAAA,IAAd,CAACnL,GAAG,EAAEC,GAAG,CAAC,GAAAkL,IAAA,CAAA;IACnDnL,GAAG,CAACwB,WAAW,EAAE,CAACiD,OAAO,CAAE2G,QAAQ,IAAI;AACtC,MAAA,IAAI,EAAEA,QAAQ,YAAYC,SAAI,CAAC,EAAED,QAAQ,CAAClL,IAAI,CAACF,GAAG,EAAEC,GAAG,CAAC,CAAA;AACzD,KAAC,CAAC,CAAA;IACFD,GAAG,CAACkK,OAAO,EAAE,CAAA;AACd,GAAC,CAAC,CAAA;AACH,CAAA;AAEA,SAASpC,cAAcA,CAAC/F,QAAkB,EAAEiC,OAA+B,EAAA;AAC1E,EAAA,MAAME,MAAM,GAAGnC,QAAQ,CAACoC,SAAS,EAAE,CAAA;AACnC,EAAA,MAAMC,IAAI,GAAGrC,QAAQ,CAACO,OAAO,EAAE,CAAA;AAC/B,EAAA,MAAMgJ,SAAS,GAAGlH,IAAI,CAAC7B,aAAa,EAAE,CAAA;AACtC,EAAA,MAAMiH,UAAU,GAAG,IAAIlM,GAAG,EAAsB,CAAA;AAChD,EAAA,MAAMiO,aAAa,GAAG,IAAIjO,GAAG,EAAqB,CAAA;AAClD,EAAA,MAAMkO,IAAI,GAAG,IAAI1N,GAAG,EAAU,CAAA;AAE9B,EAAA,IAAI,CAACkG,OAAO,CAACmD,eAAe,EAAE;AAC7BqE,IAAAA,IAAI,CAAC9N,GAAG,CAAC,MAAM,CAAC,CAAA;AACjB,GAAA;AAEA;AACA,EAAA,KAAK,IAAI/C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2Q,SAAS,CAAClL,MAAM,EAAEzF,CAAC,EAAE,EAAE;AAC1C,IAAA,MAAMsE,CAAC,GAAGqM,SAAS,CAAC3Q,CAAC,CAAC,CAAA;AAEtB,IAAA,IAAI6O,UAAU,CAAChM,GAAG,CAACyB,CAAC,CAAC,EAAE,SAAA;AACvB,IAAA,IAAIwM,WAAW,CAACxM,CAAC,EAAEsM,aAAa,CAAC,EAAE,SAAA;AAEnC,IAAA,KAAK,IAAI1Q,CAAC,GAAGF,CAAC,GAAG,CAAC,EAAEE,CAAC,GAAGyQ,SAAS,CAAClL,MAAM,EAAEvF,CAAC,EAAE,EAAE;AAC9C,MAAA,MAAMqE,CAAC,GAAGoM,SAAS,CAACzQ,CAAC,CAAC,CAAA;AAEtB,MAAA,IAAI2O,UAAU,CAAChM,GAAG,CAAC0B,CAAC,CAAC,EAAE,SAAA;AACvB,MAAA,IAAIuM,WAAW,CAACvM,CAAC,EAAEqM,aAAa,CAAC,EAAE,SAAA;MAEnC,IAAItM,CAAC,CAAC2K,MAAM,CAAC1K,CAAC,EAAEsM,IAAI,CAAC,EAAE;AACtBhC,QAAAA,UAAU,CAACzL,GAAG,CAACmB,CAAC,EAAED,CAAC,CAAC,CAAA;AACrB,OAAA;AACD,KAAA;AACD,GAAA;AAEAiF,EAAAA,MAAM,CAACU,KAAK,CAAC,CAAA,EAAGjB,MAAgB,CAAA6F,SAAAA,EAAAA,UAAU,CAACjM,KAAW+N,IAAAA,EAAAA,SAAS,CAAClL,MAAM,aAAa,CAAC,CAAA;AAEpFP,EAAAA,KAAK,CAACC,IAAI,CAAC0J,UAAU,CAAC0B,OAAO,EAAE,CAAC,CAACzG,OAAO,CAACiH,KAAA,IAAe;AAAA,IAAA,IAAd,CAAC1L,GAAG,EAAEC,GAAG,CAAC,GAAAyL,KAAA,CAAA;IACnD1L,GAAG,CAACwB,WAAW,EAAE,CAACiD,OAAO,CAAE2G,QAAQ,IAAI;AACtC,MAAA,IAAI,EAAEA,QAAQ,YAAYC,SAAI,CAAC,EAAED,QAAQ,CAAClL,IAAI,CAACF,GAAG,EAAEC,GAAG,CAAC,CAAA;AACzD,KAAC,CAAC,CAAA;IACFD,GAAG,CAACkK,OAAO,EAAE,CAAA;AACd,GAAC,CAAC,CAAA;AACH,CAAA;AAEA,SAASlC,UAAUA,CAACjG,QAAkB,EAAEiC,OAA+B,EAAA;AACtE,EAAA,MAAME,MAAM,GAAGnC,QAAQ,CAACoC,SAAS,EAAE,CAAA;AACnC,EAAA,MAAMC,IAAI,GAAGrC,QAAQ,CAACO,OAAO,EAAE,CAAA;AAC/B,EAAA,MAAMqJ,KAAK,GAAGvH,IAAI,CAACG,SAAS,EAAE,CAAA;AAC9B,EAAA,MAAMiF,UAAU,GAAG,IAAIlM,GAAG,EAAc,CAAA;EACxC,MAAMkO,IAAI,GAAG,IAAI1N,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAA;AAEhC,EAAA,IAAI,CAACkG,OAAO,CAACmD,eAAe,EAAE;AAC7BqE,IAAAA,IAAI,CAAC9N,GAAG,CAAC,MAAM,CAAC,CAAA;AACjB,GAAA;AAEA,EAAA,KAAK,IAAI/C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgR,KAAK,CAACvL,MAAM,EAAEzF,CAAC,EAAE,EAAE;AACtC,IAAA,MAAMsE,CAAC,GAAG0M,KAAK,CAAChR,CAAC,CAAC,CAAA;AAElB,IAAA,IAAI6O,UAAU,CAAChM,GAAG,CAACyB,CAAC,CAAC,EAAE,SAAA;AAEvB,IAAA,KAAK,IAAIpE,CAAC,GAAGF,CAAC,GAAG,CAAC,EAAEE,CAAC,GAAG8Q,KAAK,CAACvL,MAAM,EAAEvF,CAAC,EAAE,EAAE;AAC1C,MAAA,MAAMqE,CAAC,GAAGyM,KAAK,CAAC9Q,CAAC,CAAC,CAAA;AAClB,MAAA,IAAI2O,UAAU,CAAChM,GAAG,CAAC0B,CAAC,CAAC,EAAE,SAAA;AAEvB;AACA;MACA,IAAID,CAAC,CAAC2K,MAAM,CAAC1K,CAAC,EAAEsM,IAAI,CAAC,IAAIrL,kBAAkB,CAAClB,CAAC,CAAC2M,UAAU,EAAE,EAAE1M,CAAC,CAAC0M,UAAU,EAAE,CAAC,EAAE;AAC5EpC,QAAAA,UAAU,CAACzL,GAAG,CAACmB,CAAC,EAAED,CAAC,CAAC,CAAA;AACrB,OAAA;AACD,KAAA;AACD,GAAA;AAEAiF,EAAAA,MAAM,CAACU,KAAK,CAAC,CAAA,EAAGjB,MAAgB,CAAA6F,SAAAA,EAAAA,UAAU,CAACjM,KAAWoO,IAAAA,EAAAA,KAAK,CAACvL,MAAM,SAAS,CAAC,CAAA;AAE5EP,EAAAA,KAAK,CAACC,IAAI,CAAC0J,UAAU,CAAC0B,OAAO,EAAE,CAAC,CAACzG,OAAO,CAACoH,KAAA,IAAe;AAAA,IAAA,IAAd,CAAC7L,GAAG,EAAEC,GAAG,CAAC,GAAA4L,KAAA,CAAA;IACnD7L,GAAG,CAACwB,WAAW,EAAE,CAACiD,OAAO,CAAE2G,QAAQ,IAAI;AACtC,MAAA,IAAI,EAAEA,QAAQ,YAAYC,SAAI,CAAC,EAAED,QAAQ,CAAClL,IAAI,CAACF,GAAG,EAAEC,GAAG,CAAC,CAAA;AACzD,KAAC,CAAC,CAAA;IACFD,GAAG,CAACkK,OAAO,EAAE,CAAA;AACd,GAAC,CAAC,CAAA;AACH,CAAA;AAEA;AACA,SAASM,kBAAkBA,CAACtO,IAAiC,EAAEiO,IAAsC,EAAA;EACpG,MAAM2B,YAAY,GAAG,EAAE,CAAA;EACvB,KAAK,MAAMhJ,QAAQ,IAAI5G,IAAI,CAACyG,aAAa,EAAE,EAAE;AAC5C,IAAA,MAAMlD,SAAS,GAAGvD,IAAI,CAACI,YAAY,CAACwG,QAAQ,CAAE,CAAA;AAC9CgJ,IAAAA,YAAY,CAACnM,IAAI,CAACmD,QAAQ,GAAG,GAAG,GAAGqH,IAAI,CAACtM,GAAG,CAAC4B,SAAS,CAAC,CAAC,CAAA;AACxD,GAAA;EACA,IAAIvD,IAAI,YAAYM,cAAS,EAAE;AAC9B,IAAA,MAAML,OAAO,GAAGD,IAAI,CAACE,UAAU,EAAE,CAAA;AACjC,IAAA,IAAID,OAAO,EAAE;MACZ2P,YAAY,CAACnM,IAAI,CAAC,UAAU,GAAGwK,IAAI,CAACtM,GAAG,CAAC1B,OAAO,CAAC,CAAC,CAAA;AAClD,KAAA;AACA,IAAA,MAAMgG,QAAQ,GAAGjG,IAAI,CAACkG,WAAW,EAAE,CAAA;AACnC,IAAA,IAAID,QAAQ,EAAE;MACb2J,YAAY,CAACnM,IAAI,CAAC,WAAW,GAAGwK,IAAI,CAACtM,GAAG,CAACsE,QAAQ,CAAC,CAAC,CAAA;AACpD,KAAA;IACA2J,YAAY,CAACnM,IAAI,CAAC,OAAO,GAAGzD,IAAI,CAACK,OAAO,EAAE,CAAC,CAAA;IAC3C,KAAK,MAAMtC,MAAM,IAAIiC,IAAI,CAAC0D,WAAW,EAAE,EAAE;MACxCkM,YAAY,CAACnM,IAAI,CAAC,SAAS,GAAG6K,kBAAkB,CAACvQ,MAAM,EAAEkQ,IAAI,CAAC,CAAC,CAAA;AAChE,KAAA;AACD,GAAA;AACA,EAAA,OAAO2B,YAAY,CAAC7I,IAAI,CAAC,GAAG,CAAC,CAAA;AAC9B,CAAA;AAEA;;;;;;;;AAQG;AACH,SAASwI,WAAWA,CAAClK,IAAc,EAAEwK,KAA6B,EAAA;AACjE,EAAA,IAAIA,KAAK,CAACvO,GAAG,CAAC+D,IAAI,CAAC,EAAE,OAAOwK,KAAK,CAAClO,GAAG,CAAC0D,IAAI,CAAE,CAAA;AAE5C,EAAA,MAAMyK,KAAK,GAAGzK,IAAI,CAACW,QAAQ,EAAE,CAAA;AAC7B,EAAA,MAAM+J,YAAY,GAAG,IAAInO,GAAG,EAAY,CAAA;AACxC,EAAA,MAAMoO,SAAS,GAAGF,KAAK,CAACG,eAAe,CAAC5K,IAAI,CAAC,CAAA;AAE7C;AACA,EAAA,OAAO2K,SAAS,CAAC9L,MAAM,GAAG,CAAC,EAAE;AAC5B,IAAA,MAAMgM,IAAI,GAAGF,SAAS,CAACG,GAAG,EAAG,CAAA;IAC7B,IAAID,IAAI,CAACE,aAAa,EAAE,CAACC,WAAW,KAAK,IAAI,EAAE;AAC9CR,MAAAA,KAAK,CAAChO,GAAG,CAACwD,IAAI,EAAE,IAAI,CAAC,CAAA;AACrB,MAAA,OAAO,IAAI,CAAA;AACZ,KAAA;AAEA,IAAA,MAAM+D,KAAK,GAAG8G,IAAI,CAACI,QAAQ,EAAE,CAAA;AAC7B,IAAA,IAAIP,YAAY,CAACzO,GAAG,CAAC8H,KAAK,CAAC,EAAE,SAAA;IAE7B,KAAK,MAAMmH,SAAS,IAAIT,KAAK,CAACU,cAAc,CAACpH,KAAK,CAAC,EAAE;AACpD4G,MAAAA,SAAS,CAACvM,IAAI,CAAC8M,SAAS,CAAC,CAAA;AAC1B,KAAA;AACD,GAAA;AAEAV,EAAAA,KAAK,CAAChO,GAAG,CAACwD,IAAI,EAAE,KAAK,CAAC,CAAA;AACtB,EAAA,OAAO,KAAK,CAAA;AACb;;ACvZA,MAAMoL,YAAY,GAAG,yBAAyB,CAAA;AAE9C;;;;;;;;;;;;;;;;;;;;AAoBG;AACG,SAAUC,oBAAoBA,CAACC,OAAgB,EAAA;AACpD,EAAA,MAAMb,KAAK,GAAGa,OAAO,CAAC3K,QAAQ,EAAE,CAAA;AAChC,EAAA,MAAM4K,KAAK,GAAGd,KAAK,CAACG,eAAe,CAACU,OAAO,CAAC,CAAA;AAC5C,EAAA,MAAME,MAAM,GAAGD,KAAK,CAACrL,IAAI,CAAE2K,IAAI,IAAI;AAClC,IAAA,OAAOA,IAAI,CAACE,aAAa,EAAE,CAACU,OAAO,IAAIL,YAAY,CAACM,IAAI,CAACb,IAAI,CAAC1B,OAAO,EAAE,CAAC,CAAA;AACzE,GAAC,CAAC,CAAA;AACF,EAAA,OAAOqC,MAAM,GAAG,MAAM,GAAG,IAAI,CAAA;AAC9B;;AC9BA;;;;;;;;;;;;;;;;AAgBG;AACG,SAAUG,eAAeA,CAACL,OAAgB,EAAA;AAC/C,EAAA,MAAMb,KAAK,GAAGa,OAAO,CAAC3K,QAAQ,EAAE,CAAA;AAChC,EAAA,MAAMiL,OAAO,GAAG,IAAIrP,GAAG,EAAe,CAAA;EAEtC,KAAK,MAAMsP,WAAW,IAAIpB,KAAK,CAACG,eAAe,CAACU,OAAO,CAAC,EAAE;AACzD,IAAA,MAAMnL,MAAM,GAAG0L,WAAW,CAACC,SAAS,EAAE,CAAA;IACtC,MAAMhS,IAAI,GAAG+R,WAAW,CAAC1C,OAAO,EAAE,GAAG,MAAM,CAAA;IAE3C,KAAK,MAAM0B,IAAI,IAAIJ,KAAK,CAACU,cAAc,CAAChL,MAAM,CAAC,EAAE;AAChD,MAAA,MAAM4D,KAAK,GAAG8G,IAAI,CAACI,QAAQ,EAAE,CAAA;MAC7B,IAAIlH,KAAK,YAAYgI,gBAAW,IAAIlB,IAAI,CAAC1B,OAAO,EAAE,KAAKrP,IAAI,EAAE;AAC5D8R,QAAAA,OAAO,CAACzP,GAAG,CAAC4H,KAAK,CAAC,CAAA;AACnB,OAAA;AACD,KAAA;AACD,GAAA;AAEA,EAAA,OAAOzF,KAAK,CAACC,IAAI,CAACqN,OAAO,CAAC,CAAA;AAC3B,CAAA;AAEA;;;;;;;;;;;;;;AAcG;AACG,SAAUI,yBAAyBA,CAACpL,QAAkB,EAAA;AAC3D,EAAA,MAAM6J,KAAK,GAAG7J,QAAQ,CAACD,QAAQ,EAAE,CAAA;AACjC,EAAA,MAAM0D,OAAO,GAAG,IAAI9H,GAAG,EAAY,CAAA;AACnC,EAAA,MAAMqP,OAAO,GAAG,IAAIrP,GAAG,EAAe,CAAA;EAEtC,SAAS0P,QAAQA,CAACjM,IAAkC,EAAA;AACnD,IAAA,MAAMkM,gBAAgB,GAAG,IAAI3P,GAAG,EAAU,CAAA;IAE1C,KAAK,MAAMsO,IAAI,IAAIJ,KAAK,CAACU,cAAc,CAACnL,IAAI,CAAC,EAAE;AAC9C,MAAA,IAAI6K,IAAI,CAACI,QAAQ,EAAE,YAAYkB,YAAO,EAAE;QACvCD,gBAAgB,CAAC/P,GAAG,CAAC0O,IAAI,CAAC1B,OAAO,EAAE,GAAG,MAAM,CAAC,CAAA;AAC9C,OAAA;AACD,KAAA;IAEA,KAAK,MAAM0B,IAAI,IAAIJ,KAAK,CAACU,cAAc,CAACnL,IAAI,CAAC,EAAE;AAC9C,MAAA,MAAM+D,KAAK,GAAG8G,IAAI,CAACI,QAAQ,EAAE,CAAA;AAC7B,MAAA,IAAI5G,OAAO,CAACpI,GAAG,CAAC8H,KAAK,CAAC,EAAE,SAAA;AACxBM,MAAAA,OAAO,CAAClI,GAAG,CAAC4H,KAAK,CAAC,CAAA;AAElB,MAAA,IAAIA,KAAK,YAAYgI,gBAAW,IAAIG,gBAAgB,CAACjQ,GAAG,CAAC4O,IAAI,CAAC1B,OAAO,EAAE,CAAC,EAAE;AACzEyC,QAAAA,OAAO,CAACzP,GAAG,CAAC4H,KAAK,CAAC,CAAA;AACnB,OAAC,MAAM,IAAIA,KAAK,YAAYqI,sBAAiB,EAAE;QAC9CH,QAAQ,CAAClI,KAAK,CAAC,CAAA;AAChB,OAAA;AACD,KAAA;AACD,GAAA;EAEAkI,QAAQ,CAACrL,QAAQ,CAAC,CAAA;AAClB,EAAA,OAAOtC,KAAK,CAACC,IAAI,CAACqN,OAAO,CAAC,CAAA;AAC3B;;AChFA;;;;;;;;;AASG;AACG,SAAUS,gBAAgBA,CAACf,OAAgB,EAAA;EAChD,MAAM9K,QAAQ,GAAGC,aAAQ,CAACC,SAAS,CAAC4K,OAAO,CAAC3K,QAAQ,EAAE,CAAE,CAAA;AACxD,EAAA,MAAMkC,IAAI,GAAGrC,QAAQ,CAACO,OAAO,EAAE,CAAA;AAC/B,EAAA,MAAMuL,KAAK,GAAGhB,OAAO,CACnB3K,QAAQ,EAAE,CACViK,eAAe,CAACU,OAAO,CAAC,CACxB/G,MAAM,CAAEsG,IAAI,IAAKA,IAAI,CAACiB,SAAS,EAAE,KAAKjJ,IAAI,CAAC,CAC3CvB,GAAG,CAAEuJ,IAAI,IAAKA,IAAI,CAAC1B,OAAO,EAAE,CAAC,CAAA;EAC/B,OAAO7K,KAAK,CAACC,IAAI,CAAC,IAAIhC,GAAG,CAAC+P,KAAK,CAAC,CAAC,CAAA;AAClC;;;;;;;;;;;;;MC4feC,cAAc,GAAA,UAACjB,OAAgB,EAAA;AAAA,EAAA,OAAA1S,OAAA,CAAAC,OAAA,CAAA2T,MAAA,CACzC,YAAA;AAAA,IAAA,OAAA5T,OAAA,CAAAC,OAAA,CACUG,uBAAS,CAACsS,OAAO,CAACvS,QAAQ,EAAG,EAAEuS,OAAO,CAACrS,WAAW,EAAE,CAAC,CAAA,CAAA;AACnE,GAAC,EAAW,YAAA;AACX,IAAA,OAAO,IAAI,CAAA;GACX,CAAA,CAAA,CAAA;AACF,CAAC,CAAA;AAAA,MAhCcwT,gBAAgB,GAAA,UAACnB,OAAgB,EAAA;EAAA,OAAA1S,OAAA,CAAAC,OAAA,CAC1B0T,cAAc,CAACjB,OAAO,CAAC,CAAA,CAAApS,IAAA,CAAA,UAAtCC,MAAM,EAAA;AACZ,IAAA,IAAI,CAACA,MAAM,EAAE,OAAO,IAAI,CAAA;IAExB,MAAMsK,GAAG,GAAS,CAAC6B,QAAQ,EAAEA,QAAQ,EAAEA,QAAQ,EAAEA,QAAQ,CAAC,CAAA;AAC1D,IAAA,MAAM9B,GAAG,GAAS,CAAC,CAAC8B,QAAQ,EAAE,CAACA,QAAQ,EAAE,CAACA,QAAQ,EAAE,CAACA,QAAQ,CAAC,CAAA;IAC9D,MAAM5M,MAAM,GAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;IAEjC,MAAM,CAACgU,KAAK,EAAEC,MAAM,CAAC,GAAGxT,MAAM,CAACE,KAAK,CAAA;IAEpC,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsT,KAAK,EAAEtT,CAAC,EAAE,EAAE;MAC/B,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqT,MAAM,EAAErT,CAAC,EAAE,EAAE;QAChC,KAAK,IAAI4C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC3BuH,GAAG,CAACvH,CAAC,CAAC,GAAGa,IAAI,CAAC0G,GAAG,CAACA,GAAG,CAACvH,CAAC,CAAC,EAAE/C,MAAM,CAACmD,GAAG,CAAClD,CAAC,EAAEE,CAAC,EAAE4C,CAAC,CAAC,CAAC,CAAA;UAC9CsH,GAAG,CAACtH,CAAC,CAAC,GAAGa,IAAI,CAACyG,GAAG,CAACA,GAAG,CAACtH,CAAC,CAAC,EAAE/C,MAAM,CAACmD,GAAG,CAAClD,CAAC,EAAEE,CAAC,EAAE4C,CAAC,CAAC,CAAC,CAAA;AAC/C,SAAA;AACD,OAAA;AAEA,MAAA,IAAI0Q,GAAG,CAACC,GAAG,CAACnU,MAAM,EAAE8K,GAAG,EAAEC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAGqJ,GAAG,EAAE;AAC3C,QAAA,OAAO,IAAI,CAAA;AACZ,OAAA;AACD,KAAA;AAEA,IAAA,OAAO5H,KAAK,CAACxM,MAAM,EAAEyD,GAAG,CAACzD,MAAM,EAAE8K,GAAG,EAAEC,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAS,CAAA;AAAC,GAAA,CAAA,CAAA;AAChE,CAAC,CAAA;AA7FD;;AAEG;AAFH,MAIesJ,kBAAkB,GAAA,UAACvM,QAAkB,EAAEwM,OAAuB,EAAA;EAAA,IAAA;AAC5E,IAAA,MAAMnK,IAAI,GAAGrC,QAAQ,CAACO,OAAO,EAAE,CAAA;AAC/B,IAAA,MAAM0J,KAAK,GAAGjK,QAAQ,CAACG,QAAQ,EAAE,CAAA;AACjC,IAAA,MAAMgC,MAAM,GAAGnC,QAAQ,CAACoC,SAAS,EAAE,CAAA;AACnC,IAAA,MAAMyG,QAAQ,GAAGxG,IAAI,CAACyG,YAAY,EAAE,CAAA;AAEpC,IAAA,MAAMjP,OAAO,GAAGgP,QAAQ,CAAC/H,GAAG,CAAA,UAAQgK,OAAO,EAAI;MAAA,OAAA1S,OAAA,CAAAC,OAAA,CACzB4T,gBAAgB,CAACnB,OAAO,CAAC,CAAA,CAAApS,IAAA,CAAA,UAAxC+T,MAAM,EAAA;AAAA,QAAA,IAAAC,gBAAA,CAAA;QACZ,IAAI,CAACD,MAAM,EAAE,OAAA;AAEb,QAAA,IAAI5B,oBAAoB,CAACC,OAAO,CAAC,KAAK,MAAM,EAAE;AAC7C6B,UAAAA,eAAU,CAACC,mBAAmB,CAACH,MAAM,EAAEA,MAAM,CAAC,CAAA;AAC/C,SAAA;AAEA,QAAA,MAAMnT,IAAI,GAAGwR,OAAO,CAACnC,OAAO,EAAE,IAAImC,OAAO,CAAC+B,MAAM,EAAE,CAAA;AAClD,QAAA,MAAMrR,IAAI,GAAA,CAAAkR,gBAAA,GAAG5B,OAAO,CAAC7B,OAAO,EAAE,qBAAjByD,gBAAA,CAAmBxL,IAAI,CAAC,GAAG,CAAC,CAAA;AACzC,QAAA,MAAM4K,KAAK,GAAGD,gBAAgB,CAACf,OAAO,CAAC,CAAA;QAEvC,KAAK,MAAMT,IAAI,IAAIJ,KAAK,CAACG,eAAe,CAACU,OAAO,CAAC,EAAE;AAClD,UAAA,MAAMnL,MAAM,GAAG0K,IAAI,CAACiB,SAAS,EAAE,CAAA;AAC/B,UAAA,IAAI3L,MAAM,KAAK0C,IAAI,IAAIyK,mBAAmB,CAACnN,MAAkB,EAAE8M,MAAM,EAAEpC,IAAI,CAAC1B,OAAO,EAAE,EAAExG,MAAM,CAAC,EAAE;YAC/FkI,IAAI,CAAClC,OAAO,EAAE,CAAA;AACf,WAAA;AACD,SAAA;QAAC,IAEG2C,OAAO,CAACrL,WAAW,EAAE,CAACpB,MAAM,KAAK,CAAC,EAAA;AACrCmO,UAAAA,OAAO,CAACrE,OAAO,CAAC2C,OAAO,CAAC,CAAA;AACxB3I,UAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,kCAAkCtI,IAAU,CAAA,GAAA,EAAAkC,IAAU,CAAA,GAAA,EAAAsQ,KAAK,CAAC5K,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;AAAC,SAAA;AAAA,OAAA,CAAA,CAAA;AAEjG,KAAC,CAAC,CAAA;IAAC,OAAA9I,OAAA,CAAAC,OAAA,CAEGD,OAAO,CAAC2U,GAAG,CAAClT,OAAO,CAAC,CAAA,CAAAnB,IAAA,CAAA,YAAA,EAAA,CAAA,CAAA;AAC3B,GAAC,QAAAS,CAAA,EAAA;AAAA,IAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA,CAAA,CAAA;AAxbD,MAAMyI,MAAI,GAAG,OAAO,CAAA;AAEpB,MAAM0K,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;AAcnB,MAAMU,cAAc,GAA2B;EAC9C3H,aAAa,EAAE,CACdxF,iBAAY,CAACoN,IAAI,EACjBpN,iBAAY,CAAC6F,IAAI,EACjB7F,iBAAY,CAAC0F,IAAI,EACjB1F,iBAAY,CAACqN,MAAM,EACnBrN,iBAAY,CAACsN,SAAS,EACtBtN,iBAAY,CAACuN,gBAAgB,EAC7BvN,iBAAY,CAACwN,SAAS,EACtBxN,iBAAY,CAAC4F,QAAQ,EACrB5F,iBAAY,CAAC2F,OAAO,EACpB3F,iBAAY,CAACyF,QAAQ,EACrBzF,iBAAY,CAACyN,MAAM,CACnB;AACDC,EAAAA,UAAU,EAAE,KAAK;AACjBC,EAAAA,cAAc,EAAE,IAAI;AACpBC,EAAAA,WAAW,EAAE,IAAI;AACjBC,EAAAA,iBAAiB,EAAE,IAAA;CACnB,CAAA;AAED;;;;;;;;;;;;;;;;;;;AAmBG;AACa,SAAAC,KAAKA,CAAC3L,QAAA,EAAuC;AAAA,EAAA,IAAvCA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,QAAA,GAAyBgL,cAAc,CAAA;AAAA,GAAA;AAC5D;AACA,EAAA,MAAM/K,OAAO,GAAG;AAAE,IAAA,GAAG+K,cAAc;IAAE,GAAGhL,QAAAA;GAAoC,CAAA;EAC5E,MAAMqD,aAAa,GAAG,IAAItJ,GAAG,CAACkG,OAAO,CAACoD,aAAa,CAAC,CAAA;AAEpD,EAAA,OAAOhM,eAAe,CAACuI,MAAI,EAAA,UAAS5B,QAAkB,EAAA;IAAA,IAAmB;AAAA,MAAA,SAAA4N,MAAA,GAAA;QAuHxE,IAAIvI,aAAa,CAAC5J,GAAG,CAACoE,iBAAY,CAACyF,QAAQ,CAAC,EAAE;AAC7CjD,UAAAA,IAAI,CAACgG,aAAa,EAAE,CAAC3F,OAAO,CAAEiE,QAAQ,IAAKkH,SAAS,CAAClH,QAAQ,EAAE6F,OAAO,CAAC,CAAC,CAAA;AACzE,SAAA;QAEA,IAAInH,aAAa,CAAC5J,GAAG,CAACoE,iBAAY,CAACyN,MAAM,CAAC,EAAE;AAC3CjL,UAAAA,IAAI,CAACyL,WAAW,EAAE,CAACpL,OAAO,CAAEqL,MAAM,IAAKF,SAAS,CAACE,MAAM,EAAEvB,OAAO,CAAC,CAAC,CAAA;AACnE,SAAA;AAEA;AACA;AACA;AACA;AAEA,QAAA,IAAI,CAACA,OAAO,CAACwB,KAAK,EAAE,EAAE;UACrB,MAAMC,GAAG,GAAGzB,OAAO,CACjBrD,OAAO,EAAE,CACTrI,GAAG,CAACsI,IAAA,IAAA;AAAA,YAAA,IAAC,CAAC8E,IAAI,EAAEhP,KAAK,CAAC,GAAAkK,IAAA,CAAA;AAAA,YAAA,OAAQ,CAAA8E,EAAAA,IAAS,CAAAhP,EAAAA,EAAAA,MAAQ,CAAA,CAAA,CAAA;AAAA,WAAA,CAAC,CAC5CgC,IAAI,CAAC,IAAI,CAAC,CAAA;UACZiB,MAAM,CAACgM,IAAI,CAAC,CAAA,EAAGvM,MAA0B,CAAAqM,mBAAAA,EAAAA,GAAK,EAAA,CAAC,CAAA;AAChD,SAAC,MAAM;AACN9L,UAAAA,MAAM,CAACgM,IAAI,EAAIvM,EAAAA,MAAI,+BAA+B,CAAC,CAAA;AACpD,SAAA;AAEAO,QAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AAAC,OAAA;AA7InC,MAAA,MAAMO,MAAM,GAAGnC,QAAQ,CAACoC,SAAS,EAAE,CAAA;AACnC,MAAA,MAAMC,IAAI,GAAGrC,QAAQ,CAACO,OAAO,EAAE,CAAA;AAC/B,MAAA,MAAM0J,KAAK,GAAGjK,QAAQ,CAACG,QAAQ,EAAE,CAAA;AAEjC,MAAA,MAAMqM,OAAO,GAAG,IAAI4B,cAAc,EAAE,CAAA;AAEpC;AACA;AAEA;MACA,IAAI/I,aAAa,CAAC5J,GAAG,CAACoE,iBAAY,CAAC0F,IAAI,CAAC,EAAE;QACzC,KAAK,MAAMiB,IAAI,IAAInE,IAAI,CAACkE,UAAU,EAAE,EAAE;UACrC,IAAIC,IAAI,CAACC,cAAc,EAAE,CAACpI,MAAM,GAAG,CAAC,EAAE,SAAA;AACtCmO,UAAAA,OAAO,CAACrE,OAAO,CAAC3B,IAAI,CAAC,CAAA;AACtB,SAAA;AACD,OAAA;MAEA,IAAInB,aAAa,CAAC5J,GAAG,CAACoE,iBAAY,CAACoN,IAAI,CAAC,EAAE;AACzC,QAAA,IAAI,CAAChL,OAAO,CAACsL,UAAU,EAAE;UACxB,KAAK,MAAM5K,KAAK,IAAIN,IAAI,CAACI,UAAU,EAAE,EAAE;AACtC4L,YAAAA,aAAa,CAACpE,KAAK,EAAEtH,KAAK,EAAE6J,OAAO,CAAC,CAAA;AACrC,WAAA;AACD,SAAA;QAEA,KAAK,MAAM5I,IAAI,IAAIvB,IAAI,CAACiM,SAAS,EAAE,EAAE;AACpCT,UAAAA,SAAS,CAACjK,IAAI,EAAE4I,OAAO,CAAC,CAAA;AACzB,SAAA;AACD,OAAA;MAEA,IAAInH,aAAa,CAAC5J,GAAG,CAACoE,iBAAY,CAAC6F,IAAI,CAAC,EAAE;QACzC,KAAK,MAAM6I,IAAI,IAAIlM,IAAI,CAACG,SAAS,EAAE,EAAE;AACpCqL,UAAAA,SAAS,CAACU,IAAI,EAAE/B,OAAO,CAAC,CAAA;AACzB,SAAA;AACD,OAAA;MAEA,IAAInH,aAAa,CAAC5J,GAAG,CAACoE,iBAAY,CAAC0F,IAAI,CAAC,EAAE;QACzC,KAAK,MAAMiB,IAAI,IAAInE,IAAI,CAACkE,UAAU,EAAE,EAAE;AACrCsH,UAAAA,SAAS,CAACrH,IAAI,EAAEgG,OAAO,CAAC,CAAA;AACzB,SAAA;AACD,OAAA;MAEA,IAAInH,aAAa,CAAC5J,GAAG,CAACoE,iBAAY,CAACqN,MAAM,CAAC,EAAE;QAC3C,KAAK,MAAMsB,MAAM,IAAInM,IAAI,CAACoM,WAAW,EAAE,EAAE;AACxCZ,UAAAA,SAAS,CAACW,MAAM,EAAEhC,OAAO,CAAC,CAAA;AAC3B,SAAA;AACD,OAAA;MAEA,IAAInH,aAAa,CAAC5J,GAAG,CAACoE,iBAAY,CAACsN,SAAS,CAAC,EAAE;QAC9CuB,iBAAiB,CAACzE,KAAK,EAAEpK,iBAAY,CAACsN,SAAS,EAAEX,OAAO,CAAC,CAAA;AAC1D,OAAA;MAEA,IAAInH,aAAa,CAAC5J,GAAG,CAACoE,iBAAY,CAACuN,gBAAgB,CAAC,EAAE;QACrDsB,iBAAiB,CAACzE,KAAK,EAAEpK,iBAAY,CAACuN,gBAAgB,EAAEZ,OAAO,CAAC,CAAA;AACjE,OAAA;AAEA;AACA,MAAA,IAAI,CAACvK,OAAO,CAACuL,cAAc,IAAInI,aAAa,CAAC5J,GAAG,CAACoE,iBAAY,CAACyF,QAAQ,CAAC,EAAE;AACxE,QAAA,MAAMqJ,aAAa,GAAG,IAAIpT,GAAG,EAA4B,CAAA;QACzD,KAAK,MAAMiL,IAAI,IAAInE,IAAI,CAACkE,UAAU,EAAE,EAAE;UACrC,KAAK,MAAMpM,IAAI,IAAIqM,IAAI,CAACC,cAAc,EAAE,EAAE;AACzC,YAAA,MAAMrG,QAAQ,GAAGjG,IAAI,CAACkG,WAAW,EAAE,CAAA;AACnC,YAAA,MAAMuO,QAAQ,GAAGC,qBAAqB,CAAC7O,QAAQ,EAAEI,QAAQ,CAAC,CAAA;AAC1D,YAAA,MAAM0O,MAAM,GAAGC,mBAAmB,CAAC5U,IAAI,EAAEyU,QAAQ,CAAC,CAAA;AAClDI,YAAAA,eAAe,CAAC7U,IAAI,EAAE2U,MAAM,CAAC,CAAA;AAC7B3U,YAAAA,IAAI,CAAC0D,WAAW,EAAE,CAAC6E,OAAO,CAAExK,MAAM,IAAK8W,eAAe,CAAC9W,MAAM,EAAE4W,MAAM,CAAC,CAAC,CAAA;AACvE,YAAA,IAAI1O,QAAQ,EAAE;AACbuO,cAAAA,aAAa,CAAClT,GAAG,CAAC2E,QAAQ,CAAC,GACxBuO,aAAa,CAAC7S,GAAG,CAACsE,QAAQ,CAAE,CAACzE,GAAG,CAACxB,IAAI,CAAC,GACtCwU,aAAa,CAAC3S,GAAG,CAACoE,QAAQ,EAAE,IAAIrE,GAAG,CAAC,CAAC5B,IAAI,CAAC,CAAC,CAAC,CAAA;AAChD,aAAA;AACD,WAAA;AACD,SAAA;QACA,KAAK,MAAM,CAACiG,QAAQ,EAAE6O,KAAK,CAAC,IAAIN,aAAa,EAAE;UAC9CO,cAAc,CAAC9O,QAAQ,EAAEtC,KAAK,CAACC,IAAI,CAACkR,KAAK,CAAC,CAAC,CAAA;AAC5C,SAAA;AACD,OAAA;AAEA;AACA,MAAA,IAAI,CAAChN,OAAO,CAACwL,WAAW,IAAIpI,aAAa,CAAC5J,GAAG,CAACoE,iBAAY,CAACyF,QAAQ,CAAC,EAAE;QACrE,KAAK,MAAMkB,IAAI,IAAInE,IAAI,CAACkE,UAAU,EAAE,EAAE;UACrC,KAAK,MAAMpM,IAAI,IAAIqM,IAAI,CAACC,cAAc,EAAE,EAAE;YACzC0I,YAAY,CAAChV,IAAI,CAAC,CAAA;AACnB,WAAA;AACD,SAAA;AACD,OAAA;AAEA;AACA;AACA;AACA;MACA,IAAIkL,aAAa,CAAC5J,GAAG,CAACoE,iBAAY,CAACwN,SAAS,CAAC,EAAE;QAC9C,KAAK,MAAM+B,IAAI,IAAI/M,IAAI,CAACE,cAAc,EAAE,EAAE;UACzC,KAAK,MAAM8M,OAAO,IAAID,IAAI,CAACE,YAAY,EAAE,EAAE;AAC1C,YAAA,IAAI,CAACD,OAAO,CAACE,aAAa,EAAE,EAAE;AAC7B/C,cAAAA,OAAO,CAACrE,OAAO,CAACkH,OAAO,CAAC,CAAA;AACzB,aAAA;AACD,WAAA;UACA,IAAI,CAACD,IAAI,CAACE,YAAY,EAAE,CAACjR,MAAM,EAAE;AAChC,YAAA,MAAMmR,QAAQ,GAAGJ,IAAI,CAACrI,YAAY,EAAE,CAAA;AACpC8G,YAAAA,SAAS,CAACuB,IAAI,EAAE5C,OAAO,CAAC,CAAA;YACxBgD,QAAQ,CAAC9M,OAAO,CAAEoE,OAAO,IAAK+G,SAAS,CAAC/G,OAAO,EAAE0F,OAAO,CAAC,CAAC,CAAA;AAC3D,WAAC,MAAM;AACN4C,YAAAA,IAAI,CAACrI,YAAY,EAAE,CAACrE,OAAO,CAAEoE,OAAO,IAAK+G,SAAS,CAAC/G,OAAO,EAAE0F,OAAO,CAAC,CAAC,CAAA;AACtE,WAAA;AACD,SAAA;AACD,OAAA;MAEA,IAAInH,aAAa,CAAC5J,GAAG,CAACoE,iBAAY,CAAC4F,QAAQ,CAAC,EAAE;AAC7CpD,QAAAA,IAAI,CAAC7B,aAAa,EAAE,CAACkC,OAAO,CAAEtC,QAAQ,IAAKyN,SAAS,CAACzN,QAAQ,EAAEoM,OAAO,CAAC,CAAC,CAAA;AACzE,OAAA;AAAC,MAAA,MAAAiD,MAAA,GAAA,YAAA;AAAA,QAAA,IAEGpK,aAAa,CAAC5J,GAAG,CAACoE,iBAAY,CAAC2F,OAAO,CAAC,EAAA;AAC1CnD,UAAAA,IAAI,CAACyG,YAAY,EAAE,CAACpG,OAAO,CAAEoI,OAAO,IAAK+C,SAAS,CAAC/C,OAAO,EAAE0B,OAAO,CAAC,CAAC,CAAA;AAAC,UAAA,MAAAkD,KAAA,GAAA,YAAA;YAAA,IAClE,CAACzN,OAAO,CAACyL,iBAAiB,EAAA;cAAA,OAAAtV,OAAA,CAAAC,OAAA,CACvBkU,kBAAkB,CAACvM,QAAQ,EAAEwM,OAAO,CAAC,CAAA,CAAA9T,IAAA,CAAA,YAAA,EAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAA,CAAA;UAAA,IAAAgX,KAAA,IAAAA,KAAA,CAAAhX,IAAA,EAAAgX,OAAAA,KAAA,CAAAhX,IAAA,CAAA,YAAA,EAAA,CAAA,CAAA;AAAA,SAAA;AAAA,OAAA,EAAA,CAAA;AAAA,MAAA,OAAAN,OAAA,CAAAC,OAAA,CAAAoX,MAAA,IAAAA,MAAA,CAAA/W,IAAA,GAAA+W,MAAA,CAAA/W,IAAA,CAAAkV,MAAA,CAAAA,GAAAA,MAAA,CAAA6B,MAAA,CAAA,CAAA,CAAA;AA4B9C,KAAC,QAAAtW,CAAA,EAAA;AAAA,MAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,KAAA;GAAC,CAAA,CAAA;AACH,CAAA;AAEA;;AAEG;AAEH,MAAMiV,cAAc,CAAA;EAAA/S,WAAA,GAAA;IAAA,IACHsU,CAAAA,QAAQ,GAA2B,EAAE,CAAA;AAAA,GAAA;AAErD3B,EAAAA,KAAKA,GAAA;IACJ,KAAK,MAAM4B,GAAG,IAAI,IAAI,CAACD,QAAQ,EAAE,OAAO,KAAK,CAAA;AAC7C,IAAA,OAAO,IAAI,CAAA;AACZ,GAAA;AAEAxG,EAAAA,OAAOA,GAAA;AACN,IAAA,OAAO5P,MAAM,CAAC4P,OAAO,CAAC,IAAI,CAACwG,QAAQ,CAAC,CAAA;AACrC,GAAA;AAEA;EACAxH,OAAOA,CAAC3I,IAAc,EAAA;AACrB,IAAA,IAAI,CAACmQ,QAAQ,CAACnQ,IAAI,CAACI,YAAY,CAAC,GAAG,IAAI,CAAC+P,QAAQ,CAACnQ,IAAI,CAACI,YAAY,CAAC,IAAI,CAAC,CAAA;AACxE,IAAA,IAAI,CAAC+P,QAAQ,CAACnQ,IAAI,CAACI,YAAY,CAAC,EAAE,CAAA;IAClCJ,IAAI,CAAC2I,OAAO,EAAE,CAAA;AACf,GAAA;AACA,CAAA;AAED;;;;;;AAMG;AAEH;AACA,SAAS0F,SAASA,CAACrO,IAAc,EAAEgN,OAAuB,EAAA;AACzD;AACA;EACA,MAAMqD,OAAO,GAAGrQ,IAAI,CAACC,WAAW,EAAE,CAACsE,MAAM,CAAE+L,CAAC,IAAK,EAAEA,CAAC,YAAYxG,SAAI,IAAIwG,CAAC,YAAYC,qBAAgB,CAAC,CAAC,CAAA;AACvG,EAAA,IAAI,CAACF,OAAO,CAACxR,MAAM,EAAE;AACpBmO,IAAAA,OAAO,CAACrE,OAAO,CAAC3I,IAAI,CAAC,CAAA;AACtB,GAAA;AACD,CAAA;AAEA;;;;AAIG;AACH,SAASkP,iBAAiBA,CAACzE,KAAsB,EAAErK,YAAoB,EAAE4M,OAAuB,EAAA;EAC/F,KAAK,MAAMnC,IAAI,IAAIJ,KAAK,CAAC+F,SAAS,EAAE,EAAE;AACrC,IAAA,MAAMrQ,MAAM,GAAG0K,IAAI,CAACiB,SAAS,EAAE,CAAA;AAC/B,IAAA,IAAI3L,MAAM,CAACC,YAAY,KAAKA,YAAY,EAAE;AACzCiO,MAAAA,SAAS,CAAClO,MAAM,EAAE6M,OAAO,CAAC,CAAA;AAC3B,KAAA;AACD,GAAA;AACD,CAAA;AAEA;AACA,SAAS6B,aAAaA,CAACpE,KAAsB,EAAEzK,IAAkB,EAAEgN,OAAuB,EAAA;AACzFhN,EAAAA,IAAI,CAAC8D,YAAY,EAAE,CAACZ,OAAO,CAAEa,KAAK,IAAK8K,aAAa,CAACpE,KAAK,EAAE1G,KAAK,EAAEiJ,OAAO,CAAC,CAAC,CAAA;EAE5E,IAAIhN,IAAI,YAAYwE,UAAK,EAAE,OAAA;AAE3B,EAAA,MAAMzE,MAAM,GAAG0K,KAAK,CAACG,eAAe,CAAC5K,IAAI,CAAC,CAACE,IAAI,CAAEvG,CAAC,IAAI;IACrD,MAAM8W,KAAK,GAAG9W,CAAC,CAACmS,SAAS,EAAE,CAAC1L,YAAY,CAAA;AACxC,IAAA,OAAOqQ,KAAK,KAAKpQ,iBAAY,CAACC,IAAI,IAAImQ,KAAK,KAAKpQ,iBAAY,CAACqQ,KAAK,IAAID,KAAK,KAAKpQ,iBAAY,CAACoN,IAAI,CAAA;AAClG,GAAC,CAAC,CAAA;EACF,MAAMkD,OAAO,GAAGlG,KAAK,CAAC3G,YAAY,CAAC9D,IAAI,CAAC,CAACnB,MAAM,KAAK,CAAC,CAAA;AACrD,EAAA,IAAI8R,OAAO,IAAI,CAAC5Q,MAAM,EAAE;AACvBiN,IAAAA,OAAO,CAACrE,OAAO,CAAC3I,IAAI,CAAC,CAAA;AACtB,GAAA;AACD,CAAA;AAEA,SAASwP,eAAeA,CAAC7U,IAAiC,EAAE2U,MAAgB,EAAA;AAC3E,EAAA,KAAK,MAAM/N,QAAQ,IAAI+N,MAAM,EAAE;AAC9B3U,IAAAA,IAAI,CAACiW,YAAY,CAACrP,QAAQ,EAAE,IAAI,CAAC,CAAA;AAClC,GAAA;AACD,CAAA;AAEA,SAASoO,YAAYA,CAAChV,IAAe,EAAA;AACpC,EAAA,MAAMC,OAAO,GAAGD,IAAI,CAACE,UAAU,EAAE,CAAA;EACjC,MAAMqD,SAAS,GAAGvD,IAAI,CAACwD,cAAc,EAAE,CAAC,CAAC,CAAC,CAAA;AAC1C,EAAA,IAAIvD,OAAO,IAAIsD,SAAS,IAAItD,OAAO,CAACQ,QAAQ,EAAE,KAAK8C,SAAS,CAAC9C,QAAQ,EAAE,EAAE;AACxET,IAAAA,IAAI,CAACkW,UAAU,CAAC,IAAI,CAAC,CAAA;AACtB,GAAA;AACD,CAAA;AAEA;;AAEG;AACH,SAAStB,mBAAmBA,CAAC5U,IAAiC,EAAEyU,QAAqB,EAAA;EACpF,MAAME,MAAM,GAAG,EAAE,CAAA;EACjB,KAAK,MAAM/N,QAAQ,IAAI5G,IAAI,CAACyG,aAAa,EAAE,EAAE;IAC5C,IAAIG,QAAQ,KAAK,SAAS,IAAI,CAAC6N,QAAQ,CAACnT,GAAG,CAACsF,QAAQ,CAAC,EAAE;AACtD+N,MAAAA,MAAM,CAAClR,IAAI,CAACmD,QAAQ,CAAC,CAAA;AACtB,KAAC,MAAM,IAAIA,QAAQ,CAACuP,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC1B,QAAQ,CAACnT,GAAG,CAACsF,QAAQ,CAAC,EAAE;AACvE+N,MAAAA,MAAM,CAAClR,IAAI,CAACmD,QAAQ,CAAC,CAAA;AACtB,KAAC,MAAM,IAAIA,QAAQ,CAACuP,UAAU,CAAC,QAAQ,CAAC,IAAIvP,QAAQ,KAAK,SAAS,EAAE;AACnE+N,MAAAA,MAAM,CAAClR,IAAI,CAACmD,QAAQ,CAAC,CAAA;AACtB,KAAA;AACD,GAAA;AACA,EAAA,OAAO+N,MAAM,CAAA;AACd,CAAA;AAEA;;;AAGG;AACH,SAASD,qBAAqBA,CAC7B7O,QAAkB,EAClBI,QAA6C,EAC7CmQ,SAAA,EAA6B;AAAA,EAAA,IAA7BA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,SAAA,GAAY,IAAIxU,GAAG,EAAU,CAAA;AAAA,GAAA;AAE7B,EAAA,IAAI,CAACqE,QAAQ,EAAE,OAAOmQ,SAAS,CAAA;AAE/B,EAAA,MAAMtG,KAAK,GAAGjK,QAAQ,CAACG,QAAQ,EAAE,CAAA;AAEjC,EAAA,MAAM4K,KAAK,GAAGd,KAAK,CAACU,cAAc,CAACvK,QAAQ,CAAC,CAAA;AAC5C,EAAA,MAAMoQ,YAAY,GAAG,IAAIzU,GAAG,EAAU,CAAA;AAEtC,EAAA,KAAK,MAAMsO,IAAI,IAAIU,KAAK,EAAE;AACzB,IAAA,IAAIV,IAAI,CAACI,QAAQ,EAAE,YAAYkB,YAAO,EAAE;MACvC6E,YAAY,CAAC7U,GAAG,CAAC0O,IAAI,CAAC1B,OAAO,EAAE,CAAC,CAAA;AACjC,KAAA;AACD,GAAA;AAEA,EAAA,KAAK,MAAM0B,IAAI,IAAIU,KAAK,EAAE;AACzB,IAAA,MAAMzR,IAAI,GAAG+Q,IAAI,CAAC1B,OAAO,EAAE,CAAA;AAC3B,IAAA,MAAMpF,KAAK,GAAG8G,IAAI,CAACI,QAAQ,EAAE,CAAA;IAE7B,IAAIlH,KAAK,YAAYgI,gBAAW,EAAE;AACjC,MAAA,IAAIiF,YAAY,CAAC/U,GAAG,CAACnC,IAAI,CAAC0D,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE;QAChDuT,SAAS,CAAC5U,GAAG,CAAa,CAAA4H,SAAAA,EAAAA,KAAK,CAACkN,WAAW,EAAI,CAAA,CAAA,CAAC,CAAA;AACjD,OAAA;AACD,KAAA;IAEA,IAAIlN,KAAK,YAAYoI,YAAO,IAAIrS,IAAI,CAACoX,KAAK,CAAC,gBAAgB,CAAC,EAAE;AAC7DH,MAAAA,SAAS,CAAC5U,GAAG,CAAC,SAAS,CAAC,CAAA;AACzB,KAAA;IAEA,IAAI4H,KAAK,YAAYqI,sBAAiB,EAAE;AACvCiD,MAAAA,qBAAqB,CAAC7O,QAAQ,EAAEuD,KAAK,EAAEgN,SAAS,CAAC,CAAA;AAClD,KAAA;AAEA;AACD,GAAA;;AAEA,EAAA,OAAOA,SAAS,CAAA;AACjB,CAAA;AAEA;;;;;;;;;AASG;AACH,SAASrB,cAAcA,CAAC9O,QAAkB,EAAE6O,KAAkB,EAAA;AAC7D;AACA,EAAA,MAAM0B,eAAe,GAAGnF,yBAAyB,CAACpL,QAAQ,CAAC,CAAA;AAC3D,EAAA,MAAMwQ,WAAW,GAAG,IAAI7U,GAAG,CAAC4U,eAAe,CAAC7P,GAAG,CAAEqN,IAAiB,IAAKA,IAAI,CAACsC,WAAW,EAAE,CAAC,CAAC,CAAA;EAC3F,MAAMI,YAAY,GAAG/S,KAAK,CAACC,IAAI,CAAC6S,WAAW,CAAC,CAAC/P,IAAI,EAAE,CAAA;EACnD,MAAMiQ,WAAW,GAAG,IAAIvV,GAAG,CAACsV,YAAY,CAAC/P,GAAG,CAAC,CAACiQ,QAAQ,EAAEnO,KAAK,KAAK,CAACmO,QAAQ,EAAEnO,KAAK,CAAC,CAAC,CAAC,CAAA;EACrF,MAAMoO,WAAW,GAAG,IAAIzV,GAAG,CAACsV,YAAY,CAAC/P,GAAG,CAAC,CAACiQ,QAAQ,EAAEnO,KAAK,KAAK,CAAa,CAAAmO,SAAAA,EAAAA,QAAU,CAAA,CAAA,EAAc,YAAAnO,KAAO,CAAA,CAAA,CAAC,CAAC,CAAC,CAAA;AAEjH;AACA,EAAA,KAAK,MAAMqO,WAAW,IAAIN,eAAe,EAAE;AAC1C,IAAA,MAAMI,QAAQ,GAAGE,WAAW,CAACR,WAAW,EAAE,CAAA;IAC1CQ,WAAW,CAACC,WAAW,CAACJ,WAAW,CAAChV,GAAG,CAACiV,QAAQ,CAAE,CAAC,CAAA;AACpD,GAAA;AAEA;AACA,EAAA,KAAK,MAAM5W,IAAI,IAAI8U,KAAK,EAAE;IACzB,MAAMsB,SAAS,GAAGpW,IAAI,CACpByG,aAAa,EAAE,CACfmD,MAAM,CAAEhD,QAAQ,IAAKA,QAAQ,CAACuP,UAAU,CAAC,WAAW,CAAC,CAAC,CACtDzP,IAAI,EAAE,CAAA;AACRsQ,IAAAA,UAAU,CAAChX,IAAI,EAAEoW,SAAS,CAAC,CAAA;AAC3BpW,IAAAA,IAAI,CAAC0D,WAAW,EAAE,CAAC6E,OAAO,CAAExK,MAAM,IAAKiZ,UAAU,CAACjZ,MAAM,EAAEqY,SAAS,CAAC,CAAC,CAAA;AACtE,GAAA;AAEA,EAAA,SAASY,UAAUA,CAAChX,IAAiC,EAAEiX,YAAsB,EAAA;AAC5E,IAAA,KAAK,MAAMC,WAAW,IAAID,YAAY,EAAE;AACvC,MAAA,MAAME,EAAE,GAAGnX,IAAI,CAACI,YAAY,CAAC8W,WAAW,CAAC,CAAA;MACzC,IAAI,CAACC,EAAE,EAAE,SAAA;AAET,MAAA,MAAMC,WAAW,GAAGP,WAAW,CAAClV,GAAG,CAACuV,WAAW,CAAE,CAAA;MACjD,IAAIE,WAAW,KAAKF,WAAW,EAAE,SAAA;AAEjClX,MAAAA,IAAI,CAACiW,YAAY,CAACmB,WAAW,EAAED,EAAE,CAAC,CAAA;AAClCnX,MAAAA,IAAI,CAACiW,YAAY,CAACiB,WAAW,EAAE,IAAI,CAAC,CAAA;AACrC,KAAA;AACD,GAAA;AACD,CAAA;AAwCA,SAASvE,mBAAmBA,CAC3B1M,QAAsC,EACtCqM,MAAY,EACZ+E,IAAY,EACZrP,MAAe,EAAA;EAEf,IAAI/B,QAAQ,YAAYqR,aAAQ,EAAE;AACjC,IAAA,QAAQD,IAAI;AACX,MAAA,KAAK,kBAAkB;AACtBpR,QAAAA,QAAQ,CAACsR,kBAAkB,CAAC/M,GAAG,CAAC8H,MAAM,EAAEA,MAAM,EAAErM,QAAQ,CAACuR,kBAAkB,EAAE,CAAS,CAAC,CAAA;AACvF,QAAA,OAAO,IAAI,CAAA;AACZ,MAAA,KAAK,iBAAiB;AACrBvR,QAAAA,QAAQ,CAACwR,iBAAiB,CACzBC,KAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEpF,MAAM,CAAC1N,KAAK,CAAC,CAAC,EAAE,CAAC,CAAS,EAAEqB,QAAQ,CAAC0R,iBAAiB,EAAE,CAAS,CACpF,CAAA;AACD,QAAA,OAAO,IAAI,CAAA;AACZ,MAAA,KAAK,kBAAkB;AACtB,QAAA,OAAOvV,IAAI,CAACe,GAAG,CAACmP,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAIH,GAAG,CAAA;AACtC,MAAA,KAAK,0BAA0B;AAC9BlM,QAAAA,QAAQ,CAAC2R,kBAAkB,CAACtF,MAAM,CAAC,CAAC,CAAC,GAAGrM,QAAQ,CAAC4R,kBAAkB,EAAE,CAAC,CAAA;AACtE5R,QAAAA,QAAQ,CAAC6R,iBAAiB,CAACxF,MAAM,CAAC,CAAC,CAAC,GAAGrM,QAAQ,CAAC8R,iBAAiB,EAAE,CAAC,CAAA;AACpE,QAAA,OAAO,IAAI,CAAA;AACZ,MAAA,KAAK,eAAe;QACnB,OAAO9F,GAAG,CAACC,GAAG,CAAC7H,MAAM,EAAE,EAAEiI,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAIH,GAAG,CAAA;AAC5D,KAAA;AACD,GAAA;EAEAnK,MAAM,CAACgQ,IAAI,CAAI,CAAAvQ,EAAAA,MAA+B,2BAAA4P,IAAyB,CAAA,kBAAA,EAAAA,IAAyB,CAAA,mBAAA,CAAA,CAAC,CAAA;AACjG,EAAA,OAAO,KAAK,CAAA;AACb;;ACteA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAM5P,MAAI,GAAG,MAAM,CAAA;AAEnB,MAAMwQ,SAAS,GAAG;AACjBC,EAAAA,OAAO,EAAE,MAAM;AACfC,EAAAA,QAAQ,EAAE,MAAM;AAAE;AAClBC,EAAAA,KAAK,EAAE,IAAI;AAAE;AACbC,EAAAA,MAAM,EAAE,IAAI;AAAE;AACdC,EAAAA,MAAM,EAAE,GAAG;AAAE;EACbC,OAAO,EAAE,IAAI;CACb,CAAA;;AAcM,MAAMC,aAAa,GAA0B;EACnDC,SAAS,EAAER,SAAS,CAACC,OAAO;EAC5BQ,eAAe,EAAET,SAAS,CAACI,MAAM;AACjCM,EAAAA,SAAS,EAAE,IAAI;EACfC,UAAU,EAAE,KAAK;EACjB;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BG;AACa,SAAAC,IAAIA,CAAChR,QAAA,EAAqC;AAAA,EAAA,IAArCA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,QAAA,GAAwB2Q,aAAa,CAAA;AAAA,GAAA;AACzD,EAAA,MAAM1Q,OAAO,GAAGgR,iBAAiB,CAACjR,QAAQ,CAAC,CAAA;AAE3C,EAAA,OAAO3I,eAAe,CAACuI,MAAI,EAAA,UAASM,GAAa,EAAA;IAAA,IAAmB;AAAA,MAAA,SAAAuN,MAAA,GAAA;QAAA,OAAArX,OAAA,CAAAC,OAAA,CAyB7D6J,GAAG,CAACgR,SAAS,CAACvN,KAAK,CAAC;AAAEN,UAAAA,aAAa,EAAE,CAACxF,iBAAY,CAACyF,QAAQ,CAAA;SAAG,CAAC,CAAC,CAAA,CAAA5M,IAAA,CAAA,YAAA;AAEtEyJ,UAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AAAC,SAAA,CAAA,CAAA;AAAA,OAAA;AA1BnC,MAAA,MAAMO,MAAM,GAAGD,GAAG,CAACE,SAAS,EAAE,CAAA;AAE9B,MAAA,KAAK,MAAMoE,IAAI,IAAItE,GAAG,CAAC3B,OAAO,EAAE,CAACgG,UAAU,EAAE,EAAE;QAC9C,KAAK,MAAMpM,IAAI,IAAIqM,IAAI,CAACC,cAAc,EAAE,EAAE;AACzC0M,UAAAA,aAAa,CAAChZ,IAAI,EAAE8H,OAAO,CAAC,CAAA;UAE5B,IAAImR,WAAW,CAACjZ,IAAI,CAAC,EAAEA,IAAI,CAACgO,OAAO,EAAE,CAAA;AACtC,SAAA;AAEA,QAAA,IAAI3B,IAAI,CAACC,cAAc,EAAE,CAACpI,MAAM,KAAK,CAAC,EAAEmI,IAAI,CAAC2B,OAAO,EAAE,CAAA;AACvD,OAAA;AAAC,MAAA,MAAAuH,KAAA,GAAA,YAAA;AAAA,QAAA,IAEGzN,OAAO,CAAC2Q,SAAS,GAAG,CAAC,EAAA;AACxB;UAAA,OAAAxa,OAAA,CAAAC,OAAA,CACM6J,GAAG,CAACgR,SAAS,CAClBvF,KAAK,CAAC;YACLtI,aAAa,EAAE,CAACxF,iBAAY,CAACyF,QAAQ,EAAEzF,iBAAY,CAACoN,IAAI,CAAC;AACzDO,YAAAA,cAAc,EAAE,IAAI;AACpBC,YAAAA,WAAW,EAAE,IAAI;AACjBF,YAAAA,UAAU,EAAE,KAAA;WACZ,CAAC,CACF,CAAA,CAAA7U,IAAA,CAAA,YAAA,EAAA,CAAA,CAAA;AAAA,SAAA;AAAA,OAAA,EAAA,CAAA;AAAA,MAAA,OAAAN,OAAA,CAAAC,OAAA,CAAAqX,KAAA,IAAAA,KAAA,CAAAhX,IAAA,GAAAgX,KAAA,CAAAhX,IAAA,CAAA+W,MAAA,CAAAA,GAAAA,MAAA,CAAAC,KAAA,CAAA,CAAA,CAAA;AAMH,KAAC,QAAAvW,CAAA,EAAA;AAAA,MAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,KAAA;GAAC,CAAA,CAAA;AACH,CAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBG;SACaga,aAAaA,CAAChZ,IAAe,EAAE6H,UAAqC;AAAA,EAAA,IAArCA;AAAAA,IAAAA,WAAwB2Q,aAAa,CAAA;AAAA,GAAA;AACnF,EAAA,MAAM1I,KAAK,GAAG9P,IAAI,CAACgG,QAAQ,EAAE,CAAA;AAC7B,EAAA,MAAMH,QAAQ,GAAGC,aAAQ,CAACC,SAAS,CAAC+J,KAAK,CAAE,CAAA;AAC3C,EAAA,MAAMhI,OAAO,GAAGgR,iBAAiB,CAACjR,QAAQ,CAAC,CAAA;EAE3C,IAAI7H,IAAI,CAACE,UAAU,EAAE,IAAI,CAAC2H,QAAQ,CAAC8Q,SAAS,EAAE,OAAA;EAC9C,IAAI3Y,IAAI,CAACK,OAAO,EAAE,KAAKC,cAAS,CAACC,IAAI,CAACC,MAAM,EAAE,OAAA;AAE9C,EAAA,IAAIqH,QAAQ,CAAC4Q,SAAS,KAAK,CAAC,EAAE;AAC7BS,IAAAA,eAAe,CAACrT,QAAQ,EAAE7F,IAAI,CAAC,CAAA;AAChC,GAAC,MAAM;AACNmZ,IAAAA,cAAc,CAACtT,QAAQ,EAAE7F,IAAI,EAAE8H,OAAO,CAAC,CAAA;AACxC,GAAA;AACD,CAAA;AAEA;AACA,SAASoR,eAAeA,CAACnR,GAAa,EAAE/H,IAAe,EAAA;AACtD;AACA,EAAA,IAAIA,IAAI,CAACE,UAAU,EAAE,EAAE,OAAA;EAEvB,MAAMkZ,IAAI,GAAGpZ,IAAI,CAACwD,cAAc,EAAE,CAAC,CAAC,CAAC,CAAA;AACrC,EAAA,MAAM6V,WAAW,GAAGD,IAAI,CAAC3Y,QAAQ,EAAE,CAAA;AACnC,EAAA,MAAMmT,MAAM,GAAGwF,IAAI,CAACE,SAAS,EAAE,CAAA;AAC/B,EAAA,MAAMrZ,OAAO,GAAG8H,GAAG,CACjBwR,cAAc,EAAE,CAChBC,SAAS,CAAC5F,MAAM,CAAC,CACjB6F,OAAO,CAACC,aAAQ,CAACC,IAAI,CAACC,MAAM,CAAC,CAC7B/U,QAAQ,CAACC,aAAa,CAACuU,WAAW,CAAC,CAAC,CAAA;AACtCrZ,EAAAA,IAAI,CAACkW,UAAU,CAACjW,OAAO,CAAC,CAAA;AACzB,CAAA;AAEA;AACA,SAASkZ,cAAcA,CAACpR,GAAa,EAAE/H,IAAe,EAAE8H,OAA8B,EAAA;AACrF,EAAA,MAAME,MAAM,GAAGD,GAAG,CAACE,SAAS,EAAE,CAAA;AAE9B,EAAA,MAAM4R,WAAW,GAAG7Z,IAAI,CAACI,YAAY,CAAC,UAAU,CAAE,CAAA;EAClD,MAAM0Z,UAAU,GAAG9Z,IAAI,CAACE,UAAU,EAAE,IAAI6H,GAAG,CAACwR,cAAc,EAAE,CAAC1U,QAAQ,CAACC,aAAa,CAAC+U,WAAW,CAACpZ,QAAQ,EAAE,CAAC,CAAC,CAAA;AAC5G,EAAA,MAAMsZ,aAAa,GAAG,IAAI5U,WAAW,CAAC,IAAIvD,GAAG,CAACkY,UAAU,CAACpV,QAAQ,EAAG,CAAC,CAAC,CAACgC,IAAI,EAAE,CAAA;AAE7E;EAEA,MAAMsT,kBAAkB,GAA2B,EAAE,CAAA;EACrD,KAAK,MAAMpT,QAAQ,IAAI5G,IAAI,CAACyG,aAAa,EAAE,EAAE;AAC5C,IAAA,MAAMlD,SAAS,GAAGvD,IAAI,CAACI,YAAY,CAACwG,QAAQ,CAAE,CAAA;IAC9CoT,kBAAkB,CAACpT,QAAQ,CAAC,GAAGqT,qBAAqB,CAACrT,QAAQ,EAAErD,SAAS,EAAEuE,OAAO,CAAC,CAAA;AACnF,GAAA;EAEAE,MAAM,CAACU,KAAK,CAAC,CAAGjB,EAAAA,MAAI,CAA2ByS,wBAAAA,EAAAA,QAAQ,CAACF,kBAAkB,CAAG,CAAA,CAAA,CAAC,CAAA;AAE9E;EAEA,MAAMG,IAAI,GAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;EAC5B,MAAMC,IAAI,GAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;EAE5B,MAAMC,IAAI,GAAG,EAA8B,CAAA;AAC3C,EAAA,MAAMC,QAAQ,GAAGN,kBAAkB,CAACO,QAAQ,CAAA;AAE5C,EAAA,KAAK,IAAI9b,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsb,aAAa,CAAC7V,MAAM,EAAEzF,CAAC,EAAE,EAAE;IAC9Cob,WAAW,CAACW,UAAU,CAACT,aAAa,CAACtb,CAAC,CAAC,EAAE0b,IAAI,CAAC,CAAA;AAC9C,IAAA,MAAM1E,GAAG,GAAGgF,UAAU,CAACN,IAAI,EAAEG,QAAQ,CAAC,CAAA;IACtCD,IAAI,CAAC5E,GAAG,CAAC,GAAG4E,IAAI,CAAC5E,GAAG,CAAC,IAAI,EAAE,CAAA;IAC3B4E,IAAI,CAAC5E,GAAG,CAAC,CAAChS,IAAI,CAACsW,aAAa,CAACtb,CAAC,CAAC,CAAC,CAAA;AACjC,GAAA;AAEA;EAEA,MAAMic,WAAW,GAAGX,aAAa,CAACA,aAAa,CAAC7V,MAAM,GAAG,CAAC,CAAC,CAAA;EAC3D,MAAMyW,OAAO,GAAG7V,aAAa,CAAC4V,WAAW,GAAG,CAAC,CAAC,CAAC;AAC/C,EAAA,MAAME,QAAQ,GAAG,IAAIjX,KAAK,CAACoW,aAAa,CAAC7V,MAAM,CAAC,CAAC2W,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAE1D,EAAA,MAAMC,cAAc,GAAGjB,WAAW,CAACpZ,QAAQ,EAAE,CAAA;EAC7C,IAAIsa,cAAc,GAAG,CAAC,CAAA;AAEtB,EAAA,KAAK,IAAItc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsb,aAAa,CAAC7V,MAAM,EAAEzF,CAAC,EAAE,EAAE;AAC9C,IAAA,MAAMsE,CAAC,GAAGgX,aAAa,CAACtb,CAAC,CAAC,CAAA;AAC1Bob,IAAAA,WAAW,CAACW,UAAU,CAACzX,CAAC,EAAEoX,IAAI,CAAC,CAAA;IAE/B,MAAMa,QAAQ,GAAGlT,OAAO,CAAC8Q,UAAU,GAAGqC,uBAAuB,CAACd,IAAI,EAAEG,QAAQ,CAAC,GAAG,CAACG,UAAU,CAACN,IAAI,EAAEG,QAAQ,CAAC,CAAC,CAAA;AAE5GY,IAAAA,KAAK,EAAE,KAAK,MAAMC,OAAO,IAAIH,QAAQ,EAAE;MACtC,IAAI,CAACX,IAAI,CAACc,OAAO,CAAC,EAAE,SAASD,KAAK,CAAC;MAEnCE,SAAS,EAAE,KAAK,MAAMzc,CAAC,IAAI0b,IAAI,CAACc,OAAO,CAAC,EAAE;AACzC,QAAA,MAAMnY,CAAC,GAAG2X,OAAO,CAAChc,CAAC,CAAC,CAAA;AAEpB;AACA,QAAA,IAAIoE,CAAC,IAAIC,CAAC,EAAE,SAASoY,SAAS,CAAA;AAE9BvB,QAAAA,WAAW,CAACW,UAAU,CAACxX,CAAC,EAAEoX,IAAI,CAAC,CAAA;AAE/B;QACA,MAAMiB,WAAW,GAAGrb,IAAI,CAACyG,aAAa,EAAE,CAAC6U,KAAK,CAAE1U,QAAQ,IAAI;AAC3D,UAAA,MAAMrD,SAAS,GAAGvD,IAAI,CAACI,YAAY,CAACwG,QAAQ,CAAE,CAAA;AAC9C,UAAA,MAAM6R,SAAS,GAAGuB,kBAAkB,CAACpT,QAAQ,CAAC,CAAA;UAC9C,OAAO2U,iBAAiB,CAAChY,SAAS,EAAER,CAAC,EAAEC,CAAC,EAAEyV,SAAmB,CAAC,CAAA;AAC/D,SAAC,CAAC,CAAA;QACF,MAAM+C,aAAa,GAAGxb,IAAI,CAAC0D,WAAW,EAAE,CAAC4X,KAAK,CAAEvd,MAAM,IAAI;UACzD,OAAOA,MAAM,CAAC0I,aAAa,EAAE,CAAC6U,KAAK,CAAE1U,QAAQ,IAAI;AAChD,YAAA,MAAMrD,SAAS,GAAGxF,MAAM,CAACqC,YAAY,CAACwG,QAAQ,CAAE,CAAA;AAChD,YAAA,MAAM6R,SAAS,GAAGuB,kBAAkB,CAACpT,QAAQ,CAAC,CAAA;YAC9C,OAAO2U,iBAAiB,CAAChY,SAAS,EAAER,CAAC,EAAEC,CAAC,EAAEyV,SAAmB,CAAC,CAAA;AAC/D,WAAC,CAAC,CAAA;AACH,SAAC,CAAC,CAAA;QAEF,IAAI4C,WAAW,IAAIG,aAAa,EAAE;AACjCb,UAAAA,OAAO,CAAC5X,CAAC,CAAC,GAAGC,CAAC,CAAA;AACd,UAAA,MAAMkY,KAAK,CAAA;AACZ,SAAA;AACD,OAAA;AACD,KAAA;AAEA;AACA;AACA;AACA,IAAA,IAAIP,OAAO,CAAC5X,CAAC,CAAC,KAAKA,CAAC,EAAE;AACrB6X,MAAAA,QAAQ,CAAC7X,CAAC,CAAC,GAAGgY,cAAc,EAAE,CAAA;AAC/B,KAAC,MAAM;MACNH,QAAQ,CAAC7X,CAAC,CAAC,GAAG6X,QAAQ,CAACD,OAAO,CAAC5X,CAAC,CAAC,CAAC,CAAA;AACnC,KAAA;AACD,GAAA;AAEAiF,EAAAA,MAAM,CAACU,KAAK,CAAC,CAAA,EAAGjB,MAAS,CAAA,EAAA,EAAArE,aAAa,CAAC0X,cAAc,EAAEC,cAAc,CAAC,YAAY,CAAC,CAAA;AAEnF;EAEA,MAAMU,eAAe,GAAG3B,UAAU,CAACrZ,QAAQ,EAAE,CAAC;EAC9C,MAAMsK,eAAe,GAAGjG,aAAa,CAAC2W,eAAe,EAAE1B,aAAa,CAAC7V,MAAM,CAAC,CAAA;EAC5E,KAAK,IAAIzF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgd,eAAe,EAAEhd,CAAC,EAAE,EAAE;AACzCsM,IAAAA,eAAe,CAACtM,CAAC,CAAC,GAAGmc,QAAQ,CAACd,UAAU,CAACjP,SAAS,CAACpM,CAAC,CAAC,CAAC,CAAA;AACvD,GAAA;AACAuB,EAAAA,IAAI,CAACkW,UAAU,CAAC4D,UAAU,CAAC4B,KAAK,EAAE,CAAC7W,QAAQ,CAACkG,eAAe,CAAC,CAAC,CAAA;AAC7D,EAAA,IAAI+O,UAAU,CAACxU,WAAW,EAAE,CAACpB,MAAM,KAAK,CAAC,EAAE4V,UAAU,CAAC9L,OAAO,EAAE,CAAA;AAE/D;EAEA,KAAK,MAAM2N,OAAO,IAAI3b,IAAI,CAACwD,cAAc,EAAE,EAAE;IAC5CoY,cAAc,CAAC5b,IAAI,EAAE2b,OAAO,EAAEf,QAAQ,EAAEG,cAAc,CAAC,CAAA;AACxD,GAAA;EACA,KAAK,MAAMhd,MAAM,IAAIiC,IAAI,CAAC0D,WAAW,EAAE,EAAE;IACxC,KAAK,MAAMiY,OAAO,IAAI5d,MAAM,CAACyF,cAAc,EAAE,EAAE;MAC9CoY,cAAc,CAAC7d,MAAM,EAAE4d,OAAO,EAAEf,QAAQ,EAAEG,cAAc,CAAC,CAAA;AAC1D,KAAA;AACD,GAAA;AAEA;EAEAtQ,cAAc,CAACzK,IAAI,CAAC,CAAA;AACrB,CAAA;AAEA;AACA,SAAS6b,iBAAiBA,CAAuB5W,KAAQ,EAAEf,MAAc,EAAA;AACxE,EAAA,MAAM4X,SAAS,GAAG7W,KAAK,CAAC/D,WAAwC,CAAA;AAChE,EAAA,OAAO,IAAI4a,SAAS,CAAC5X,MAAM,CAAC,CAAA;AAC7B,CAAA;AAEA;AACA,SAAS0X,cAAcA,CACtBpW,MAAmC,EACnCmW,OAAiB,EACjBI,OAAiB,EACjB1X,QAAgB,EAAA;AAEhB,EAAA,MAAM2X,YAAY,GAAGH,iBAAiB,CAACF,OAAO,CAACjX,QAAQ,EAAG,EAAEL,QAAQ,GAAGsX,OAAO,CAACpX,cAAc,EAAE,CAAC,CAAA;EAChG,MAAM0X,OAAO,GAAGN,OAAO,CAACD,KAAK,EAAE,CAAC7W,QAAQ,CAACmX,YAAY,CAAC,CAAA;AACtD,EAAA,MAAME,IAAI,GAAG,IAAIC,UAAU,CAAC9X,QAAQ,CAAC,CAAA;AAErC,EAAA,KAAK,IAAI5F,CAAC,GAAG,CAAC,EAAE2d,EAAE,GAAG,EAAc,EAAE3d,CAAC,GAAGsd,OAAO,CAAC7X,MAAM,EAAEzF,CAAC,EAAE,EAAE;IAC7D,IAAI,CAACyd,IAAI,CAACH,OAAO,CAACtd,CAAC,CAAC,CAAC,EAAE;AACtBwd,MAAAA,OAAO,CAACI,UAAU,CAACN,OAAO,CAACtd,CAAC,CAAC,EAAEkd,OAAO,CAACnB,UAAU,CAAC/b,CAAC,EAAE2d,EAAE,CAAC,CAAC,CAAA;AACzDF,MAAAA,IAAI,CAACH,OAAO,CAACtd,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;AACrB,KAAA;AACD,GAAA;AAEA+G,EAAAA,MAAM,CAACxB,IAAI,CAAC2X,OAAO,EAAEM,OAAO,CAAC,CAAA;AAE7B;AACA,EAAA,IAAIN,OAAO,CAACrW,WAAW,EAAE,CAACpB,MAAM,KAAK,CAAC,EAAEyX,OAAO,CAAC3N,OAAO,EAAE,CAAA;AAC1D,CAAA;AAEA,MAAMsO,EAAE,GAAG,EAAc,CAAA;AACzB,MAAMC,EAAE,GAAG,EAAc,CAAA;AAEzB;AACA,SAAStC,qBAAqBA,CAACrT,QAAgB,EAAErD,SAAmB,EAAEuE,OAA8B,EAAA;AACnG;AACA;EACA,IAAIlB,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,SAAS,EAAE,OAAOkB,OAAO,CAAC4Q,eAAe,CAAA;EACnF,IAAI9R,QAAQ,CAACuP,UAAU,CAAC,QAAQ,CAAC,EAAE,OAAO8B,SAAS,CAACG,KAAK,CAAA;EACzD,IAAIxR,QAAQ,CAACuP,UAAU,CAAC,WAAW,CAAC,EAAE,OAAO8B,SAAS,CAACE,QAAQ,CAAA;EAC/D,IAAIvR,QAAQ,CAACuP,UAAU,CAAC,SAAS,CAAC,EAAE,OAAO8B,SAAS,CAACK,MAAM,CAAA;EAC3D,IAAI1R,QAAQ,CAACuP,UAAU,CAAC,UAAU,CAAC,EAAE,OAAO8B,SAAS,CAACM,OAAO,CAAA;AAE7D+D,EAAAA,EAAE,CAACpY,MAAM,GAAGqY,EAAE,CAACrY,MAAM,GAAG,CAAC,CAAA;AACzBX,EAAAA,SAAS,CAACiZ,gBAAgB,CAACF,EAAE,CAAC,CAAA;AAC9B/Y,EAAAA,SAAS,CAACkZ,gBAAgB,CAACF,EAAE,CAAC,CAAA;AAC9B,EAAA,MAAMG,IAAI,GAAGH,EAAE,CAAC5V,GAAG,CAAC,CAACgW,EAAE,EAAEle,CAAC,KAAKke,EAAE,GAAGL,EAAE,CAAC7d,CAAC,CAAC,CAAC,CAAA;EAC1C,MAAMme,KAAK,GAAGxa,IAAI,CAACyG,GAAG,CAAC,GAAG6T,IAAI,CAAC,CAAA;AAC/B,EAAA,OAAO5U,OAAO,CAAC2Q,SAAS,GAAGmE,KAAK,CAAA;AACjC,CAAA;AAEA;AACA,SAASrB,iBAAiBA,CAAChY,SAAmB,EAAER,CAAS,EAAEC,CAAS,EAAEyV,SAAiB,EAAEoE,SAAiB,EAAA;AACzGtZ,EAAAA,SAAS,CAACiX,UAAU,CAACzX,CAAC,EAAEuZ,EAAE,CAAC,CAAA;AAC3B/Y,EAAAA,SAAS,CAACiX,UAAU,CAACxX,CAAC,EAAEuZ,EAAE,CAAC,CAAA;AAC3B,EAAA,KAAK,IAAI9d,CAAC,GAAG,CAAC,EAAEmM,EAAE,GAAGrH,SAAS,CAACgB,cAAc,EAAE,EAAE9F,CAAC,GAAGmM,EAAE,EAAEnM,CAAC,EAAE,EAAE;AAC7D,IAAA,IAAI2D,IAAI,CAACe,GAAG,CAACmZ,EAAE,CAAC7d,CAAC,CAAC,GAAG8d,EAAE,CAAC9d,CAAC,CAAC,CAAC,GAAGga,SAAS,EAAE;AACxC,MAAA,OAAO,KAAK,CAAA;AACb,KAAA;AACD,GAAA;AACA,EAAA,OAAO,IAAI,CAAA;AACZ,CAAA;AAEA,SAASyB,QAAQA,CAAC4C,EAA2B,EAAA;EAC5C,OAAO1d,MAAM,CAAC4P,OAAO,CAAC8N,EAAE,CAAC,CACvBnW,GAAG,CAACsI,IAAA,IAAA;AAAA,IAAA,IAAC,CAAC1N,CAAC,EAAEE,CAAC,CAAC,GAAAwN,IAAA,CAAA;AAAA,IAAA,OAAQ,CAAA1N,EAAAA,CAAK,CAAAE,CAAAA,EAAAA,EAAG,CAAA,CAAA;AAAA,GAAA,CAAC,CAC5BsF,IAAI,CAAC,IAAI,CAAC,CAAA;AACb,CAAA;AAEA;AACA,MAAMgW,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;AAE/B,SAAS9B,uBAAuBA,CAACtF,CAAO,EAAE2E,QAAgB,EAAA;EACzD,MAAMxY,IAAI,GAAG,EAAc,CAAA;EAC3B,MAAMkb,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAS,CAAA;AAC5B,EAAA,KAAK,MAAMve,CAAC,IAAIse,YAAY,EAAE;AAC7B,IAAA,KAAK,MAAMpe,CAAC,IAAIoe,YAAY,EAAE;AAC7B,MAAA,KAAK,MAAMxb,CAAC,IAAIwb,YAAY,EAAE;QAC7BC,EAAE,CAAC,CAAC,CAAC,GAAGrH,CAAC,CAAC,CAAC,CAAC,GAAGlX,CAAC,GAAG6b,QAAQ,CAAA;QAC3B0C,EAAE,CAAC,CAAC,CAAC,GAAGrH,CAAC,CAAC,CAAC,CAAC,GAAGhX,CAAC,GAAG2b,QAAQ,CAAA;QAC3B0C,EAAE,CAAC,CAAC,CAAC,GAAGrH,CAAC,CAAC,CAAC,CAAC,GAAGpU,CAAC,GAAG+Y,QAAQ,CAAA;QAC3BxY,IAAI,CAAC2B,IAAI,CAACgX,UAAU,CAACuC,EAAE,EAAE1C,QAAQ,CAAC,CAAC,CAAA;AACpC,OAAA;AACD,KAAA;AACD,GAAA;AACA,EAAA,OAAOxY,IAAI,CAAA;AACZ,CAAA;AAEA,SAAS2Y,UAAUA,CAAC9E,CAAO,EAAE2E,QAAgB,EAAA;AAC5C,EAAA,MAAM2C,KAAK,GAAG7a,IAAI,CAAC8a,KAAK,CAACvH,CAAC,CAAC,CAAC,CAAC,GAAG2E,QAAQ,CAAC,CAAA;AACzC,EAAA,MAAM6C,KAAK,GAAG/a,IAAI,CAAC8a,KAAK,CAACvH,CAAC,CAAC,CAAC,CAAC,GAAG2E,QAAQ,CAAC,CAAA;AACzC,EAAA,MAAM8C,KAAK,GAAGhb,IAAI,CAAC8a,KAAK,CAACvH,CAAC,CAAC,CAAC,CAAC,GAAG2E,QAAQ,CAAC,CAAA;EACzC,OAAO2C,KAAK,GAAG,GAAG,GAAGE,KAAK,GAAG,GAAG,GAAGC,KAAK,CAAA;AACzC,CAAA;AAEA,SAAStE,iBAAiBA,CAACjR,QAAqB,EAAA;AAC/C,EAAA,MAAMC,OAAO,GAAG;AAAE,IAAA,GAAG0Q,aAAa;IAAE,GAAG3Q,QAAAA;GAAmC,CAAA;EAE1E,IAAIC,OAAO,CAAC2Q,SAAS,GAAG,CAAC,IAAI3Q,OAAO,CAAC2Q,SAAS,GAAG,GAAG,EAAE;AACrD,IAAA,MAAM,IAAIzX,KAAK,EAAIyG,EAAAA,MAAI,kCAAkC,CAAC,CAAA;AAC3D,GAAA;AAEA,EAAA,IAAIK,OAAO,CAAC4Q,eAAe,GAAG,CAAC,IAAI5Q,OAAO,CAAC4Q,eAAe,GAAGtW,IAAI,CAACib,EAAE,GAAG,CAAC,EAAE;AACzE,IAAA,MAAM,IAAIrc,KAAK,CAAC,GAAGyG,MAA0C,CAAA,mCAAA,EAAA,CAACrF,IAAI,CAACib,EAAE,GAAG,CAAC,EAAE5a,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;AACzF,GAAA;AAEA,EAAA,IAAIqF,OAAO,CAAC2Q,SAAS,GAAG,CAAC,EAAE;AAC1B3Q,IAAAA,OAAO,CAAC2Q,SAAS,GAAGrW,IAAI,CAACyG,GAAG,CAACf,OAAO,CAAC2Q,SAAS,EAAE6E,MAAM,CAACC,OAAO,CAAC,CAAA;AAC/DzV,IAAAA,OAAO,CAAC4Q,eAAe,GAAGtW,IAAI,CAACyG,GAAG,CAACf,OAAO,CAAC4Q,eAAe,EAAE4E,MAAM,CAACC,OAAO,CAAC,CAAA;AAC5E,GAAA;AAEA,EAAA,OAAOzV,OAAO,CAAA;AACf,CAAA;AAEA;;;;AAIG;AACH,SAASmR,WAAWA,CAACjZ,IAAe,EAAA;AACnC,EAAA,MAAMC,OAAO,GAAGD,IAAI,CAACE,UAAU,EAAE,CAAA;EACjC,OAAO,CAAC,CAACD,OAAO,IAAIA,OAAO,CAACQ,QAAQ,EAAE,KAAK,CAAC,CAAA;AAC7C;;ACxaA;;;;;;;;;;;;;;;;;;;;AAoBG;AACG,SAAU+c,kBAAkBA,CAACxd,IAAe,EAAEyd,MAAY,EAAEC,WAAA,EAA+B;AAAA,EAAA,IAAAC,gBAAA,CAAA;AAAA,EAAA,IAA/BD,WAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,WAAA,GAAc,IAAI9b,GAAG,EAAU,CAAA;AAAA,GAAA;AAChG,EAAA,MAAMzB,QAAQ,GAAGH,IAAI,CAACI,YAAY,CAAC,UAAU,CAAE,CAAA;EAC/C,MAAMH,OAAO,GAAI,CAAA,CAAA0d,gBAAA,GAAA3d,IAAI,CAACE,UAAU,EAAE,KAAjByd,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,gBAAA,CAAmBjZ,QAAQ,EAAE,KAAII,aAAa,CAAC3E,QAAS,CAACM,QAAQ,EAAE,CAAiB,CAAA;AAErG;AACA,EAAA,IAAIN,QAAQ,EAAE;AACbyd,IAAAA,WAAW,CAACH,MAAM,EAAEtd,QAAQ,EAAEF,OAAO,EAAE,IAAI2B,GAAG,CAAC8b,WAAW,CAAC,CAAC,CAAA;AAC7D,GAAA;AAEA,EAAA,MAAMG,MAAM,GAAG7d,IAAI,CAACI,YAAY,CAAC,QAAQ,CAAC,CAAA;AAC1C,EAAA,IAAIyd,MAAM,EAAE;AACXC,IAAAA,iBAAiB,CAACL,MAAM,EAAEI,MAAM,EAAE5d,OAAO,EAAE,IAAI2B,GAAG,CAAC8b,WAAW,CAAC,CAAC,CAAA;AACjE,GAAA;AAEA,EAAA,MAAMK,OAAO,GAAG/d,IAAI,CAACI,YAAY,CAAC,SAAS,CAAC,CAAA;AAC5C,EAAA,IAAI2d,OAAO,EAAE;AACZC,IAAAA,kBAAkB,CAACP,MAAM,EAAEM,OAAO,EAAE9d,OAAO,EAAE,IAAI2B,GAAG,CAAC8b,WAAW,CAAC,CAAC,CAAA;AACnE,GAAA;AAEA;EACA,KAAK,MAAM3f,MAAM,IAAIiC,IAAI,CAAC0D,WAAW,EAAE,EAAE;AACxC,IAAA,MAAMvD,QAAQ,GAAGpC,MAAM,CAACqC,YAAY,CAAC,UAAU,CAAC,CAAA;AAChD,IAAA,IAAID,QAAQ,EAAE;AACbyd,MAAAA,WAAW,CAACH,MAAM,EAAEtd,QAAQ,EAAEF,OAAO,EAAE,IAAI2B,GAAG,CAAC8b,WAAW,CAAC,CAAC,CAAA;AAC7D,KAAA;AAEA,IAAA,MAAMG,MAAM,GAAG9f,MAAM,CAACqC,YAAY,CAAC,QAAQ,CAAC,CAAA;AAC5C,IAAA,IAAIyd,MAAM,EAAE;AACXC,MAAAA,iBAAiB,CAACL,MAAM,EAAEI,MAAM,EAAE5d,OAAO,EAAE,IAAI2B,GAAG,CAAC8b,WAAW,CAAC,CAAC,CAAA;AACjE,KAAA;AAEA,IAAA,MAAMK,OAAO,GAAGhgB,MAAM,CAACqC,YAAY,CAAC,SAAS,CAAC,CAAA;AAC9C,IAAA,IAAI2d,OAAO,EAAE;AACZC,MAAAA,kBAAkB,CAACP,MAAM,EAAEM,OAAO,EAAE9d,OAAO,EAAE,IAAI2B,GAAG,CAAC8b,WAAW,CAAC,CAAC,CAAA;AACnE,KAAA;AACD,GAAA;AAEA;AACA;AACA,EAAA,IAAIO,WAAW,CAACR,MAAM,CAAC,GAAG,CAAC,EAAE;IAC5BS,4BAA4B,CAACle,IAAI,CAAC,CAAA;AACnC,GAAA;AAEA;EACA,KAAK,IAAIvB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwB,OAAO,CAACiE,MAAM,EAAEzF,CAAC,EAAE,EAAEif,WAAW,CAAClc,GAAG,CAACvB,OAAO,CAACxB,CAAC,CAAC,CAAC,CAAA;AACrE,CAAA;AAEA,SAASmf,WAAWA,CAACH,MAAY,EAAEla,SAAmB,EAAEtD,OAAoB,EAAEyd,WAAwB,EAAA;AACrG;AACA;AACA,EAAA,MAAM/Y,QAAQ,GAAG,IAAIwZ,YAAY,CAAC5a,SAAS,CAAC9C,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAA;AAC3D,EAAA,MAAM6D,WAAW,GAAGf,SAAS,CAACgB,cAAc,EAAE,CAAA;EAE9C,KAAK,IAAI9F,CAAC,GAAG,CAAC,EAAE2d,EAAE,GAAa,EAAE,EAAExR,EAAE,GAAGrH,SAAS,CAAC9C,QAAQ,EAAE,EAAEhC,CAAC,GAAGmM,EAAE,EAAEnM,CAAC,EAAE,EAAE;AAC1EkG,IAAAA,QAAQ,CAAC9C,GAAG,CAAC0B,SAAS,CAACiX,UAAU,CAAC/b,CAAC,EAAE2d,EAAE,CAAC,EAAE3d,CAAC,GAAG6F,WAAW,CAAC,CAAA;AAC3D,GAAA;AAEA,EAAA,MAAM8Z,MAAM,GAAGC,QAAU,EAAU,CAAA;AACnC,EAAA,KAAK,IAAI5f,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwB,OAAO,CAACiE,MAAM,EAAEzF,CAAC,EAAE,EAAE;AACxC,IAAA,MAAMgK,KAAK,GAAGxI,OAAO,CAACxB,CAAC,CAAC,CAAA;AACxB,IAAA,IAAIif,WAAW,CAACpc,GAAG,CAACmH,KAAK,CAAC,EAAE,SAAA;AAE5BlF,IAAAA,SAAS,CAACiX,UAAU,CAAC/R,KAAK,EAAE2V,MAAM,CAAC,CAAA;AACnCE,IAAAA,aAAa,CAACF,MAAM,EAAEA,MAAM,EAAEX,MAAM,CAAC,CAAA;IACrC9Y,QAAQ,CAAC9C,GAAG,CAACuc,MAAM,EAAE3V,KAAK,GAAG,CAAC,CAAC,CAAA;AAE/BiV,IAAAA,WAAW,CAAClc,GAAG,CAACiH,KAAK,CAAC,CAAA;AACvB,GAAA;EAEAlF,SAAS,CAACsB,QAAQ,CAACF,QAAQ,CAAC,CAAC4Z,aAAa,CAAC,KAAK,CAAC,CAAA;AAClD,CAAA;AAEA,SAAST,iBAAiBA,CAACL,MAAY,EAAEla,SAAmB,EAAEtD,OAAoB,EAAEyd,WAAwB,EAAA;AAC3G,EAAA,MAAMc,YAAY,GAAGC,QAAU,EAAE,CAAA;AACjCC,EAAAA,QAAQ,CAACF,YAAY,EAAEf,MAAM,CAAC,CAAA;AAC9BtT,EAAAA,MAAM,CAACqU,YAAY,EAAEA,YAAY,CAAC,CAAA;AAClCG,EAAAA,SAAS,CAACH,YAAY,EAAEA,YAAY,CAAC,CAAA;AAErC,EAAA,MAAMJ,MAAM,GAAGC,QAAU,EAAU,CAAA;AACnC,EAAA,KAAK,IAAI5f,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwB,OAAO,CAACiE,MAAM,EAAEzF,CAAC,EAAE,EAAE;AACxC,IAAA,MAAMgK,KAAK,GAAGxI,OAAO,CAACxB,CAAC,CAAC,CAAA;AACxB,IAAA,IAAIif,WAAW,CAACpc,GAAG,CAACmH,KAAK,CAAC,EAAE,SAAA;AAE5BlF,IAAAA,SAAS,CAACiX,UAAU,CAAC/R,KAAK,EAAE2V,MAAM,CAAC,CAAA;AACnCQ,IAAAA,aAAa,CAACR,MAAM,EAAEA,MAAM,EAAEI,YAAY,CAAC,CAAA;AAC3CK,IAAAA,SAAa,CAACT,MAAM,EAAEA,MAAM,CAAC,CAAA;AAC7B7a,IAAAA,SAAS,CAAC8Y,UAAU,CAAC5T,KAAK,EAAE2V,MAAM,CAAC,CAAA;AAEnCV,IAAAA,WAAW,CAAClc,GAAG,CAACiH,KAAK,CAAC,CAAA;AACvB,GAAA;AACD,CAAA;AAEA,SAASuV,kBAAkBA,CAACP,MAAY,EAAEla,SAAmB,EAAEtD,OAAoB,EAAEyd,WAAwB,EAAA;AAC5G,EAAA,MAAMoB,EAAE,GAAGT,QAAU,EAAU,CAAA;AAC/B,EAAA,MAAMU,EAAE,GAAGC,MAAU,EAAU,CAAA;AAC/B,EAAA,KAAK,IAAIvgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwB,OAAO,CAACiE,MAAM,EAAEzF,CAAC,EAAE,EAAE;AACxC,IAAA,MAAMgK,KAAK,GAAGxI,OAAO,CAACxB,CAAC,CAAC,CAAA;AACxB,IAAA,IAAIif,WAAW,CAACpc,GAAG,CAACmH,KAAK,CAAC,EAAE,SAAA;AAE5BlF,IAAAA,SAAS,CAACiX,UAAU,CAAC/R,KAAK,EAAEsW,EAAE,CAAC,CAAA;AAE/B;AACA;IACA,MAAM,CAACpc,CAAC,EAAEsc,CAAC,EAAEC,CAAC,CAAC,GAAGH,EAAE,CAAA;IACpBD,EAAE,CAAC,CAAC,CAAC,GAAGrB,MAAM,CAAC,CAAC,CAAC,GAAG9a,CAAC,GAAG8a,MAAM,CAAC,CAAC,CAAC,GAAGwB,CAAC,GAAGxB,MAAM,CAAC,CAAC,CAAC,GAAGyB,CAAC,CAAA;IACrDJ,EAAE,CAAC,CAAC,CAAC,GAAGrB,MAAM,CAAC,CAAC,CAAC,GAAG9a,CAAC,GAAG8a,MAAM,CAAC,CAAC,CAAC,GAAGwB,CAAC,GAAGxB,MAAM,CAAC,CAAC,CAAC,GAAGyB,CAAC,CAAA;IACrDJ,EAAE,CAAC,CAAC,CAAC,GAAGrB,MAAM,CAAC,CAAC,CAAC,GAAG9a,CAAC,GAAG8a,MAAM,CAAC,CAAC,CAAC,GAAGwB,CAAC,GAAGxB,MAAM,CAAC,EAAE,CAAC,GAAGyB,CAAC,CAAA;AACtDL,IAAAA,SAAa,CAACC,EAAE,EAAEA,EAAE,CAAC,CAAA;IAEpBC,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,EAAIC,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,EAAIC,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAE,CAAA;AAEjDvb,IAAAA,SAAS,CAAC8Y,UAAU,CAAC5T,KAAK,EAAEsW,EAAE,CAAC,CAAA;AAE/BrB,IAAAA,WAAW,CAAClc,GAAG,CAACiH,KAAK,CAAC,CAAA;AACvB,GAAA;AACD,CAAA;AAEA,SAASyV,4BAA4BA,CAACle,IAAe,EAAA;EACpD,IAAIA,IAAI,CAACK,OAAO,EAAE,KAAKC,cAAS,CAACC,IAAI,CAACM,SAAS,EAAE,OAAA;EACjD,IAAI,CAACb,IAAI,CAACE,UAAU,EAAE,EAAE8Y,aAAa,CAAChZ,IAAI,EAAE;AAAEyY,IAAAA,SAAS,EAAE,CAAA;AAAG,GAAA,CAAC,CAAA;AAE7D,EAAA,MAAMxY,OAAO,GAAGD,IAAI,CAACE,UAAU,EAAG,CAAA;EAClC,KAAK,IAAIzB,CAAC,GAAG,CAAC,EAAEmM,EAAE,GAAG3K,OAAO,CAACQ,QAAQ,EAAE,EAAEhC,CAAC,GAAGmM,EAAE,EAAEnM,CAAC,IAAI,CAAC,EAAE;AACxD,IAAA,MAAMsE,CAAC,GAAG9C,OAAO,CAAC4K,SAAS,CAACpM,CAAC,CAAC,CAAA;IAC9B,MAAMqM,CAAC,GAAG7K,OAAO,CAAC4K,SAAS,CAACpM,CAAC,GAAG,CAAC,CAAC,CAAA;AAClCwB,IAAAA,OAAO,CAACkf,SAAS,CAAC1gB,CAAC,EAAEqM,CAAC,CAAC,CAAA;IACvB7K,OAAO,CAACkf,SAAS,CAAC1gB,CAAC,GAAG,CAAC,EAAEsE,CAAC,CAAC,CAAA;AAC5B,GAAA;AACD;;ACzJA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BG;AACG,SAAUqc,aAAaA,CAAC/S,IAAU,EAAEoR,MAAY,EAAE9E,SAAS,EAAU+E,WAAyB,EAAA;AAAA,EAAA,IAA5C/E,SAAS,KAAA,KAAA,CAAA,EAAA;AAATA,IAAAA,SAAS,GAAG,KAAK,CAAA;AAAA,GAAA;AACxE;EACA,KAAK,MAAM0G,OAAO,IAAIhT,IAAI,CAACC,cAAc,EAAE,EAAE;IAC5C,MAAMgT,QAAQ,GAAGD,OAAO,CAAC/Z,WAAW,EAAE,CAACC,IAAI,CAAEoQ,CAAC,IAAKA,CAAC,CAAClQ,YAAY,KAAKC,iBAAY,CAAC0F,IAAI,IAAIuK,CAAC,KAAKtJ,IAAI,CAAC,CAAA;AACtG,IAAA,IAAIiT,QAAQ,EAAE;AACb,MAAA,MAAMC,OAAO,GAAGF,OAAO,CAAC3D,KAAK,EAAE,CAAA;AAC/BrP,MAAAA,IAAI,CAACrI,IAAI,CAACqb,OAAO,EAAEE,OAAO,CAAC,CAAA;MAE3B,KAAK,MAAMC,SAAS,IAAID,OAAO,CAAC7b,WAAW,EAAE,EAAE;AAC9C,QAAA,MAAM+b,SAAS,GAAGD,SAAS,CAAC9D,KAAK,EAAE,CAAA;AACnC6D,QAAAA,OAAO,CAACvb,IAAI,CAACwb,SAAS,EAAEC,SAAS,CAAC,CAAA;AACnC,OAAA;AACD,KAAA;AACD,GAAA;AAEA;EACA,IAAI,CAAC9G,SAAS,EAAE;AACf,IAAA,MAAMjD,OAAO,GAAG,IAAI9T,GAAG,CAA8B,CACpD,GAAGyK,IAAI,CAACC,cAAc,EAAE,EACxB,GAAGD,IAAI,CAACC,cAAc,EAAE,CAACoT,OAAO,CAAE1f,IAAI,IAAKA,IAAI,CAAC0D,WAAW,EAAE,CAAC,CAC9D,CAAC,CAAA;AACF,IAAA,MAAM8C,UAAU,GAAG,IAAIpF,GAAG,EAAsB,CAAA;IAChD,KAAK,MAAMpB,IAAI,IAAIqM,IAAI,CAACC,cAAc,EAAE,EAAE;AACzC,MAAA,KAAK,MAAMqT,YAAY,IAAItc,kBAAkB,CAACrD,IAAI,CAAC,EAAE;AACpD,QAAA,MAAMsf,QAAQ,GAAGK,YAAY,CAC3Bra,WAAW,EAAE,CACbC,IAAI,CAAExC,CAAC,IAAK,CAACA,CAAC,YAAYzC,cAAS,IAAIyC,CAAC,YAAY6c,oBAAe,KAAK,CAAClK,OAAO,CAACpU,GAAG,CAACyB,CAAC,CAAC,CAAC,CAAA;QAC1F,IAAIuc,QAAQ,IAAI,CAAC9Y,UAAU,CAAClF,GAAG,CAACqe,YAAY,CAAC,EAAE;UAC9CnZ,UAAU,CAAC3E,GAAG,CAAC8d,YAAY,EAAEA,YAAY,CAACjE,KAAK,EAAE,CAAC,CAAA;AACnD,SAAA;AACD,OAAA;AACD,KAAA;AACA,IAAA,KAAK,MAAMlW,MAAM,IAAIkQ,OAAO,EAAE;MAC7B,KAAK,MAAM,CAACiK,YAAY,EAAEE,YAAY,CAAC,IAAIrZ,UAAU,EAAE;AACtDhB,QAAAA,MAAM,CAACxB,IAAI,CAAC2b,YAAY,EAAEE,YAAY,CAAC,CAAA;AACxC,OAAA;AACD,KAAA;AACD,GAAA;AAEA;AACA,EAAA,MAAMC,oBAAoB,GAAG,IAAI1e,GAAG,EAAyB,CAAA;EAC7D,KAAK,MAAMpB,IAAI,IAAIqM,IAAI,CAACC,cAAc,EAAE,EAAE;AACzC,IAAA,MAAMnM,QAAQ,GAAGH,IAAI,CAACI,YAAY,CAAC,UAAU,CAAE,CAAA;AAE/C,IAAA,IAAI2f,eAAe,CAAA;AACnB,IAAA,IAAIrC,WAAW,EAAE;AAChBqC,MAAAA,eAAe,GAAGrC,WAAW,CAAA;KAC7B,MAAM,IAAIoC,oBAAoB,CAACxe,GAAG,CAACnB,QAAQ,CAAC,EAAE;AAC9C4f,MAAAA,eAAe,GAAGD,oBAAoB,CAACne,GAAG,CAACxB,QAAQ,CAAE,CAAA;AACtD,KAAC,MAAM;MACN2f,oBAAoB,CAACje,GAAG,CAAC1B,QAAQ,EAAG4f,eAAe,GAAG,IAAIne,GAAG,EAAW,CAAC,CAAA;AAC1E,KAAA;AAEA4b,IAAAA,kBAAkB,CAACxd,IAAI,EAAEyd,MAAM,EAAEsC,eAAe,CAAC,CAAA;AAClD,GAAA;AACD;;ACnFA;AACA,MAAMC,QAAQ,GAAS,CACrB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CACX,CAAA;AAED;;;;;;;;;;;;;;;;;;;;;;;AAuBG;AACG,SAAUC,kBAAkBA,CAACxW,IAAU,EAAA;AAC5C,EAAA,MAAM4C,IAAI,GAAG5C,IAAI,CAACyW,OAAO,EAAE,CAAA;AAC3B,EAAA,MAAMC,WAAW,GAAG1W,IAAI,CAAC2W,SAAS,EAAE,CAAA;EAEpC,IAAI/T,IAAI,IAAI,CAACgU,cAAS,CAACC,EAAE,CAACH,WAAW,EAAEH,QAAQ,CAAC,EAAE;AACjDZ,IAAAA,aAAa,CAAC/S,IAAI,EAAE8T,WAAW,CAAC,CAAA;AACjC,GAAA;EAEA,KAAK,MAAM/W,KAAK,IAAIK,IAAI,CAACN,YAAY,EAAE,EAAE;AACxC,IAAA,MAAMsU,MAAM,GAAGrU,KAAK,CAACgX,SAAS,EAAE,CAAA;AAChCG,IAAAA,UAAY,CAAC9C,MAAM,EAAEA,MAAM,EAAE0C,WAAW,CAAC,CAAA;AACzC/W,IAAAA,KAAK,CAACY,SAAS,CAACyT,MAAM,CAAC,CAAA;AACxB,GAAA;AAEA,EAAA,OAAOhU,IAAI,CAACO,SAAS,CAACgW,QAAQ,CAAC,CAAA;AAChC;;AC/CA,MAAMvY,MAAI,GAAG,YAAY,CAAA;AAWzB,MAAM+Y,mBAAmB,GAAsB;AAC9CC,EAAAA,OAAO,EAAE,mBAAA;CACT,CAAA;AAED;;;;;;;;;;;;;;AAcG;AACa,SAAAC,UAAUA,CAAC7Y,QAAA,EAAiD;AAAA,EAAA,IAAjDA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,QAAA,GAA8B2Y,mBAAmB,CAAA;AAAA,GAAA;AAC3E,EAAA,MAAM1Y,OAAO,GAAG;AAAE,IAAA,GAAG0Y,mBAAmB;IAAE,GAAG3Y,QAAAA;GAAyC,CAAA;AAEtF,EAAA,OAAO3I,eAAe,CAACuI,MAAI,EAAGM,GAAa,IAAU;AACpD,IAAA,MAAMC,MAAM,GAAGD,GAAG,CAACE,SAAS,EAAE,CAAA;AAC9B,IAAA,KAAK,MAAMoE,IAAI,IAAItE,GAAG,CAAC3B,OAAO,EAAE,CAACgG,UAAU,EAAE,EAAE;MAC9C,KAAK,MAAMpM,IAAI,IAAIqM,IAAI,CAACC,cAAc,EAAE,EAAE;AACzCqU,QAAAA,mBAAmB,CAAC3gB,IAAI,EAAE8H,OAAO,CAAC,CAAA;AACnC,OAAA;AACD,KAAA;IACAC,GAAG,CAAC6Y,eAAe,CAACC,8BAAmB,CAAC,CAAC7S,OAAO,EAAE,CAAA;AAClDhG,IAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AACnC,GAAC,CAAC,CAAA;AACH,CAAA;AAEA;;;;;;;;;;;;;;;;AAgBG;AACa,SAAAkZ,mBAAmBA,CAAC3gB,IAAe,EAAE8H,OAAoC,EAAA;EACxF,KAAK,MAAMlB,QAAQ,IAAI5G,IAAI,CAACyG,aAAa,EAAE,EAAE;IAC5Cqa,mBAAmB,CAACla,QAAQ,EAAE5G,IAAI,CAACI,YAAY,CAACwG,QAAQ,CAAE,EAAEkB,OAAO,CAAC,CAAA;AACrE,GAAA;EACA,KAAK,MAAM/J,MAAM,IAAIiC,IAAI,CAAC0D,WAAW,EAAE,EAAE;IACxC,KAAK,MAAMkD,QAAQ,IAAI7I,MAAM,CAAC0I,aAAa,EAAE,EAAE;MAC9Cqa,mBAAmB,CAACla,QAAQ,EAAE7I,MAAM,CAACqC,YAAY,CAACwG,QAAQ,CAAE,EAAEkB,OAAO,CAAC,CAAA;AACvE,KAAA;AACD,GAAA;AACD,CAAA;SAEgBgZ,mBAAmBA,CAACla,QAAgB,EAAErD,SAAmB,EAAEuE,OAAoC,EAAA;AAC9G,EAAA,IAAI,CAACvE,SAAS,CAACmB,QAAQ,EAAE,EAAE,OAAA;EAC3B,IAAI,CAACoD,OAAO,CAAC2Y,OAAO,CAAC1P,IAAI,CAACnK,QAAQ,CAAC,EAAE,OAAA;AACrC,EAAA,IAAIrD,SAAS,CAACwd,gBAAgB,EAAE,IAAI,CAAC,EAAE,OAAA;AAEvC,EAAA,MAAMtc,QAAQ,GAAGlB,SAAS,CAACmB,QAAQ,EAAG,CAAA;EACtC,MAAMC,QAAQ,GAAG,IAAIwZ,YAAY,CAAC1Z,QAAQ,CAACP,MAAM,CAAC,CAAA;EAElD,KAAK,IAAIzF,CAAC,GAAG,CAAC,EAAEmM,EAAE,GAAGrH,SAAS,CAAC9C,QAAQ,EAAE,EAAE2b,EAAE,GAAG,EAAc,EAAE3d,CAAC,GAAGmM,EAAE,EAAEnM,CAAC,EAAE,EAAE;IAC5E2d,EAAE,GAAG7Y,SAAS,CAACiX,UAAU,CAAC/b,CAAC,EAAE2d,EAAE,CAAC,CAAA;AAChC7Y,IAAAA,SAAS,CAACsB,QAAQ,CAACF,QAAQ,CAAC,CAAC0X,UAAU,CAAC5d,CAAC,EAAE2d,EAAE,CAAC,CAACvX,QAAQ,CAACJ,QAAQ,CAAC,CAAA;AAClE,GAAA;EAEAlB,SAAS,CAACsB,QAAQ,CAACF,QAAQ,CAAC,CAAC4Z,aAAa,CAAC,KAAK,CAAC,CAAA;AAClD;;ACtFA,MAAM9W,MAAI,GAAG,OAAO,CAAA;AAcb,MAAMuZ,cAAc,GAAiB;AAC3CC,EAAAA,MAAM,EAAE,aAAa;AACrBC,EAAAA,WAAW,EAAE,CAAC;AACdC,EAAAA,WAAW,EAAE,CAAC;AACdC,EAAAA,gBAAgB,EAAE,EAAE;AACpBC,EAAAA,cAAc,EAAE,EAAE;AAClBC,EAAAA,aAAa,EAAE,CAAC;AAChBC,EAAAA,gBAAgB,EAAE,EAAE;AACpBC,EAAAA,eAAe,EAAE,EAAE;AACnBC,EAAAA,kBAAkB,EAAE,MAAA;EACpB;AAED;;;;;;;AAOG;AACa,SAAAC,KAAKA,CAAC7Z,QAAA,EAAuC;AAAA,EAAA,IAAvCA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,QAAA,GAAyBmZ,cAAc,CAAA;AAAA,GAAA;AAC5D,EAAA,MAAMlZ,OAAO,GAAG;AAAE,IAAA,GAAGkZ,cAAc;IAAE,GAAGnZ,QAAAA;GAAoC,CAAA;AAC5E,EAAA,OAAO3I,eAAe,CAACuI,MAAI,EAAA,UAAS5B,QAAkB,EAAA;IAAA,IAAmB;MAAA,OAAA5H,OAAA,CAAAC,OAAA,CAClE2H,QAAQ,CAACkT,SAAS,CAACF,IAAI,CAAC;AAAEJ,QAAAA,SAAS,EAAE,CAAA;OAAG,CAAC,CAAC,CAAA,CAAAla,IAAA,CAAA,YAAA;AAChDsH,QAAAA,QAAQ,CACN+a,eAAe,CAACe,kCAAuB,CAAC,CACxCC,WAAW,CAAC,IAAI,CAAC,CACjBC,iBAAiB,CAAC;AAClBZ,UAAAA,MAAM,EACLnZ,OAAO,CAACmZ,MAAM,KAAK,aAAa,GAC7BU,kCAAuB,CAACG,aAAa,CAACC,WAAW,GACjDJ,kCAAuB,CAACG,aAAa,CAACE,UAAU;UACpDd,WAAW,EAAEpZ,OAAO,CAACoZ,WAAW;UAChCC,WAAW,EAAErZ,OAAO,CAACqZ,WAAW;AAChCc,UAAAA,gBAAgB,EAAE;YACjB1H,QAAQ,EAAEzS,OAAO,CAACsZ,gBAAgB;YAClC/I,MAAM,EAAEvQ,OAAO,CAACuZ,cAAc;YAC9BjJ,KAAK,EAAEtQ,OAAO,CAACwZ,aAAa;YAC5BY,SAAS,EAAEpa,OAAO,CAACyZ,gBAAgB;YACnCY,OAAO,EAAEra,OAAO,CAAC0Z,eAAAA;WACjB;UACDC,kBAAkB,EAAE3Z,OAAO,CAAC2Z,kBAAAA;AAC5B,SAAA,CAAC,CAAA;AAAC,OAAA,CAAA,CAAA;AACL,KAAC,QAAAziB,CAAA,EAAA;AAAA,MAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,KAAA;GAAC,CAAA,CAAA;AACH;;AC1DA,MAAMyI,MAAI,GAAG,SAAS,CAAA;AAMT2a,MAAAA,gBAAgB,GAA6B,GAAE;AAE5D;;;;;;;;;;;;;;;;;;AAkBG;AACa,SAAAC,OAAOA,CAACxa,QAAA,EAA2C;AAIlE,EAAA,OAAO3I,eAAe,CAACuI,MAAI,EAAA,UAAS5B,QAAkB,EAAA;IAAA,IAAmB;AACxE,MAAA,MAAMqC,IAAI,GAAGrC,QAAQ,CAACO,OAAO,EAAE,CAAA;AAC/B,MAAA,MAAM4B,MAAM,GAAGnC,QAAQ,CAACoC,SAAS,EAAE,CAAA;AAEnC;AACA,MAAA,MAAMqa,MAAM,GAAG,IAAI1gB,GAAG,EAAQ,CAAA;MAC9B,KAAK,MAAMwS,IAAI,IAAIlM,IAAI,CAACG,SAAS,EAAE,EAAE;QACpC,KAAK,MAAMka,KAAK,IAAInO,IAAI,CAAC1E,UAAU,EAAE,EAAE;AACtC4S,UAAAA,MAAM,CAAC9gB,GAAG,CAAC+gB,KAAK,CAAC,CAAA;AAClB,SAAA;AACD,OAAA;AAEA;AACA,MAAA,MAAMC,QAAQ,GAAG,IAAI5gB,GAAG,EAAQ,CAAA;MAChC,KAAK,MAAM8K,SAAS,IAAIxE,IAAI,CAACE,cAAc,EAAE,EAAE;QAC9C,KAAK,MAAM8M,OAAO,IAAIxI,SAAS,CAACyI,YAAY,EAAE,EAAE;AAC/C,UAAA,MAAM1L,IAAI,GAAGyL,OAAO,CAACE,aAAa,EAAE,CAAA;UACpC,IAAI3L,IAAI,IAAIyL,OAAO,CAACuN,aAAa,EAAE,KAAK,SAAS,EAAE;AAClDD,YAAAA,QAAQ,CAAChhB,GAAG,CAACiI,IAAI,CAAC,CAAA;AACnB,WAAA;AACD,SAAA;AACD,OAAA;AAEA;AACA,MAAA,MAAMiZ,cAAc,GAAG,IAAI9gB,GAAG,EAAQ,CAAA;AACtC,MAAA,MAAM+gB,iBAAiB,GAAG,IAAI/gB,GAAG,EAAQ,CAAA;MACzC,KAAK,MAAM4G,KAAK,IAAIN,IAAI,CAACI,UAAU,EAAE,EAAE;AACtCE,QAAAA,KAAK,CAAC8I,QAAQ,CAAE7H,IAAI,IAAI;AACvB,UAAA,MAAMjE,MAAM,GAAGiE,IAAI,CAACE,aAAa,EAAE,CAAA;UACnC,IAAI,CAACnE,MAAM,EAAE,OAAA;AACb,UAAA,IAAI8c,MAAM,CAAChhB,GAAG,CAACkE,MAAM,CAAC,IAAIkd,cAAc,CAACphB,GAAG,CAACkE,MAAM,CAAC,EAAE;AACrDkd,YAAAA,cAAc,CAAClhB,GAAG,CAACiI,IAAI,CAAC,CAAA;AACzB,WAAA;AACA,UAAA,IAAI+Y,QAAQ,CAAClhB,GAAG,CAACkE,MAAM,CAAC,IAAImd,iBAAiB,CAACrhB,GAAG,CAACkE,MAAM,CAAC,EAAE;AAC1Dmd,YAAAA,iBAAiB,CAACnhB,GAAG,CAACiI,IAAI,CAAC,CAAA;AAC5B,WAAA;AACD,SAAC,CAAC,CAAA;AACH,OAAA;AAEA;MACA,KAAK,MAAMjB,KAAK,IAAIN,IAAI,CAACI,UAAU,EAAE,EAAE;AACtCE,QAAAA,KAAK,CAAC8I,QAAQ,CAAE7H,IAAI,IAAI;AACvB,UAAA,IAAI+Y,QAAQ,CAAClhB,GAAG,CAACmI,IAAI,CAAC,EAAE,OAAA;AACxB,UAAA,IAAIiZ,cAAc,CAACphB,GAAG,CAACmI,IAAI,CAAC,EAAE,OAAA;AAC9B,UAAA,IAAIkZ,iBAAiB,CAACrhB,GAAG,CAACmI,IAAI,CAAC,EAAE,OAAA;UAEjCK,eAAe,CAACL,IAAI,CAAC,CAAA;AACtB,SAAC,CAAC,CAAA;AACH,OAAA;AAEA;MACA,IAAI+Y,QAAQ,CAACnhB,IAAI,EAAE;AAClB2G,QAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,qEAAqE,CAAC,CAAA;AAC3F,OAAA;AAEA;MAAA,OAAAxJ,OAAA,CAAAC,OAAA,CACM2H,QAAQ,CAACkT,SAAS,CAACvF,KAAK,CAAC;AAAEtI,QAAAA,aAAa,EAAE,CAACxF,iBAAY,CAACoN,IAAI,CAAC;AAAEM,QAAAA,UAAU,EAAE,KAAA;OAAO,CAAC,CAAC,CAAA,CAAA7U,IAAA,CAAA,YAAA;AAE1FyJ,QAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AAAC,OAAA,CAAA,CAAA;AACpC,KAAC,QAAAzI,CAAA,EAAA;AAAA,MAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,KAAA;GAAC,CAAA,CAAA;AACH;;ACnFA;AACM,SAAU4jB,OAAOA,CAAC7a,GAAa,EAAA;EACpC,OAAO;AACNgC,IAAAA,MAAM,EAAEzB,UAAU,CAACP,GAAG,CAAC;AACvBoE,IAAAA,MAAM,EAAEC,UAAU,CAACrE,GAAG,CAAC;AACvBqH,IAAAA,SAAS,EAAE/I,aAAa,CAAC0B,GAAG,CAAC;AAC7B2G,IAAAA,QAAQ,EAAEC,YAAY,CAAC5G,GAAG,CAAC;IAC3B8a,UAAU,EAAEza,cAAc,CAACL,GAAG,CAAA;GAC9B,CAAA;AACF,CAAA;AAEA;AACA,SAASO,UAAUA,CAACP,GAAa,EAAA;AAChC,EAAA,MAAMgC,MAAM,GAAGhC,GAAG,CAChB3B,OAAO,EAAE,CACTkC,UAAU,EAAE,CACZ3B,GAAG,CAAE6B,KAAK,IAAI;IACd,MAAMN,IAAI,GAAGM,KAAK,CAACW,YAAY,EAAE,CAAC,CAAC,CAAC,CAAA;AACpC,IAAA,MAAM2Z,WAAW,GAAGla,cAAS,CAACJ,KAAK,CAAC,CAAA;IACpC,OAAO;AACNrJ,MAAAA,IAAI,EAAEqJ,KAAK,CAACgG,OAAO,EAAE;MACrBuU,QAAQ,EAAE7a,IAAI,GAAGA,IAAI,CAACsG,OAAO,EAAE,GAAG,EAAE;AACpCwU,MAAAA,OAAO,EAAEC,WAAW,CAACH,WAAW,CAACha,GAAG,CAAC;AACrCoa,MAAAA,OAAO,EAAED,WAAW,CAACH,WAAW,CAACja,GAAG,CAAA;KACpC,CAAA;AACF,GAAC,CAAC,CAAA;EACH,OAAO;AAAEsa,IAAAA,UAAU,EAAEpZ,MAAAA;GAAQ,CAAA;AAC9B,CAAA;AAEA;AACA,SAASqC,UAAUA,CAACrE,GAAa,EAAA;AAChC,EAAA,MAAMoE,MAAM,GAAwBpE,GAAG,CACrC3B,OAAO,EAAE,CACTgG,UAAU,EAAE,CACZzF,GAAG,CAAE0F,IAAI,IAAI;IACb,MAAM+W,SAAS,GAAG/W,IAAI,CAAC/G,WAAW,EAAE,CAACsE,MAAM,CAAEpE,MAAM,IAAKA,MAAM,CAACC,YAAY,KAAKC,iBAAY,CAACC,IAAI,CAAC,CAACzB,MAAM,CAAA;IACzG,IAAImf,YAAY,GAAG,CAAC,CAAA;IACpB,IAAIC,KAAK,GAAG,CAAC,CAAA;AACb,IAAA,MAAMlN,SAAS,GAAG,IAAIxU,GAAG,EAAU,CAAA;AACnC,IAAA,MAAM2hB,WAAW,GAAG,IAAI3hB,GAAG,EAAU,CAAA;AACrC,IAAA,MAAM4hB,aAAa,GAAkB,IAAI5hB,GAAG,EAAE,CAAA;IAE9CyK,IAAI,CAACC,cAAc,EAAE,CAAC/D,OAAO,CAAEvI,IAAI,IAAI;MACtC,KAAK,MAAM4G,QAAQ,IAAI5G,IAAI,CAACyG,aAAa,EAAE,EAAE;AAC5C,QAAA,MAAM2S,IAAI,GAAGpZ,IAAI,CAACI,YAAY,CAACwG,QAAQ,CAAE,CAAA;QACzCwP,SAAS,CAAC5U,GAAG,CAACoF,QAAQ,GAAG,GAAG,GAAG6c,mBAAmB,CAACrK,IAAI,CAAC,CAAC,CAAA;AACzDoK,QAAAA,aAAa,CAAChiB,GAAG,CAAC4X,IAAI,CAAC,CAAA;AACxB,OAAA;MACA,KAAK,MAAMsK,IAAI,IAAI1jB,IAAI,CAAC0D,WAAW,EAAE,EAAE;AACtCggB,QAAAA,IAAI,CAAClgB,cAAc,EAAE,CAAC+E,OAAO,CAAE6Q,IAAI,IAAKoK,aAAa,CAAChiB,GAAG,CAAC4X,IAAI,CAAC,CAAC,CAAA;AACjE,OAAA;AACA,MAAA,MAAMnZ,OAAO,GAAGD,IAAI,CAACE,UAAU,EAAE,CAAA;AACjC,MAAA,IAAID,OAAO,EAAE;AACZsjB,QAAAA,WAAW,CAAC/hB,GAAG,CAACiiB,mBAAmB,CAACxjB,OAAO,CAAC,CAAC,CAAA;AAC7CujB,QAAAA,aAAa,CAAChiB,GAAG,CAACvB,OAAO,CAAC,CAAA;AAC3B,OAAA;AACAqjB,MAAAA,KAAK,IAAItjB,IAAI,CAACwD,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC/C,QAAQ,EAAE,CAAA;AAC5C4iB,MAAAA,YAAY,IAAItjB,mBAAmB,CAACC,IAAI,CAAC,CAAA;AAC1C,KAAC,CAAC,CAAA;IAEF,IAAIqB,IAAI,GAAG,CAAC,CAAA;AACZsC,IAAAA,KAAK,CAACC,IAAI,CAAC4f,aAAa,CAAC,CAACjb,OAAO,CAAExF,CAAC,IAAM1B,IAAI,IAAI0B,CAAC,CAAC2B,QAAQ,EAAG,CAACif,UAAW,CAAC,CAAA;IAE5E,MAAMC,KAAK,GAAGvX,IAAI,CAACC,cAAc,EAAE,CAAC3F,GAAG,CAAE3G,IAAI,IAAK6jB,uBAAuB,CAAC7jB,IAAI,CAACK,OAAO,EAAE,CAAC,CAAC,CAAA;IAE1F,OAAO;AACNlB,MAAAA,IAAI,EAAEkN,IAAI,CAACmC,OAAO,EAAE;MACpBjI,IAAI,EAAE5C,KAAK,CAACC,IAAI,CAAC,IAAIhC,GAAG,CAACgiB,KAAK,CAAC,CAAC;AAChCE,MAAAA,UAAU,EAAEzX,IAAI,CAACC,cAAc,EAAE,CAACpI,MAAM;AACxCmf,MAAAA,YAAY,EAAEA,YAAY;AAC1BU,MAAAA,QAAQ,EAAET,KAAK;MACfrjB,OAAO,EAAE0D,KAAK,CAACC,IAAI,CAAC2f,WAAW,CAAC,CAAC7c,IAAI,EAAE;MACvCF,UAAU,EAAE7C,KAAK,CAACC,IAAI,CAACwS,SAAS,CAAC,CAAC1P,IAAI,EAAE;AACxC0c,MAAAA,SAAS,EAAEA,SAAS;AACpB/hB,MAAAA,IAAI,EAAEA,IAAAA;KACN,CAAA;AACF,GAAC,CAAC,CAAA;EAEH,OAAO;AAAE8hB,IAAAA,UAAU,EAAEhX,MAAAA;GAAQ,CAAA;AAC9B,CAAA;AAEA;AACA,SAAS9F,aAAaA,CAAC0B,GAAa,EAAA;AACnC,EAAA,MAAMqH,SAAS,GAA4BrH,GAAG,CAC5C3B,OAAO,EAAE,CACTC,aAAa,EAAE,CACfM,GAAG,CAAEV,QAAQ,IAAI;IACjB,MAAMmd,SAAS,GAAGnd,QAAQ,CACxBX,WAAW,EAAE,CACbsE,MAAM,CAAEpE,MAAM,IAAKA,MAAM,CAACC,YAAY,KAAKC,iBAAY,CAACC,IAAI,CAAC,CAACzB,MAAM,CAAA;AAEtE;IACA,MAAM8f,UAAU,GAAG,IAAIpiB,GAAG,CAAoBqE,QAAQ,CAACge,cAAc,EAAE,CAAC,CAAA;AACxE,IAAA,MAAMtS,KAAK,GAAG5J,GAAG,CACf/B,QAAQ,EAAE,CACV6P,SAAS,EAAE,CACXjM,MAAM,CAAEsa,GAAG,IAAI;AACf,MAAA,MAAM9a,KAAK,GAAG8a,GAAG,CAAC5T,QAAQ,EAAE,CAAA;AAC5B,MAAA,MAAM9K,MAAM,GAAG0e,GAAG,CAAC/S,SAAS,EAAE,CAAA;AAC9B,MAAA,IAAI/H,KAAK,YAAYoI,YAAO,IAAIhM,MAAM,KAAKS,QAAQ,EAAE;AACpD,QAAA,OAAO,IAAI,CAAA;AACZ,OAAA;AACA,MAAA,IAAImD,KAAK,YAAYoI,YAAO,IAAIhM,MAAM,YAAYiM,sBAAiB,IAAIuS,UAAU,CAAC1iB,GAAG,CAACkE,MAAM,CAAC,EAAE;AAC9F,QAAA,OAAO,IAAI,CAAA;AACZ,OAAA;AACA,MAAA,OAAO,KAAK,CAAA;KACZ,CAAC,CACDmB,GAAG,CAAEud,GAAG,IAAKA,GAAG,CAAC1V,OAAO,EAAE,CAAC,CAAA;IAE7B,OAAO;AACNrP,MAAAA,IAAI,EAAE8G,QAAQ,CAACuI,OAAO,EAAE;MACxB4U,SAAS;AACT1U,MAAAA,QAAQ,EAAEiD,KAAK;AACfwS,MAAAA,SAAS,EAAEle,QAAQ,CAACme,YAAY,EAAE;AAClCC,MAAAA,WAAW,EAAEpe,QAAQ,CAACqe,cAAc,EAAE;KACtC,CAAA;AACF,GAAC,CAAC,CAAA;EAEH,OAAO;AAAEnB,IAAAA,UAAU,EAAE/T,SAAAA;GAAW,CAAA;AACjC,CAAA;AAEA;AACA,SAAST,YAAYA,CAAC5G,GAAa,EAAA;AAClC,EAAA,MAAM2G,QAAQ,GAA2B3G,GAAG,CAC1C3B,OAAO,EAAE,CACTuI,YAAY,EAAE,CACdhI,GAAG,CAAEgK,OAAO,IAAI;IAChB,MAAMyS,SAAS,GAAGzS,OAAO,CACvBrL,WAAW,EAAE,CACbsE,MAAM,CAAEpE,MAAM,IAAKA,MAAM,CAACC,YAAY,KAAKC,iBAAY,CAACC,IAAI,CAAC,CAACzB,MAAM,CAAA;AAEtE,IAAA,MAAMyN,KAAK,GAAG5J,GAAG,CACf/B,QAAQ,EAAE,CACViK,eAAe,CAACU,OAAO,CAAC,CACxB/G,MAAM,CAAEsG,IAAI,IAAKA,IAAI,CAACiB,SAAS,EAAE,CAAC1L,YAAY,KAAKC,iBAAY,CAACC,IAAI,CAAC,CACrEgB,GAAG,CAAEuJ,IAAI,IAAKA,IAAI,CAAC1B,OAAO,EAAE,CAAC,CAAA;AAE/B,IAAA,MAAM+V,UAAU,GAAGC,eAAU,CAAC1V,OAAO,CAAC6B,OAAO,CAACvS,QAAQ,EAAG,EAAEuS,OAAO,CAACrS,WAAW,EAAE,CAAC,CAAA;IAEjF,IAAImmB,WAAW,GAAG,EAAE,CAAA;AACpB,IAAA,IAAI9T,OAAO,CAACrS,WAAW,EAAE,KAAK,YAAY,EAAE;MAC3C,MAAMomB,SAAS,GAAGC,aAAO,CAAChU,OAAO,CAACvS,QAAQ,EAAG,CAAC,CAAA;AAC9C,MAAA,MAAMwmB,GAAG,GAAGF,SAAS,CAACG,oBAAoB,CAAC,CAAC,CAAC,CAAA;AAC7C,MAAA,IAAID,GAAG,CAACE,UAAU,KAAKC,2BAAkB,EAAE;AAC1CN,QAAAA,WAAW,GAAG,OAAO,CAAA;AACtB,OAAC,MAAM,IAAIG,GAAG,CAACE,UAAU,KAAKE,2BAAkB,EAAE;AACjDP,QAAAA,WAAW,GAAG,OAAO,CAAA;AACtB,OAAA;AACD,KAAA;IAEA,OAAO;AACNtlB,MAAAA,IAAI,EAAEwR,OAAO,CAACnC,OAAO,EAAE;AACvByW,MAAAA,GAAG,EAAEtU,OAAO,CAAC+B,MAAM,EAAE;MACrBf,KAAK,EAAEhO,KAAK,CAACC,IAAI,CAAC,IAAIhC,GAAG,CAAC+P,KAAK,CAAC,CAAC;MACjCyR,SAAS;AACT8B,MAAAA,QAAQ,EAAEvU,OAAO,CAACrS,WAAW,EAAE;MAC/BmmB,WAAW;MACXF,UAAU,EAAEA,UAAU,GAAGA,UAAU,CAACxd,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE;AAClD1F,MAAAA,IAAI,EAAEsP,OAAO,CAACvS,QAAQ,EAAG,CAACulB,UAAU;AACpCwB,MAAAA,OAAO,EAAEX,eAAU,CAACY,iBAAiB,CAACzU,OAAO,CAACvS,QAAQ,EAAG,EAAEuS,OAAO,CAACrS,WAAW,EAAE,CAAA;KAChF,CAAA;AACF,GAAC,CAAC,CAAA;EAEH,OAAO;AAAE6kB,IAAAA,UAAU,EAAEzU,QAAAA;GAAU,CAAA;AAChC,CAAA;AAEA;AACA,SAAStG,cAAcA,CAACL,GAAa,EAAA;AACpC,EAAA,MAAM8a,UAAU,GAA6B9a,GAAG,CAC9C3B,OAAO,EAAE,CACTgC,cAAc,EAAE,CAChBzB,GAAG,CAAEsO,IAAI,IAAI;IACb,IAAIoQ,OAAO,GAAG1a,QAAQ,CAAA;IACtB,IAAI2a,OAAO,GAAG,CAAC3a,QAAQ,CAAA;IACvBsK,IAAI,CAACrI,YAAY,EAAE,CAACrE,OAAO,CAAEoE,OAAO,IAAI;AACvC,MAAA,MAAMmB,KAAK,GAAGnB,OAAO,CAACE,QAAQ,EAAE,CAAA;MAChC,IAAI,CAACiB,KAAK,EAAE,OAAA;AACZuX,MAAAA,OAAO,GAAGjjB,IAAI,CAAC0G,GAAG,CAACuc,OAAO,EAAEvX,KAAK,CAACyX,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAChDD,MAAAA,OAAO,GAAGljB,IAAI,CAACyG,GAAG,CAACyc,OAAO,EAAExX,KAAK,CAAC0X,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AACjD,KAAC,CAAC,CAAA;IAEF,IAAInkB,IAAI,GAAG,CAAC,CAAA;IACZ,IAAIokB,SAAS,GAAG,CAAC,CAAA;AACjB,IAAA,MAAMniB,SAAS,GAAkB,IAAI1B,GAAG,EAAE,CAAA;IAC1CqT,IAAI,CAACrI,YAAY,EAAE,CAACrE,OAAO,CAAEoE,OAAO,IAAI;AACvC,MAAA,MAAMmB,KAAK,GAAGnB,OAAO,CAACE,QAAQ,EAAE,CAAA;AAChC,MAAA,MAAMkB,MAAM,GAAGpB,OAAO,CAACG,SAAS,EAAE,CAAA;MAClC,IAAI,CAACgB,KAAK,EAAE,OAAA;AACZ2X,MAAAA,SAAS,IAAI3X,KAAK,CAACrN,QAAQ,EAAE,CAAA;AAC7B6C,MAAAA,SAAS,CAAC9B,GAAG,CAACsM,KAAK,CAAC,CAAA;MACpB,IAAI,CAACC,MAAM,EAAE,OAAA;AACbzK,MAAAA,SAAS,CAAC9B,GAAG,CAACuM,MAAM,CAAC,CAAA;AACtB,KAAC,CAAC,CAAA;IACFpK,KAAK,CAACC,IAAI,CAACN,SAAS,CAAC,CAACiF,OAAO,CAAEiE,QAAQ,IAAI;AAC1CnL,MAAAA,IAAI,IAAImL,QAAQ,CAAC9H,QAAQ,EAAG,CAACif,UAAU,CAAA;AACxC,KAAC,CAAC,CAAA;IAEF,OAAO;AACNxkB,MAAAA,IAAI,EAAE8V,IAAI,CAACzG,OAAO,EAAE;AACpBkX,MAAAA,QAAQ,EAAEzQ,IAAI,CAACE,YAAY,EAAE,CAACjR,MAAM;AACpCmR,MAAAA,QAAQ,EAAEJ,IAAI,CAACrI,YAAY,EAAE,CAAC1I,MAAM;AACpCyhB,MAAAA,QAAQ,EAAEvjB,IAAI,CAAC8a,KAAK,CAAC,CAACoI,OAAO,GAAGD,OAAO,IAAI,IAAI,CAAC,GAAG,IAAI;AACvDI,MAAAA,SAAS,EAAEA,SAAS;AACpBpkB,MAAAA,IAAI,EAAEA,IAAAA;KACN,CAAA;AACF,GAAC,CAAC,CAAA;EAEH,OAAO;AAAE8hB,IAAAA,UAAU,EAAEN,UAAAA;GAAY,CAAA;AAClC,CAAA;AAgEA,MAAMgB,uBAAuB,GAAG,CAC/B,QAAQ,EACR,OAAO,EACP,WAAW,EACX,YAAY,EACZ,WAAW,EACX,gBAAgB,EAChB,cAAc,CACd,CAAA;AAED,MAAM+B,iBAAiB,GAA2B;AACjDzH,EAAAA,YAAY,EAAE,KAAK;AACnBhZ,EAAAA,WAAW,EAAE,KAAK;AAClBD,EAAAA,WAAW,EAAE,KAAK;AAClBiX,EAAAA,UAAU,EAAE,IAAI;AAChB0J,EAAAA,UAAU,EAAE,KAAK;AACjBC,EAAAA,UAAU,EAAE,KAAK;AACjBC,EAAAA,SAAS,EAAE,IAAA;CACX,CAAA;AAED;AACA,SAAS9C,WAAWA,CAACxhB,CAAW,EAAA;AAC/B,EAAA,KAAK,IAAIhD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgD,CAAC,CAACyC,MAAM,EAAEzF,CAAC,EAAE,EAAE;IAClC,IAAKgD,CAAC,CAAChD,CAAC,CAAY,CAACgE,OAAO,EAAEhB,CAAC,CAAChD,CAAC,CAAC,GAAG6e,MAAM,CAAC7b,CAAC,CAAChD,CAAC,CAAC,CAACgE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;AAC7D,GAAA;AACA,EAAA,OAAOhB,CAAC,CAAA;AACT,CAAA;AAEA,SAASgiB,mBAAmBA,CAACjX,QAAkB,EAAA;AAC9C,EAAA,MAAMvH,KAAK,GAAGuH,QAAQ,CAAC9H,QAAQ,EAAG,CAAA;EAClC,MAAMshB,IAAI,GAAGJ,iBAAiB,CAAC3gB,KAAK,CAAC/D,WAAW,CAAC/B,IAAI,CAAC,IAAI,GAAG,CAAA;EAC7D,MAAM+D,MAAM,GAAGsJ,QAAQ,CAACU,aAAa,EAAE,GAAG,OAAO,GAAG,EAAE,CAAA;EACtD,OAAO8Y,IAAI,GAAG9iB,MAAM,CAAA;AACrB;;AC1TA,MAAMuE,MAAI,GAAG,UAAU,CAAA;AAOvB,MAAMwe,iBAAiB,GAA8B;AACpDnd,EAAAA,GAAG,EAAE,CAAA;CACL,CAAA;AAED;;;;;;;;;;;;;;;;;;AAkBG;AACa,SAAAod,QAAQA,CAACre,QAAA,EAA6C;AAAA,EAAA,IAA7CA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,QAAA,GAA4Boe,iBAAiB,CAAA;AAAA,GAAA;AACrE,EAAA,MAAMne,OAAO,GAAG;AAAE,IAAA,GAAGme,iBAAiB;IAAE,GAAGpe,QAAAA;GAAuC,CAAA;AAElF,EAAA,OAAO3I,eAAe,CAACuI,MAAI,EAAGM,GAAa,IAAU;AACpD,IAAA,MAAMC,MAAM,GAAGD,GAAG,CAACE,SAAS,EAAE,CAAA;AAC9B,IAAA,MAAMC,IAAI,GAAGH,GAAG,CAAC3B,OAAO,EAAE,CAAA;AAE1B,IAAA,IAAI8B,IAAI,CAACE,cAAc,EAAE,CAAClE,MAAM,EAAE;AACjC8D,MAAAA,MAAM,CAACgQ,IAAI,EAAIvQ,EAAAA,MAAI,8DAA8D,CAAC,CAAA;AAClFO,MAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AAClC,MAAA,OAAA;AACD,KAAA;AAEA,IAAA,MAAM0e,cAAc,GAAGpe,GAAG,CAAC6Y,eAAe,CAACwF,+BAAoB,CAAC,CAAA;IAEhE,IAAIC,UAAU,GAAG,CAAC,CAAA;IAClB,IAAIC,YAAY,GAAG,CAAC,CAAA;IAEpB,KAAK,MAAM9d,KAAK,IAAIN,IAAI,CAACI,UAAU,EAAE,EAAE;AACtC;AACA,MAAA,MAAMie,aAAa,GAAG,IAAInlB,GAAG,EAAmB,CAAA;AAChDoH,MAAAA,KAAK,CAAC8I,QAAQ,CAAE7H,IAAI,IAAI;AACvB,QAAA,MAAM4C,IAAI,GAAG5C,IAAI,CAACyW,OAAO,EAAE,CAAA;QAC3B,IAAI,CAAC7T,IAAI,EAAE,OAAA;QACXka,aAAa,CAAC1kB,GAAG,CAACwK,IAAI,EAAE,CAACka,aAAa,CAAC5kB,GAAG,CAAC0K,IAAI,CAAC,IAAI,IAAIzK,GAAG,EAAQ,EAAEJ,GAAG,CAACiI,IAAI,CAAC,CAAC,CAAA;AAChF,OAAC,CAAC,CAAA;AAEF;MACA,MAAM+c,aAAa,GAAG,EAAE,CAAA;AACxB,MAAA,KAAK,MAAMna,IAAI,IAAI1I,KAAK,CAACC,IAAI,CAAC2iB,aAAa,CAACzkB,IAAI,EAAE,CAAC,EAAE;AACpD,QAAA,MAAM2kB,KAAK,GAAG9iB,KAAK,CAACC,IAAI,CAAC2iB,aAAa,CAAC5kB,GAAG,CAAC0K,IAAI,CAAE,CAAC,CAAA;AAClD,QAAA,IAAIoa,KAAK,CAACviB,MAAM,GAAG4D,OAAO,CAACgB,GAAG,EAAE,SAAA;AAChC,QAAA,IAAI2d,KAAK,CAAClhB,IAAI,CAAEkE,IAAI,IAAKA,IAAI,CAACid,OAAO,EAAE,CAAC,EAAE,SAAA;AAE1C;AACA;AACA,QAAA,IAAIra,IAAI,CAACC,cAAc,EAAE,CAAC/G,IAAI,CAACohB,SAAS,CAAC,IAAIF,KAAK,CAAClhB,IAAI,CAACqhB,QAAQ,CAAC,EAAE,SAAA;AAEnE,QAAA,MAAMC,KAAK,GAAGC,WAAW,CAAC/e,GAAG,EAAEoe,cAAc,EAAE9Z,IAAI,EAAEoa,KAAK,CAACviB,MAAM,CAAC,CAAA;AAClE,QAAA,MAAM6iB,gBAAgB,GAAGF,KAAK,CAACzmB,YAAY,CAAC,aAAa,CAAE,CAAA;AAC3D,QAAA,MAAM4mB,aAAa,GAAGH,KAAK,CAACzmB,YAAY,CAAC,UAAU,CAAE,CAAA;AACrD,QAAA,MAAM6mB,UAAU,GAAGJ,KAAK,CAACzmB,YAAY,CAAC,OAAO,CAAE,CAAA;AAE/C,QAAA,MAAM8mB,SAAS,GAAGnf,GAAG,CAACkB,UAAU,EAAE,CAACke,OAAO,CAAC9a,IAAI,CAAC,CAAC+a,YAAY,CAAC,yBAAyB,EAAEP,KAAK,CAAC,CAAA;AAC/Fre,QAAAA,KAAK,CAACa,QAAQ,CAAC6d,SAAS,CAAC,CAAA;QAEzB,IAAIG,gBAAgB,GAAG,KAAK,CAAA;QAC5B,IAAIC,aAAa,GAAG,KAAK,CAAA;QACzB,IAAIC,UAAU,GAAG,KAAK,CAAA;AAEtB;AACA,QAAA,KAAK,IAAI9oB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgoB,KAAK,CAACviB,MAAM,EAAEzF,CAAC,EAAE,EAAE;AACtC,UAAA,IAAI6K,CAAO,EAAEke,CAAO,EAAEC,CAAO,CAAA;AAC7B,UAAA,MAAMhe,IAAI,GAAGgd,KAAK,CAAChoB,CAAC,CAAC,CAAA;AAErBsoB,UAAAA,gBAAgB,CAAC1K,UAAU,CAAC5d,CAAC,EAAG6K,CAAC,GAAGG,IAAI,CAACie,mBAAmB,EAAG,CAAC,CAAA;AAChEV,UAAAA,aAAa,CAAC3K,UAAU,CAAC5d,CAAC,EAAG+oB,CAAC,GAAG/d,IAAI,CAACke,gBAAgB,EAAG,CAAC,CAAA;AAC1DV,UAAAA,UAAU,CAAC5K,UAAU,CAAC5d,CAAC,EAAGgpB,CAAC,GAAGhe,IAAI,CAACme,aAAa,EAAG,CAAC,CAAA;AAEpD,UAAA,IAAI,CAACvH,cAAS,CAACC,EAAE,CAAChX,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE+d,gBAAgB,GAAG,IAAI,CAAA;UACxD,IAAI,CAAChH,cAAS,CAACC,EAAE,CAACkH,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAEF,aAAa,GAAG,IAAI,CAAA;AACxD,UAAA,IAAI,CAACjH,cAAS,CAACC,EAAE,CAACmH,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAEF,UAAU,GAAG,IAAI,CAAA;AAElD;AACA9d,UAAAA,IAAI,CAAC0d,OAAO,CAAC,IAAI,CAAC,CAAA;AAClBX,UAAAA,aAAa,CAAC/iB,IAAI,CAACgG,IAAI,CAAC,CAAA;AACzB,SAAA;AAEA,QAAA,IAAI,CAAC4d,gBAAgB,EAAEN,gBAAgB,CAAC/Y,OAAO,EAAE,CAAA;AACjD,QAAA,IAAI,CAACsZ,aAAa,EAAEN,aAAa,CAAChZ,OAAO,EAAE,CAAA;AAC3C,QAAA,IAAI,CAACuZ,UAAU,EAAEN,UAAU,CAACjZ,OAAO,EAAE,CAAA;AAErC6Z,QAAAA,gBAAgB,CAACrB,aAAa,EAAExe,MAAM,CAAC,CAAA;AAEvCqe,QAAAA,UAAU,EAAE,CAAA;QACZC,YAAY,IAAIG,KAAK,CAACviB,MAAM,CAAA;AAC7B,OAAA;AACD,KAAA;IAEA,IAAImiB,UAAU,GAAG,CAAC,EAAE;MACnBre,MAAM,CAACgM,IAAI,CAAI,CAAAvM,EAAAA,MAAiB,aAAA4e,UAA4B,CAAA,eAAA,EAAAC,YAA+B,CAAA,iBAAA,CAAA,CAAC,CAAA;AAC7F,KAAC,MAAM;MACNte,MAAM,CAACgM,IAAI,CAAI,CAAAvM,EAAAA,MAA0B,sBAAAK,OAAO,CAACgB,GAA8B,CAAA,yBAAA,CAAA,CAAC,CAAA;AACjF,KAAA;IAEA,IAAIqd,cAAc,CAAC2B,cAAc,EAAE,CAAC5jB,MAAM,KAAK,CAAC,EAAE;MACjDiiB,cAAc,CAACnY,OAAO,EAAE,CAAA;AACzB,KAAA;AAEAhG,IAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AACnC,GAAC,CAAC,CAAA;AACH,CAAA;AAEA,SAASogB,gBAAgBA,CAACpB,KAAa,EAAEze,MAAe,EAAA;AACvD,EAAA,IAAIyB,IAAsB,CAAA;EAC1B,IAAIse,WAAW,GAAG,CAAC,CAAA;AACnB,EAAA,OAAQte,IAAI,GAAGgd,KAAK,CAACtW,GAAG,EAAE,EAAG;AAC5B,IAAA,IACC1G,IAAI,CAACN,YAAY,EAAE,CAACjF,MAAM,IAC1BuF,IAAI,CAACue,SAAS,EAAE,IAChBve,IAAI,CAACyW,OAAO,EAAE,IACdzW,IAAI,CAACid,OAAO,EAAE,IACdjd,IAAI,CAACwa,cAAc,EAAE,CAAC/f,MAAM,EAC3B;AACD,MAAA,SAAA;AACD,KAAA;AACA,IAAA,MAAM+jB,UAAU,GAAGxe,IAAI,CAACE,aAAa,EAAE,CAAA;AACvC,IAAA,IAAIse,UAAU,EAAExB,KAAK,CAAChjB,IAAI,CAACwkB,UAAU,CAAC,CAAA;IACtCxe,IAAI,CAACuE,OAAO,EAAE,CAAA;AACd+Z,IAAAA,WAAW,EAAE,CAAA;AACd,GAAA;EAEA/f,MAAM,CAACU,KAAK,CAAC,CAAA,EAAGjB,MAAiB,CAAAsgB,UAAAA,EAAAA,WAA2B,gBAAA,CAAC,CAAA;AAC9D,CAAA;AAEA,SAASpB,SAASA,CAAC3mB,IAAe,EAAA;AACjC,EAAA,MAAMiG,QAAQ,GAAGjG,IAAI,CAACkG,WAAW,EAAE,CAAA;EACnC,OAAO,CAAC,EAAED,QAAQ,IAAIA,QAAQ,CAACiiB,YAAY,CAAC,sBAAsB,CAAC,CAAC,CAAA;AACrE,CAAA;AAEA,SAAStB,QAAQA,CAACnd,IAAU,EAAA;AAC3B,EAAA,MAAMc,KAAK,GAAGd,IAAI,CAACme,aAAa,EAAE,CAAA;AAClC,EAAA,OAAO,CAACvH,cAAS,CAACC,EAAE,CAAC/V,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;AACvC,CAAA;AAEA,SAASuc,WAAWA,CAAC/e,GAAa,EAAEoe,cAAoC,EAAE9Z,IAAU,EAAEtH,KAAa,EAAA;AAClG,EAAA,MAAM6O,MAAM,GAAGvH,IAAI,CAACC,cAAc,EAAE,CAAC,CAAC,CAAC,CAAClM,YAAY,CAAC,UAAU,CAAE,CAACkZ,SAAS,EAAE,CAAA;EAE7E,MAAMyN,gBAAgB,GAAGhf,GAAG,CAC1BwR,cAAc,EAAE,CAChBE,OAAO,CAAC,MAAM,CAAC,CACf5U,QAAQ,CAAC,IAAIsZ,YAAY,CAAC,CAAC,GAAGpZ,KAAK,CAAC,CAAC,CACrCyU,SAAS,CAAC5F,MAAM,CAAC,CAAA;EACnB,MAAMoT,aAAa,GAAGjf,GAAG,CACvBwR,cAAc,EAAE,CAChBE,OAAO,CAAC,MAAM,CAAC,CACf5U,QAAQ,CAAC,IAAIsZ,YAAY,CAAC,CAAC,GAAGpZ,KAAK,CAAC,CAAC,CACrCyU,SAAS,CAAC5F,MAAM,CAAC,CAAA;EACnB,MAAMqT,UAAU,GAAGlf,GAAG,CACpBwR,cAAc,EAAE,CAChBE,OAAO,CAAC,MAAM,CAAC,CACf5U,QAAQ,CAAC,IAAIsZ,YAAY,CAAC,CAAC,GAAGpZ,KAAK,CAAC,CAAC,CACrCyU,SAAS,CAAC5F,MAAM,CAAC,CAAA;EAEnB,OAAOuS,cAAc,CACnBgC,mBAAmB,EAAE,CACrBlS,YAAY,CAAC,aAAa,EAAE8Q,gBAAgB,CAAC,CAC7C9Q,YAAY,CAAC,UAAU,EAAE+Q,aAAa,CAAC,CACvC/Q,YAAY,CAAC,OAAO,EAAEgR,UAAU,CAAC,CAAA;AACpC;;AChLA,MAAMmB,uBAAuB,GAAmC;AAC/DC,EAAAA,cAAc,EAAE,KAAA;CAChB,CAAA;AAED;;;;;;;;;;;;;;;;;;;;AAoBG;SACaC,cAAcA,CAACxT,KAAkB,EAAEhN,SAAkC;AAAA,EAAA,IAAlCA;IAAAA,UAAgC,EAAE,CAAA;AAAA,GAAA;AACpFA,EAAAA,OAAO,GAAG;AAAE,IAAA,GAAGsgB,uBAAuB;IAAE,GAAGtgB,OAAAA;GAAS,CAAA;AACpD,EAAA,MAAMygB,YAAY,GAAGzT,KAAK,CAAC,CAAC,CAAE,CAAA;EAC9B,MAAMjP,QAAQ,GAAGC,aAAQ,CAACC,SAAS,CAACwiB,YAAY,CAACviB,QAAQ,EAAE,CAAE,CAAA;AAE7D;AACA,EAAA,IAAI,CAAC8B,OAAO,CAACugB,cAAc,IAAI,IAAIzmB,GAAG,CAACkT,KAAK,CAACnO,GAAG,CAACf,kBAAkB,CAAC,CAAC,CAACvE,IAAI,GAAG,CAAC,EAAE;IAC/E,MAAM,IAAIL,KAAK,CACd,EAAE,GACD,qDAAqD,GACrD,0DAA0D,CAC3D,CAAA;AACF,GAAA;AAEA,EAAA,MAAMwnB,SAAS,GAAG,EAAmB,CAAC;AAEtC,EAAA,MAAMC,WAAW,GAAG,EAAmC,CAAC;EAExD,IAAI1N,cAAc,GAAG,CAAC,CAAA;EACtB,IAAIU,eAAe,GAAG,CAAC,CAAA;AAEvB;AACA,EAAA,KAAK,MAAM4D,OAAO,IAAIvK,KAAK,EAAE;AAC5B,IAAA,MAAM7U,OAAO,GAAGyoB,mBAAmB,CAACrJ,OAAO,CAAC,CAAA;IAC5C,MAAMjb,KAAK,GAAG,EAAE,CAAA;AAEhB,IAAA,KAAK,IAAI3F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwB,OAAO,CAACiE,MAAM,EAAEzF,CAAC,EAAE,EAAE;AACxC,MAAA,MAAMgK,KAAK,GAAGxI,OAAO,CAACxB,CAAC,CAAC,CAAA;AACxB,MAAA,IAAI2F,KAAK,CAACqE,KAAK,CAAC,KAAKkgB,SAAS,EAAE;AAC/BvkB,QAAAA,KAAK,CAACqE,KAAK,CAAC,GAAGsS,cAAc,EAAE,CAAA;AAEhC,OAAA;AACAU,MAAAA,eAAe,EAAE,CAAA;AAClB,KAAA;IACA+M,SAAS,CAAC/kB,IAAI,CAAC,IAAI0B,WAAW,CAACf,KAAK,CAAC,CAAC,CAAA;AAEtCqkB,IAAAA,WAAW,CAAChlB,IAAI,CAACxD,OAAO,CAAC,CAAA;AAC1B,GAAA;AAEA;EACA,MAAMsf,OAAO,GAAG1Z,QAAQ,CAAC+iB,eAAe,EAAE,CAACC,OAAO,CAACN,YAAY,CAACloB,OAAO,EAAE,CAAC,CAACyoB,WAAW,CAACP,YAAY,CAACriB,WAAW,EAAE,CAAC,CAAA;EAClH,KAAK,MAAMU,QAAQ,IAAI2hB,YAAY,CAAC9hB,aAAa,EAAE,EAAE;AACpD,IAAA,MAAMsiB,YAAY,GAAGR,YAAY,CAACnoB,YAAY,CAACwG,QAAQ,CAAE,CAAA;IACzD,MAAMoiB,cAAc,GAAGC,8BAAyB,CAACF,YAAY,CAACjiB,gBAAgB,EAAE,CAAC,CAAA;IACjF,MAAM+Y,YAAY,GAAGha,QAAQ,CAC3B0T,cAAc,EAAE,CAChBE,OAAO,CAACsP,YAAY,CAAC9b,OAAO,EAAE,CAAC,CAC/BuM,SAAS,CAACuP,YAAY,CAACzP,SAAS,EAAE,CAAC,CACnCiF,aAAa,CAACwK,YAAY,CAAC7b,aAAa,EAAE,CAAC,CAC3CrI,QAAQ,CAAC,IAAImkB,cAAc,CAACjO,cAAc,GAAGgO,YAAY,CAACxkB,cAAc,EAAE,CAAC,CAAC,CAAA;AAC9Egb,IAAAA,OAAO,CAACtJ,YAAY,CAACrP,QAAQ,EAAEiZ,YAAY,CAAC,CAAA;AAC7C,GAAA;AAEA;AACA,EAAA,MAAM9U,eAAe,GAAGwd,YAAY,CAACroB,UAAU,EAAE,GAAG4E,aAAa,CAACiW,cAAc,CAAC,GAAG,IAAI,CAAA;AACxF,EAAA,MAAMmO,UAAU,GACfne,eAAe,IACflF,QAAQ,CACN0T,cAAc,EAAE,CAChBC,SAAS,CAAC+O,YAAY,CAACroB,UAAU,EAAG,CAACoZ,SAAS,EAAE,CAAC,CACjDzU,QAAQ,CAACC,aAAa,CAAC2W,eAAe,EAAEV,cAAc,CAAC,CAAC,CAAA;AAC3DwE,EAAAA,OAAO,CAACrJ,UAAU,CAACgT,UAAU,CAAC,CAAA;AAE9B;EACA,IAAIC,YAAY,GAAG,CAAC,CAAA;AACpB,EAAA,KAAK,IAAIC,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAGZ,SAAS,CAACtkB,MAAM,EAAEklB,SAAS,EAAE,EAAE;AAClE,IAAA,MAAM/J,OAAO,GAAGvK,KAAK,CAACsU,SAAS,CAAC,CAAA;AAChC,IAAA,MAAMhlB,KAAK,GAAGokB,SAAS,CAACY,SAAS,CAAC,CAAA;AAClC,IAAA,MAAMC,YAAY,GAAGZ,WAAW,CAACW,SAAS,CAAC,CAAA;IAE3C,MAAME,cAAc,GAAGH,YAAY,CAAA;IACnC,IAAII,aAAa,GAAGD,cAAc,CAAA;IAElC,KAAK,MAAM1iB,QAAQ,IAAI2Y,OAAO,CAAC9Y,aAAa,EAAE,EAAE;AAC/C,MAAA,MAAMkZ,YAAY,GAAGN,OAAO,CAACjf,YAAY,CAACwG,QAAQ,CAAE,CAAA;AACpD,MAAA,MAAMiZ,YAAY,GAAGN,OAAO,CAACnf,YAAY,CAACwG,QAAQ,CAAE,CAAA;MACpD,MAAMwV,EAAE,GAAG,EAAc,CAAA;AAEzBmN,MAAAA,aAAa,GAAGD,cAAc,CAAA;AAC9B,MAAA,KAAK,IAAI7qB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4qB,YAAY,CAACnlB,MAAM,EAAEzF,CAAC,EAAE,EAAE;AAC7C,QAAA,MAAMgK,KAAK,GAAG4gB,YAAY,CAAC5qB,CAAC,CAAC,CAAA;AAC7BkhB,QAAAA,YAAY,CAACnF,UAAU,CAAC/R,KAAK,EAAE2T,EAAE,CAAC,CAAA;QAClCyD,YAAY,CAACxD,UAAU,CAACjY,KAAK,CAACqE,KAAK,CAAC,EAAE2T,EAAE,CAAC,CAAA;AACzC,QAAA,IAAI8M,UAAU,EAAE;UACfA,UAAU,CAAC/J,SAAS,CAACoK,aAAa,EAAE,EAAEnlB,KAAK,CAACqE,KAAK,CAAC,CAAC,CAAA;AACpD,SAAA;AACD,OAAA;AACD,KAAA;AAEA0gB,IAAAA,YAAY,GAAGI,aAAa,CAAA;AAC7B,GAAA;AAEA,EAAA,OAAOhK,OAAO,CAAA;AACf,CAAA;AAEA,SAASmJ,mBAAmBA,CAAC1oB,IAAe,EAAA;AAC3C,EAAA,MAAMC,OAAO,GAAGD,IAAI,CAACE,UAAU,EAAE,CAAA;AACjC,EAAA,IAAID,OAAO,EAAE,OAAOA,OAAO,CAACyE,QAAQ,EAA+B,CAAA;AACnE,EAAA,MAAMvE,QAAQ,GAAGH,IAAI,CAACI,YAAY,CAAC,UAAU,CAAE,CAAA;AAC/C,EAAA,OAAO0E,aAAa,CAAC3E,QAAQ,CAACM,QAAQ,EAAE,CAAC,CAAA;AAC1C;;AClHA,MAAMgH,MAAI,GAAG,MAAM,CAAA;AAEnB,MAAM;EAAE9B,IAAI;EAAEmN,IAAI;EAAE1H,IAAI;EAAE4H,SAAS;AAAE7H,EAAAA,QAAAA;AAAU,CAAA,GAAGzF,iBAAY,CAAA;AAE9D;AACA,MAAM8jB,OAAO,GAAG,CACf,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CACF,CAAA;AAoBF,MAAMC,aAAa,GAA0B;AACnDC,EAAAA,UAAU,EAAE,KAAK;AACjBC,EAAAA,SAAS,EAAE,KAAA;EACX;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BG;AACa,SAAA5iB,IAAIA,CAACc,QAAA,EAAqC;AAAA,EAAA,IAArCA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,QAAA,GAAwB4hB,aAAa,CAAA;AAAA,GAAA;AACzD,EAAA,MAAM3hB,OAAO,GAAG;AAAE,IAAA,GAAG2hB,aAAa;IAAE,GAAG5hB,QAAAA;GAAmC,CAAA;AAE1E,EAAA,OAAO3I,eAAe,CAACuI,MAAI,EAAA,UAAS5B,QAAkB,EAAA;IAAA,IAAmB;AACxE,MAAA,MAAMqC,IAAI,GAAGrC,QAAQ,CAACO,OAAO,EAAE,CAAA;AAC/B,MAAA,MAAM4B,MAAM,GAAGnC,QAAQ,CAACoC,SAAS,EAAE,CAAA;AAEnC;MACA,KAAK,MAAMO,KAAK,IAAIN,IAAI,CAACI,UAAU,EAAE,EAAE;AACtCshB,QAAAA,UAAU,CAAC/jB,QAAQ,EAAE2C,KAAK,EAAEV,OAAO,CAAC,CAAA;AACpCU,QAAAA,KAAK,CAAC8I,QAAQ,CAAE7H,IAAI,IAAKmgB,UAAU,CAAC/jB,QAAQ,EAAE4D,IAAI,EAAE3B,OAAO,CAAC,CAAC,CAAA;AAC9D,OAAA;AAEA;MAAA,OAAA7J,OAAA,CAAAC,OAAA,CACM2H,QAAQ,CAACkT,SAAS,CACvBvF,KAAK,CAAC;QACLtI,aAAa,EAAE,CAAC4H,IAAI,EAAE1H,IAAI,EAAE4H,SAAS,EAAE7H,QAAQ,CAAC;AAChDkI,QAAAA,cAAc,EAAE,IAAI;AACpBC,QAAAA,WAAW,EAAE,IAAI;AACjBF,QAAAA,UAAU,EAAE,KAAA;OACZ,CAAC,CACF,CAAA,CAAA7U,IAAA,CAAA,YAAA;AAEDyJ,QAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AAAC,OAAA,CAAA,CAAA;AACpC,KAAC,QAAAzI,CAAA,EAAA;AAAA,MAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,KAAA;GAAC,CAAA,CAAA;AACH,CAAA;AAWA,SAAS4qB,UAAUA,CAAC/jB,QAAkB,EAAEL,MAAoB,EAAEsC,OAA8B,EAAA;AAC3F,EAAA,MAAME,MAAM,GAAGnC,QAAQ,CAACoC,SAAS,EAAE,CAAA;EACnC,MAAM4hB,MAAM,GAAG,EAAgC,CAAA;AAE/C;AACA,EAAA,MAAMC,QAAQ,GAAGtkB,MAAM,CAAC2D,YAAY,EAAE,CAAA;AACtC,EAAA,KAAK,IAAI4gB,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAGD,QAAQ,CAAC5lB,MAAM,EAAE6lB,SAAS,EAAE,EAAE;AACjE,IAAA,MAAMtgB,IAAI,GAAGqgB,QAAQ,CAACC,SAAS,CAAC,CAAA;AAEhC;AACA,IAAA,MAAM5hB,UAAU,GAAGsB,IAAI,CAACnE,WAAW,EAAE,CAACC,IAAI,CAAEoQ,CAAC,IAAKA,CAAC,YAAYC,qBAAgB,CAAC,CAAA;AAChF,IAAA,IAAIzN,UAAU,EAAE,SAAA;AAEhB;AACA,IAAA,MAAMkE,IAAI,GAAG5C,IAAI,CAACyW,OAAO,EAAE,CAAA;IAC3B,IAAI,CAAC7T,IAAI,EAAE,SAAA;AAEX;AACA,IAAA,IAAI5C,IAAI,CAACye,YAAY,CAAC,yBAAyB,CAAC,EAAE,SAAA;AAElD;AACA,IAAA,IAAIze,IAAI,CAACid,OAAO,EAAE,EAAE,SAAA;IAEpB,KAAK,MAAM1mB,IAAI,IAAIqM,IAAI,CAACC,cAAc,EAAE,EAAE;AACzC;MACA,IAAItM,IAAI,CAAC0D,WAAW,EAAE,CAACQ,MAAM,GAAG,CAAC,EAAE,SAAA;AAEnC;AACA,MAAA,MAAM+B,QAAQ,GAAGjG,IAAI,CAACkG,WAAW,EAAE,CAAA;MACnC,IAAID,QAAQ,IAAIA,QAAQ,CAACiiB,YAAY,CAAC,sBAAsB,CAAC,EAAE,SAAA;MAE/D8B,iCAAiC,CAAChqB,IAAI,CAAC,CAAA;AAEvC,MAAA,IAAIyV,GAAG,GAAG7P,kBAAkB,CAAC5F,IAAI,CAAC,CAAA;AAElC,MAAA,MAAMiqB,OAAO,GAAG5d,IAAI,CAACmC,OAAO,EAAE,IAAI/E,IAAI,CAAC+E,OAAO,EAAE,CAAA;MAChD,IAAI1G,OAAO,CAAC4hB,UAAU,IAAK5hB,OAAO,CAAC6hB,SAAS,IAAIM,OAAQ,EAAE;QACzDxU,GAAG,IAAI,CAAIsU,CAAAA,EAAAA,SAAS,CAAE,CAAA,CAAA;AACvB,OAAA;AAEA,MAAA,IAAI,EAAEtU,GAAG,IAAIoU,MAAM,CAAC,EAAE;QACrBA,MAAM,CAACpU,GAAG,CAAC,GAAG;AACbX,UAAAA,KAAK,EAAE,EAAiB;AACxBoV,UAAAA,UAAU,EAAE,EAAY;AACxBC,UAAAA,SAAS,EAAE,EAAY;AACvBC,UAAAA,OAAO,EAAE3gB,IAAI;AACb4gB,UAAAA,OAAO,EAAE1B,SAAAA;SACK,CAAA;AAChB,OAAA;AAEA,MAAA,MAAM5b,KAAK,GAAG8c,MAAM,CAACpU,GAAG,CAAC,CAAA;AACzB1I,MAAAA,KAAK,CAAC+H,KAAK,CAACrR,IAAI,CAACzD,IAAI,CAAC,CAAA;AACtB+M,MAAAA,KAAK,CAACod,SAAS,CAAC1mB,IAAI,CAACgG,IAAI,CAAC,CAAA;AAC3B,KAAA;AACD,GAAA;AAEA;EACA,MAAM6gB,UAAU,GAAGlrB,MAAM,CAACyO,MAAM,CAACgc,MAAM,CAAC,CAACjgB,MAAM,CAACqF,IAAA,IAAA;IAAA,IAAC;AAAE6F,MAAAA,KAAAA;AAAK,KAAE,GAAA7F,IAAA,CAAA;AAAA,IAAA,OAAK6F,KAAK,CAAC5Q,MAAM,GAAG,CAAC,CAAA;GAAC,CAAA,CAAA;AAEhF;AACA,EAAA,MAAMqmB,QAAQ,GAAG,IAAI3oB,GAAG,CAAO0oB,UAAU,CAAC5K,OAAO,CAAE3S,KAAK,IAAKA,KAAK,CAACod,SAAS,CAAC,CAAC,CAAA;AAC9E,EAAA,KAAK,MAAM1gB,IAAI,IAAI8gB,QAAQ,EAAE;AAC5B,IAAA,MAAMle,IAAI,GAAG5C,IAAI,CAACyW,OAAO,EAAG,CAAA;IAC5B,MAAMsK,YAAY,GAAGne,IAAI,CAAC/G,WAAW,EAAE,CAACC,IAAI,CAAEC,MAAM,IAAI;MACvD,OAAOA,MAAM,CAACC,YAAY,KAAKE,IAAI,IAAI8D,IAAI,KAAKjE,MAAM,CAAA;AACvD,KAAC,CAAC,CAAA;AACF,IAAA,IAAIglB,YAAY,EAAE;MACjB/gB,IAAI,CAAC0d,OAAO,CAAC9a,IAAI,CAACqP,KAAK,EAAE,CAAC,CAAA;AAC3B,KAAA;AACD,GAAA;AAEA;AACA,EAAA,KAAK,MAAM3O,KAAK,IAAIud,UAAU,EAAE;IAC/B,MAAM;MAAEF,OAAO;AAAED,MAAAA,SAAAA;AAAW,KAAA,GAAGpd,KAAK,CAAA;AACpCA,IAAAA,KAAK,CAACsd,OAAO,GAAGD,OAAO,CAAClK,OAAO,EAAG,CAAA;AAClCnT,IAAAA,KAAK,CAACmd,UAAU,GAAGC,SAAS,CAACxjB,GAAG,CAAE8C,IAAI,IAAKA,IAAI,CAACyW,OAAO,EAAG,CAAC,CAAA;AAC5D,GAAA;AAEA;AACA,EAAA,KAAK,MAAMnT,KAAK,IAAIud,UAAU,EAAE;IAC/B,MAAM;MAAExV,KAAK;MAAEqV,SAAS;MAAED,UAAU;MAAEE,OAAO;AAAEC,MAAAA,OAAAA;AAAS,KAAA,GAAGtd,KAA6B,CAAA;AACxF,IAAA,MAAM0d,SAAS,GAAGL,OAAO,CAAChK,SAAS,EAAE,CAAA;AAErC,IAAA,KAAK,IAAI3hB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqW,KAAK,CAAC5Q,MAAM,EAAEzF,CAAC,EAAE,EAAE;AACtC,MAAA,MAAMisB,QAAQ,GAAGP,SAAS,CAAC1rB,CAAC,CAAC,CAAA;AAC7B,MAAA,MAAMksB,QAAQ,GAAGT,UAAU,CAACzrB,CAAC,CAAC,CAAA;AAE9B,MAAA,IAAIuB,IAAI,GAAG8U,KAAK,CAACrW,CAAC,CAAC,CAAA;AACnBksB,MAAAA,QAAQ,CAACC,eAAe,CAAC5qB,IAAI,CAAC,CAAA;AAE9B;AACA;MACA,IAAIoF,MAAM,CAACpF,IAAI,CAAC,IAAI6qB,mBAAmB,CAAC7qB,IAAI,CAAC,EAAE;AAC9CA,QAAAA,IAAI,GAAG8U,KAAK,CAACrW,CAAC,CAAC,GAAGqsB,mBAAmB,CAAChW,KAAK,CAACrW,CAAC,CAAC,CAAC,CAAA;AAChD,OAAA;AAEA;MACA,IAAIisB,QAAQ,KAAKN,OAAO,EAAE;AACzBhgB,QAAAA,UAAQ,CAACof,OAAO,EAAErf,QAAM,CAACqf,OAAO,EAAEiB,SAAS,CAAC,EAAEC,QAAQ,CAACtK,SAAS,EAAE,CAAC,CAAA;AACnE5C,QAAAA,kBAAkB,CAACxd,IAAI,EAAEwpB,OAAO,CAAC,CAAA;AAClC,OAAA;AACD,KAAA;AAEA,IAAA,MAAMjK,OAAO,GAAG+I,cAAc,CAACxT,KAAK,CAAC,CAAA;AACrC,IAAA,MAAMiG,cAAc,GAAGwE,OAAO,CAAC/b,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC/C,QAAQ,EAAE,CAAA;AAC7D4pB,IAAAA,OAAO,CAACU,YAAY,CAACxL,OAAO,CAAC,CAAA;IAE7BvX,MAAM,CAACU,KAAK,CACX,CAAA,EAAGjB,MAA4B,CAAAqN,qBAAAA,EAAAA,KAAK,CAAC5Q,MAAqB,CAAA,aAAA,CAAA,GACtD,GAAAxB,UAAU,CAACqY,cAAc,CAAC,CAAyBqP,sBAAAA,EAAAA,OAAO,CAAC5b,OAAO,EAAM,CAAA,EAAA,CAAA,CAC5E,CAAA;AACF,GAAA;AACD,CAAA;AAEA,SAASsc,mBAAmBA,CAAChnB,GAAc,EAAA;AAC1C,EAAA,MAAMC,GAAG,GAAGD,GAAG,CAAC4X,KAAK,EAAE,CAAA;EACvB,KAAK,MAAM9U,QAAQ,IAAI7C,GAAG,CAAC0C,aAAa,EAAE,EAAE;AAC3C1C,IAAAA,GAAG,CAACkS,YAAY,CAACrP,QAAQ,EAAE7C,GAAG,CAAC3D,YAAY,CAACwG,QAAQ,CAAE,CAAC8U,KAAK,EAAE,CAAC,CAAA;AAChE,GAAA;AACA,EAAA,MAAMzb,OAAO,GAAG8D,GAAG,CAAC7D,UAAU,EAAE,CAAA;EAChC,IAAID,OAAO,EAAE8D,GAAG,CAACmS,UAAU,CAACjW,OAAO,CAACyb,KAAK,EAAE,CAAC,CAAA;AAC5C,EAAA,OAAO3X,GAAG,CAAA;AACX,CAAA;AAEA,SAAS8mB,mBAAmBA,CAAC7qB,IAAe,EAAA;EAC3C,KAAK,MAAMuD,SAAS,IAAIvD,IAAI,CAACwD,cAAc,EAAE,EAAE;IAC9C,KAAK,MAAMgC,MAAM,IAAIjC,SAAS,CAAC+B,WAAW,EAAE,EAAE;MAC7C,IAAIE,MAAM,KAAKxF,IAAI,IAAIwF,MAAM,CAACC,YAAY,KAAKE,IAAI,EAAE;AACpD,QAAA,OAAO,IAAI,CAAA;AACZ,OAAA;AACD,KAAA;AACD,GAAA;AACA,EAAA,OAAO,KAAK,CAAA;AACb,CAAA;AAEA;;;;;AAKG;AACH,SAASqkB,iCAAiCA,CAAChqB,IAAe,EAAA;EACzD,KAAK,MAAM4G,QAAQ,IAAI,CAAC,UAAU,EAAE,QAAQ,EAAE,SAAS,CAAC,EAAE;AACzD,IAAA,MAAMrD,SAAS,GAAGvD,IAAI,CAACI,YAAY,CAACwG,QAAQ,CAAC,CAAA;IAC7C,IAAIrD,SAAS,IAAIA,SAAS,CAACwd,gBAAgB,EAAE,GAAG,CAAC,EAAE;AAClDD,MAAAA,mBAAmB,CAACla,QAAQ,EAAErD,SAAS,EAAE;AAAEkd,QAAAA,OAAO,EAAE,IAAA;AAAM,OAAA,CAAC,CAAA;AAC5D,KAAA;AACD,GAAA;AACD;;ACrQA;;;;;;;;;;;;;;AAcG;AACG,SAAUuK,mBAAmBA,CAACra,OAAgB,EAAA;AACnD,EAAA,MAAMsa,IAAI,GAAGC,qBAAqB,CAACva,OAAO,CAAC,CAAA;EAC3C,MAAM+U,QAAQ,GAAG,EAAE,CAAA;AACnB,EAAA,IAAIuF,IAAI,GAAGE,mBAAc,CAACC,CAAC,EAAE1F,QAAQ,CAACjiB,IAAI,CAAC0nB,mBAAc,CAACC,CAAC,CAAC,CAAA;AAC5D,EAAA,IAAIH,IAAI,GAAGE,mBAAc,CAACE,CAAC,EAAE3F,QAAQ,CAACjiB,IAAI,CAAC0nB,mBAAc,CAACE,CAAC,CAAC,CAAA;AAC5D,EAAA,IAAIJ,IAAI,GAAGE,mBAAc,CAACG,CAAC,EAAE5F,QAAQ,CAACjiB,IAAI,CAAC0nB,mBAAc,CAACG,CAAC,CAAC,CAAA;AAC5D,EAAA,IAAIL,IAAI,GAAGE,mBAAc,CAACI,CAAC,EAAE7F,QAAQ,CAACjiB,IAAI,CAAC0nB,mBAAc,CAACI,CAAC,CAAC,CAAA;AAC5D,EAAA,OAAO7F,QAAQ,CAAA;AAChB,CAAA;AAEA;;;;;;;;;;;;;;AAcG;AACG,SAAUwF,qBAAqBA,CAACva,OAAgB,EAAA;EACrD,MAAM9K,QAAQ,GAAGC,aAAQ,CAACC,SAAS,CAAC4K,OAAO,CAAC3K,QAAQ,EAAE,CAAE,CAAA;EACxD,IAAIilB,IAAI,GAAG,MAAM,CAAA;AACjB,EAAA,KAAK,MAAM/a,IAAI,IAAIrK,QAAQ,CAACG,QAAQ,EAAE,CAACiK,eAAe,CAACU,OAAO,CAAC,EAAE;AAChE,IAAA,MAAMnL,MAAM,GAAG0K,IAAI,CAACiB,SAAS,EAAE,CAAA;IAC/B,IAAI;AAAEuU,MAAAA,QAAAA;AAAU,KAAA,GAAGxV,IAAI,CAACE,aAAa,EAAsC,CAAA;IAE3E,IACCsV,QAAQ,IACRxV,IAAI,CAAC1B,OAAO,EAAE,KAAK,kBAAkB,IACrChJ,MAAM,YAAY8R,aAAQ,IAC1B9R,MAAM,CAAC4e,YAAY,EAAE,KAAK9M,aAAQ,CAACkU,SAAS,CAACC,MAAM,EAClD;AACD/F,MAAAA,QAAQ,IAAI,CAACyF,mBAAc,CAACI,CAAC,CAAA;AAC9B,KAAA;AAEA,IAAA,IAAI7F,QAAQ,EAAE;AACbuF,MAAAA,IAAI,IAAIvF,QAAQ,CAAA;AAChB,MAAA,SAAA;AACD,KAAA;AAEA,IAAA,IAAIlgB,MAAM,CAACC,YAAY,KAAKC,iBAAY,CAACC,IAAI,EAAE;AAC9CE,MAAAA,QAAQ,CAACoC,SAAS,EAAE,CAAC+P,IAAI,CAA4C,CAAA9H,wCAAAA,EAAAA,IAAI,CAAC1B,OAAO,EAAE,IAAI,CAAC,CAAA;AACzF,KAAA;AACD,GAAA;AACA,EAAA,OAAOyc,IAAI,CAAA;AACZ;;AChEA,MAAMxjB,MAAI,GAAG,SAAS,CAAA;AAatB,MAAMikB,gBAAgB,GAA8C;AACnE3tB,EAAAA,MAAM,EAAE,MAAA;CACR,CAAA;AAED;;;;;;;;;;;;;;;;;;;AAmBG;AACG,SAAUge,OAAOA,CAAClU,QAAwB,EAAA;AAC/C,EAAA,MAAMC,OAAO,GAAG;AAAE,IAAA,GAAG4jB,gBAAgB;IAAE,GAAG7jB,QAAAA;GAAsC,CAAA;AAChF,EAAA,MAAM8jB,OAAO,GAAG7jB,OAAO,CAAC6jB,OAA4C,CAAA;EAEpE,IAAI,CAACA,OAAO,EAAE;AACb,IAAA,MAAM,IAAI3qB,KAAK,EAAIyG,EAAAA,MAAI,0DAA0D,CAAC,CAAA;AACnF,GAAA;AAEA,EAAA,OAAOvI,eAAe,CAACuI,MAAI,EAAA,UAASM,GAAa,EAAA;IAAA,IAAmB;AACnE,MAAA,MAAMC,MAAM,GAAGD,GAAG,CAACE,SAAS,EAAE,CAAA;MAAC,OAAAhK,OAAA,CAAAC,OAAA,CAEzBytB,OAAO,CAACC,KAAK,EAAArtB,IAAA,CAAA,YAAA;AAEnB,QAAA,MAAMstB,IAAI,GAAGC,gBAAgB,CAAC/jB,GAAG,CAAC,CAAA;QAElC,KAAK,MAAM+R,UAAU,IAAI+R,IAAI,CAACE,mBAAmB,CAACjqB,IAAI,EAAE,EAAE;AACzD,UAAA,MAAMonB,UAAU,GAAGpP,UAAU,CAAC4B,KAAK,EAAE,CAAA;UACrC,IAAI2N,YAAY,GAAGH,UAAU,CAACxkB,QAAQ,EAAG,CAACE,KAAK,EAAE,CAAA;AACjD,UAAA,IAAI,EAAEykB,YAAY,YAAYlkB,WAAW,CAAC,EAAE;AAC3CkkB,YAAAA,YAAY,GAAG,IAAIlkB,WAAW,CAACkkB,YAAY,CAAC,CAAA;AAC7C,WAAA;AAEA;AACA,UAAA,MAAM,CAACjlB,KAAK,EAAE4nB,MAAM,CAAC,GAAGL,OAAO,CAACM,WAAW,CAC1C5C,YAAY,EACZwC,IAAI,CAACK,aAAa,CAACvqB,GAAG,CAACmY,UAAU,CAAC,KAAKxZ,cAAS,CAACC,IAAI,CAACM,SAAS,EAC/DiH,OAAO,CAAC/J,MAAM,KAAK,MAAM,CACzB,CAAA;AAEDmrB,UAAAA,UAAU,CAACrkB,QAAQ,CAACmnB,MAAM,IAAI,KAAK,GAAG,IAAI9mB,WAAW,CAACmkB,YAAY,CAAC,GAAGA,YAAY,CAAC,CAAA;AAEnF;UACA,KAAK,MAAM1J,YAAY,IAAIkM,IAAI,CAACE,mBAAmB,CAACpqB,GAAG,CAACmY,UAAU,CAAC,EAAE;AACpE,YAAA,MAAM+F,YAAY,GAAGF,YAAY,CAACjE,KAAK,EAAE,CAAA;AACzCvX,YAAAA,cAAc,CAAC0b,YAAY,EAAEzb,KAAK,EAAE4nB,MAAM,CAAC,CAAA;YAC3C,KAAK,MAAMhsB,IAAI,IAAI6rB,IAAI,CAACM,sBAAsB,CAACxqB,GAAG,CAACge,YAAY,CAAC,EAAE;AACjE,cAAA,IAAI3f,IAAI,CAACE,UAAU,EAAE,KAAK4Z,UAAU,EAAE;AACrC9Z,gBAAAA,IAAI,CAACgE,IAAI,CAAC8V,UAAU,EAAEoP,UAAU,CAAC,CAAA;AAClC,eAAA;AACA,cAAA,IAAIlpB,IAAI,CAACE,UAAU,EAAE,KAAKgpB,UAAU,EAAE;AACrClpB,gBAAAA,IAAI,CAACgE,IAAI,CAAC2b,YAAY,EAAEE,YAAY,CAAC,CAAA;gBACrC,KAAK,MAAM9hB,MAAM,IAAIiC,IAAI,CAAC0D,WAAW,EAAE,EAAE;AACxC3F,kBAAAA,MAAM,CAACiG,IAAI,CAAC2b,YAAY,EAAEE,YAAY,CAAC,CAAA;AACxC,iBAAA;AACD,eAAA;AACD,aAAA;AACD,WAAA;AACD,SAAA;AAEA;QAAA,OAAA5hB,OAAA,CAAAC,OAAA,CACM6J,GAAG,CAACgR,SAAS,CAClBvF,KAAK,CAAC;AACLtI,UAAAA,aAAa,EAAE,CAACxF,iBAAY,CAACyF,QAAQ,CAAC;AACtCkI,UAAAA,cAAc,EAAE,IAAI;AACpBC,UAAAA,WAAW,EAAE,IAAA;SACb,CAAC,CACF,CAAA,CAAA/U,IAAA,CAAA,YAAA;AAAA,UAAA,IAEG,CAACstB,IAAI,CAACE,mBAAmB,CAAC1qB,IAAI,EAAA;AACjC2G,YAAAA,MAAM,CAACgQ,IAAI,EAAIvQ,EAAAA,MAAI,2DAA2D,CAAC,CAAA;AAAC,WAAA,MAAA;AAEhFO,YAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AAAC,WAAA;AAAA,SAAA,CAAA,CAAA;AAAA,OAAA,CAAA,CAAA;AAErC,KAAC,QAAAzI,CAAA,EAAA;AAAA,MAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,KAAA;GAAC,CAAA,CAAA;AACH,CAAA;AASA;;;;;;;AAOG;AACH,SAAS8sB,gBAAgBA,CAACjmB,QAAkB,EAAA;AAC3C,EAAA,MAAMkmB,mBAAmB,GAAG,IAAI9qB,MAAM,EAAsB,CAAA;AAC5D,EAAA,MAAMirB,aAAa,GAAG,IAAI9qB,GAAG,EAAoC,CAAA;AACjE,EAAA,MAAM+qB,sBAAsB,GAAG,IAAIlrB,MAAM,EAAuB,CAAA;AAEhE,EAAA,KAAK,MAAMoL,IAAI,IAAIxG,QAAQ,CAACO,OAAO,EAAE,CAACgG,UAAU,EAAE,EAAE;IACnD,KAAK,MAAMpM,IAAI,IAAIqM,IAAI,CAACC,cAAc,EAAE,EAAE;AACzC,MAAA,MAAMrM,OAAO,GAAGD,IAAI,CAACE,UAAU,EAAE,CAAA;MACjC,IAAI,CAACD,OAAO,EAAE,SAAA;MAEdisB,aAAa,CAACrqB,GAAG,CAAC5B,OAAO,EAAED,IAAI,CAACK,OAAO,EAAE,CAAC,CAAA;AAE1C,MAAA,KAAK,MAAMkD,SAAS,IAAIF,kBAAkB,CAACrD,IAAI,CAAC,EAAE;AACjD+rB,QAAAA,mBAAmB,CAACvqB,GAAG,CAACvB,OAAO,EAAEsD,SAAS,CAAC,CAAA;AAC3C4oB,QAAAA,sBAAsB,CAAC3qB,GAAG,CAAC+B,SAAS,EAAEvD,IAAI,CAAC,CAAA;AAC5C,OAAA;AACD,KAAA;AACD,GAAA;EAEA,OAAO;IAAE+rB,mBAAmB;IAAEG,aAAa;AAAEC,IAAAA,sBAAAA;GAAwB,CAAA;AACtE;;AC7IA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBG;SACaC,oBAAoBA,CAACpsB,IAAiC,EAAEkH,KAAK,EAAW;AAAA,EAAA,IAAhBA,KAAK,KAAA,KAAA,CAAA,EAAA;AAALA,IAAAA,KAAK,GAAGyD,QAAQ,CAAA;AAAA,GAAA;AACvF,EAAA,IAAK2S,MAAM,CAAC+O,QAAQ,CAACnlB,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,IAAKA,KAAK,IAAI,CAAC,EAAE;AACxD,IAAA,MAAM,IAAIlG,KAAK,CAAC,CAAA,wCAAA,CAA0C,CAAC,CAAA;AAC5D,GAAA;EAEA,MAAMsrB,WAAW,GAAGtsB,IAAI,CAACI,YAAY,CAAC,UAAU,CAAE,CAACK,QAAQ,EAAE,CAAA;EAC7D,MAAM8rB,QAAQ,GAAGvsB,IAAI,CAACyG,aAAa,EAAE,CAACmD,MAAM,CAAEzK,IAAI,IAAKA,IAAI,CAACgX,UAAU,CAAC,UAAU,CAAC,CAAC,CAACjS,MAAM,CAAA;AAE1F;EAEA,MAAMjE,OAAO,GAAG,IAAIiF,WAAW,CAACqnB,QAAQ,GAAG,CAAC,CAAC,CAAA;EAC7C,MAAMC,UAAU,GAAG,IAAIrO,YAAY,CAACoO,QAAQ,GAAG,CAAC,CAAC,CAAA;EACjD,MAAME,UAAU,GAAG,IAAItO,YAAY,CAACoO,QAAQ,GAAG,CAAC,CAAC,CAAA;EACjD,MAAMG,SAAS,GAAG,IAAIvnB,WAAW,CAAConB,QAAQ,GAAG,CAAC,CAAC,CAAA;EAC/C,MAAMI,SAAS,GAAG,IAAIxnB,WAAW,CAAConB,QAAQ,GAAG,CAAC,CAAC,CAAA;EAE/C,KAAK,IAAI9tB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6tB,WAAW,EAAE7tB,CAAC,EAAE,EAAE;IACrCmuB,cAAc,CAAC5sB,IAAI,EAAEvB,CAAC,EAAE,SAAS,EAAE+tB,UAAU,CAAC,CAAA;IAC9CI,cAAc,CAAC5sB,IAAI,EAAEvB,CAAC,EAAE,QAAQ,EAAEiuB,SAAS,CAAC,CAAA;AAE5C;AACA;AACA,IAAA,KAAK,IAAI/tB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4tB,QAAQ,GAAG,CAAC,EAAE5tB,CAAC,EAAE,EAAEsB,OAAO,CAACtB,CAAC,CAAC,GAAGA,CAAC,CAAA;IACrDsB,OAAO,CAACyG,IAAI,CAAC,CAAC3D,CAAC,EAAEC,CAAC,KAAMwpB,UAAU,CAACzpB,CAAC,CAAC,GAAGypB,UAAU,CAACxpB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAE,CAAC,CAAA;AAEhE;AACA,IAAA,KAAK,IAAIrE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsB,OAAO,CAACiE,MAAM,EAAEvF,CAAC,EAAE,EAAE;MACxC8tB,UAAU,CAAC9tB,CAAC,CAAC,GAAG6tB,UAAU,CAACvsB,OAAO,CAACtB,CAAC,CAAC,CAAC,CAAA;MACtCguB,SAAS,CAAChuB,CAAC,CAAC,GAAG+tB,SAAS,CAACzsB,OAAO,CAACtB,CAAC,CAAC,CAAC,CAAA;AACrC,KAAA;IAEAkuB,cAAc,CAAC7sB,IAAI,EAAEvB,CAAC,EAAE,SAAS,EAAEguB,UAAU,CAAC,CAAA;IAC9CI,cAAc,CAAC7sB,IAAI,EAAEvB,CAAC,EAAE,QAAQ,EAAEkuB,SAAS,CAAC,CAAA;AAC7C,GAAA;AAEA;AACA,EAAA,KAAK,IAAIluB,CAAC,GAAG8tB,QAAQ,EAAE9tB,CAAC,GAAG,CAAC,GAAGyI,KAAK,EAAEzI,CAAC,EAAE,EAAE;IAC1C,MAAMquB,OAAO,GAAG9sB,IAAI,CAACI,YAAY,CAAY,CAAA,QAAA,EAAA3B,CAAC,GAAG,CAAG,CAAA,CAAA,CAAE,CAAA;IACtD,MAAM6jB,MAAM,GAAGtiB,IAAI,CAACI,YAAY,CAAW,CAAA,OAAA,EAAA3B,CAAC,GAAG,CAAG,CAAA,CAAA,CAAE,CAAA;IACpDuB,IAAI,CAACiW,YAAY,CAAY,CAAAxX,QAAAA,EAAAA,CAAC,GAAG,CAAG,CAAA,CAAA,EAAE,IAAI,CAAC,CAAA;IAC3CuB,IAAI,CAACiW,YAAY,CAAW,CAAAxX,OAAAA,EAAAA,CAAC,GAAG,CAAG,CAAA,CAAA,EAAE,IAAI,CAAC,CAAA;AAC1C,IAAA,IAAIquB,OAAO,CAACxnB,WAAW,EAAE,CAACpB,MAAM,KAAK,CAAC,EAAE4oB,OAAO,CAAC9e,OAAO,EAAE,CAAA;AACzD,IAAA,IAAIsU,MAAM,CAAChd,WAAW,EAAE,CAACpB,MAAM,KAAK,CAAC,EAAEoe,MAAM,CAACtU,OAAO,EAAE,CAAA;AACxD,GAAA;AAEA;EACA+e,yBAAyB,CAAC/sB,IAAI,CAAC,CAAA;AAChC,CAAA;AAMA,SAAS+sB,yBAAyBA,CAAC/sB,IAAc,EAAA;AAChD;AACA,EAAA,IAAI,CAACgtB,eAAe,CAAChtB,IAAI,CAAC,EAAE,OAAA;EAE5B,MAAMssB,WAAW,GAAGtsB,IAAI,CAACI,YAAY,CAAC,UAAU,CAAE,CAACK,QAAQ,EAAE,CAAA;EAC7D,MAAM8rB,QAAQ,GAAGvsB,IAAI,CAACyG,aAAa,EAAE,CAACmD,MAAM,CAAEzK,IAAI,IAAKA,IAAI,CAACgX,UAAU,CAAC,UAAU,CAAC,CAAC,CAACjS,MAAM,CAAA;AAE1F,EAAA,MAAM+oB,iBAAiB,GAAGjtB,IAAI,CAACI,YAAY,CAAC,WAAW,CAAE,CAAA;AACzD,EAAA,MAAM8sB,aAAa,GAAGD,iBAAiB,CAACvoB,QAAQ,EAAG,CAAA;AACnD,EAAA,MAAMmC,aAAa,GAAGomB,iBAAiB,CAACnmB,gBAAgB,EAAE,CAAA;AAC1D,EAAA,MAAMqmB,UAAU,GAAGF,iBAAiB,CAAC/f,aAAa,EAAE,CAAA;AACpD,EAAA,MAAMkgB,uBAAuB,GAAGD,UAAU,GAAGtmB,aAAa,GAAG8hB,SAAS,CAAA;AACtE,EAAA,MAAM0E,KAAK,GAAGF,UAAU,GAAG9M,cAAS,CAACiN,mBAAmB,CAAC,CAAC,EAAEzmB,aAAa,CAAC,GAAGyW,MAAM,CAACC,OAAO,CAAA;AAC3F,EAAA,MAAM+E,MAAM,GAAG,IAAInd,WAAW,CAAConB,QAAQ,GAAG,CAAC,CAAC,CAAC1R,IAAI,CAAC,CAAC,CAAC,CAAA;AACpD,EAAA,MAAMiS,OAAO,GAAGI,aAAa,CAACtoB,KAAK,CAAC,CAAC,EAAE2nB,QAAQ,GAAG,CAAC,CAAC,CAAC1R,IAAI,CAAC,CAAC,CAAC,CAAA;EAE5D,KAAK,IAAIpc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6tB,WAAW,EAAE7tB,CAAC,EAAE,EAAE;IACrCmuB,cAAc,CAAC5sB,IAAI,EAAEvB,CAAC,EAAE,QAAQ,EAAE6jB,MAAM,CAAC,CAAA;IACzCsK,cAAc,CAAC5sB,IAAI,EAAEvB,CAAC,EAAE,SAAS,EAAEquB,OAAO,EAAEM,uBAAuB,CAAC,CAAA;AAEpE,IAAA,IAAIG,UAAU,GAAGC,GAAG,CAACV,OAAO,EAAEM,uBAAuB,CAAC,CAAA;IACtD,IAAIG,UAAU,KAAK,CAAC,EAAE,SAAA;AAEtB;IACA,IAAInrB,IAAI,CAACe,GAAG,CAAC,CAAC,GAAGoqB,UAAU,CAAC,GAAGF,KAAK,EAAE;AACrC,MAAA,KAAK,IAAI1uB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmuB,OAAO,CAAC5oB,MAAM,EAAEvF,CAAC,EAAE,EAAE;AACxC,QAAA,IAAIwuB,UAAU,EAAE;AACf,UAAA,MAAMM,QAAQ,GAAGpN,cAAS,CAACqN,mBAAmB,CAACZ,OAAO,CAACnuB,CAAC,CAAC,GAAG4uB,UAAU,EAAE1mB,aAAa,CAAC,CAAA;UACtFimB,OAAO,CAACnuB,CAAC,CAAC,GAAG0hB,cAAS,CAACiN,mBAAmB,CAACG,QAAQ,EAAE5mB,aAAa,CAAC,CAAA;AACpE,SAAC,MAAM;AACNimB,UAAAA,OAAO,CAACnuB,CAAC,CAAC,IAAI4uB,UAAU,CAAA;AACzB,SAAA;AACD,OAAA;AACD,KAAA;AAEAA,IAAAA,UAAU,GAAGC,GAAG,CAACV,OAAO,EAAEM,uBAAuB,CAAC,CAAA;AAElD;AACA;AACA,IAAA,IAAID,UAAU,IAAII,UAAU,KAAK,CAAC,EAAE;AACnC,MAAA,KAAK,IAAI5uB,CAAC,GAAGmuB,OAAO,CAAC5oB,MAAM,GAAG,CAAC,EAAEvF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;AAC7C,QAAA,IAAImuB,OAAO,CAACnuB,CAAC,CAAC,GAAG,CAAC,EAAE;AACnBmuB,UAAAA,OAAO,CAACnuB,CAAC,CAAC,IAAI0hB,cAAS,CAACqN,mBAAmB,CAAC,CAAC,GAAGH,UAAU,EAAE1mB,aAAa,CAAC,CAAA;AAC1E,UAAA,MAAA;AACD,SAAA;AACD,OAAA;AACD,KAAA;AAEA;AACA,IAAA,KAAK,IAAIlI,CAAC,GAAGmuB,OAAO,CAAC5oB,MAAM,GAAG,CAAC,EAAEvF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;AAC7C,MAAA,IAAImuB,OAAO,CAACnuB,CAAC,CAAC,KAAK,CAAC,EAAE;AACrB2jB,QAAAA,MAAM,CAAC3jB,CAAC,CAAC,GAAG,CAAC,CAAA;AACd,OAAA;AACD,KAAA;IAEAkuB,cAAc,CAAC7sB,IAAI,EAAEvB,CAAC,EAAE,QAAQ,EAAE6jB,MAAM,CAAC,CAAA;IACzCuK,cAAc,CAAC7sB,IAAI,EAAEvB,CAAC,EAAE,SAAS,EAAEquB,OAAO,EAAEM,uBAAuB,CAAC,CAAA;AACrE,GAAA;AACD,CAAA;AAEA;AACA,SAASR,cAAcA,CACtB5sB,IAAc,EACd2tB,WAAmB,EACnB1qB,MAAc,EACdlF,MAAkB,EAClBqvB,uBAAoD,EAAA;AAEpD,EAAA,IAAIN,OAAwB,CAAA;EAC5B,MAAM1Q,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAS,CAAA;EAC/B,KAAK,IAAI3d,CAAC,GAAG,CAAC,EAAGquB,OAAO,GAAG9sB,IAAI,CAACI,YAAY,CAAI,CAAA6C,EAAAA,MAAU,IAAAxE,CAAG,CAAA,CAAA,CAAC,EAAGA,CAAC,EAAE,EAAE;AACrEquB,IAAAA,OAAO,CAACtS,UAAU,CAACmT,WAAW,EAAEvR,EAAE,CAAC,CAAA;IACnC,KAAK,IAAIzd,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;AAC3B,MAAA,IAAIyuB,uBAAuB,EAAE;AAC5BrvB,QAAAA,MAAM,CAACU,CAAC,GAAG,CAAC,GAAGE,CAAC,CAAC,GAAG0hB,cAAS,CAACqN,mBAAmB,CAACtR,EAAE,CAACzd,CAAC,CAAC,EAAEyuB,uBAAuB,CAAC,CAAA;AAClF,OAAC,MAAM;QACNrvB,MAAM,CAACU,CAAC,GAAG,CAAC,GAAGE,CAAC,CAAC,GAAGyd,EAAE,CAACzd,CAAC,CAAC,CAAA;AAC1B,OAAA;AACD,KAAA;AACD,GAAA;AACA,EAAA,OAAOZ,MAAM,CAAA;AACd,CAAA;AAEA;AACA,SAAS8uB,cAAcA,CACtB7sB,IAAc,EACd2tB,WAAmB,EACnB1qB,MAAc,EACd4K,MAAkB,EAClBuf,uBAAoD,EAAA;AAEpD,EAAA,IAAIN,OAAwB,CAAA;EAC5B,MAAM1Q,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAS,CAAA;EAC/B,KAAK,IAAI3d,CAAC,GAAG,CAAC,EAAGquB,OAAO,GAAG9sB,IAAI,CAACI,YAAY,CAAI,CAAA6C,EAAAA,MAAU,IAAAxE,CAAG,CAAA,CAAA,CAAC,EAAGA,CAAC,EAAE,EAAE;IACrE,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;AAC3B,MAAA,IAAIyuB,uBAAuB,EAAE;AAC5BhR,QAAAA,EAAE,CAACzd,CAAC,CAAC,GAAG0hB,cAAS,CAACiN,mBAAmB,CAACzf,MAAM,CAACpP,CAAC,GAAG,CAAC,GAAGE,CAAC,CAAC,EAAEyuB,uBAAuB,CAAC,CAAA;AAClF,OAAC,MAAM;QACNhR,EAAE,CAACzd,CAAC,CAAC,GAAGkP,MAAM,CAACpP,CAAC,GAAG,CAAC,GAAGE,CAAC,CAAC,CAAA;AAC1B,OAAA;AACD,KAAA;AACAmuB,IAAAA,OAAO,CAACzQ,UAAU,CAACsR,WAAW,EAAEvR,EAAE,CAAC,CAAA;AACpC,GAAA;AACD,CAAA;AAEA;AACA,SAASoR,GAAGA,CAAC3f,MAAkB,EAAEuf,uBAAoD,EAAA;EACpF,IAAII,GAAG,GAAG,CAAC,CAAA;AACX,EAAA,KAAK,IAAI/uB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoP,MAAM,CAAC3J,MAAM,EAAEzF,CAAC,EAAE,EAAE;AACvC,IAAA,IAAI2uB,uBAAuB,EAAE;MAC5BI,GAAG,IAAInN,cAAS,CAACiN,mBAAmB,CAACzf,MAAM,CAACpP,CAAC,CAAC,EAAE2uB,uBAAuB,CAAC,CAAA;AACzE,KAAC,MAAM;AACNI,MAAAA,GAAG,IAAI3f,MAAM,CAACpP,CAAC,CAAC,CAAA;AACjB,KAAA;AACD,GAAA;AACA,EAAA,OAAO+uB,GAAG,CAAA;AACX,CAAA;AAEA;AACA,SAASR,eAAeA,CAAChtB,IAAc,EAAA;AACtC,EAAA,MAAMwG,UAAU,GAAGxG,IAAI,CACrByG,aAAa,EAAE,CACfmD,MAAM,CAAEzK,IAAI,IAAKA,IAAI,CAACgX,UAAU,CAAC,UAAU,CAAC,CAAC,CAC7CxP,GAAG,CAAExH,IAAI,IAAKa,IAAI,CAACI,YAAY,CAACjB,IAAI,CAAE,CAAC,CAAA;AACzC,EAAA,MAAMyuB,QAAQ,GAAGpnB,UAAU,CAACG,GAAG,CAAE5D,CAAC,IAAKA,CAAC,CAACmK,aAAa,EAAE,CAAC,CAAA;AACzD,EAAA,MAAM2gB,QAAQ,GAAGrnB,UAAU,CAACG,GAAG,CAAE5D,CAAC,IAAKA,CAAC,CAAC+D,gBAAgB,EAAE,CAAC,CAAA;AAC5D,EAAA,OAAO,IAAIlF,GAAG,CAACgsB,QAAQ,CAAC,CAACvsB,IAAI,KAAK,CAAC,IAAI,IAAIO,GAAG,CAACisB,QAAQ,CAAC,CAACxsB,IAAI,KAAK,CAAC,CAAA;AACpE;;ACpLA,MAAMoG,MAAI,GAAG,UAAU,CAAA;AAOvB,MAAMqmB,UAAU,GAAG,CAAC/H,SAAS,EAAED,UAAU,EAAED,UAAU,CAA4B,CAAA;AAEjF,MAAM;EAAEkI,WAAW;EAAEC,QAAQ;EAAEC,KAAK;AAAE1V,EAAAA,OAAAA;AAAS,CAAA,GAAG3C,qBAAgB,CAACsY,UAAU,CAAA;AAC7E,MAAMC,YAAY,GAAG,CAACJ,WAAW,EAAEC,QAAQ,EAAEC,KAAK,CAAC,CAAA;AA0B5C,MAAMG,iBAAiB,GAAsD;AACnF3N,EAAAA,OAAO,EAAE,IAAI;AACbgB,EAAAA,kBAAkB,EAAE,MAAM;AAC1BL,EAAAA,gBAAgB,EAAE,EAAE;AACpBC,EAAAA,cAAc,EAAE,EAAE;AAClBE,EAAAA,gBAAgB,EAAE,EAAE;AACpBD,EAAAA,aAAa,EAAE,CAAC;AAChB+M,EAAAA,cAAc,EAAE,CAAC;AACjB7M,EAAAA,eAAe,EAAE,EAAE;AACnB8M,EAAAA,gBAAgB,EAAE,IAAA;EAClB;AAED;;;;;;AAMG;AAEH;;;;;AAKG;AACa,SAAAC,QAAQA,CAAC1mB,QAAA,EAA6C;AAAA,EAAA,IAA7CA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,QAAA,GAA4BumB,iBAAiB,CAAA;AAAA,GAAA;AACrE,EAAA,MAAMtmB,OAAO,GAAG;AAAE,IAAA,GAAGsmB,iBAAiB;IAAE,GAAGvmB,QAAAA;GAAuC,CAAA;EAElFC,OAAO,CAAC0mB,cAAc,GAAG1mB,OAAO,CAAC0mB,cAAc,IAAI1mB,OAAO,CAAC2Y,OAAO,CAAA;AAElE,EAAA,OAAOvhB,eAAe,CAACuI,MAAI,EAAA,UAASM,GAAa,EAAA;IAAA,IAAmB;AACnE,MAAA,MAAMC,MAAM,GAAGD,GAAG,CAACE,SAAS,EAAE,CAAA;AAC9B,MAAA,MAAMC,IAAI,GAAGH,GAAG,CAAC3B,OAAO,EAAE,CAAA;MAE1B2B,GAAG,CAAC6Y,eAAe,CAACC,8BAAmB,CAAC,CAACe,WAAW,CAAC,IAAI,CAAC,CAAA;AAE1D;MACA,IAAI6M,aAAa,GAAsC9F,SAAS,CAAA;AAChE,MAAA,IAAI7gB,OAAO,CAAC2Z,kBAAkB,KAAK,OAAO,EAAE;AAC3CgN,QAAAA,aAAa,GAAGC,gBAAgB,CAACC,YAAY,CAACzmB,IAAI,CAACkE,UAAU,EAAE,CAACzF,GAAG,CAACioB,6BAA6B,CAAC,CAAC,CAAC,CAAA;AACrG,OAAA;AAEA;AACA,MAAA,KAAK,MAAMviB,IAAI,IAAItE,GAAG,CAAC3B,OAAO,EAAE,CAACgG,UAAU,EAAE,EAAE;AAC9C,QAAA,IAAItE,OAAO,CAAC2Z,kBAAkB,KAAK,MAAM,EAAE;AAC1CgN,UAAAA,aAAa,GAAGC,gBAAgB,CAACE,6BAA6B,CAACviB,IAAI,CAAC,CAAC,CAAA;AACtE,SAAA;QAEA,IAAIoiB,aAAa,IAAI3mB,OAAO,CAAC2Y,OAAO,CAAC1P,IAAI,CAAC,UAAU,CAAC,EAAE;AACtD8d,UAAAA,oBAAoB,CAAC9mB,GAAG,EAAEsE,IAAI,EAAEoiB,aAAa,CAAC,CAAA;UAC9CK,sBAAsB,CAACziB,IAAI,EAAE,CAAC,GAAGoiB,aAAa,CAAClkB,KAAK,CAAC,CAAA;AACtD,SAAA;QAEA,KAAK,MAAMvK,IAAI,IAAIqM,IAAI,CAACC,cAAc,EAAE,EAAE;UACzCyiB,iBAAiB,CAAChnB,GAAG,EAAE/H,IAAI,EAAEyuB,aAAc,EAAE3mB,OAAO,CAAC,CAAA;UACrD,KAAK,MAAM/J,MAAM,IAAIiC,IAAI,CAAC0D,WAAW,EAAE,EAAE;YACxCqrB,iBAAiB,CAAChnB,GAAG,EAAEhK,MAAM,EAAE0wB,aAAc,EAAE3mB,OAAO,CAAC,CAAA;AACxD,WAAA;AACD,SAAA;AACD,OAAA;MAAC,OAAA7J,OAAA,CAAAC,OAAA,CAEK6J,GAAG,CAACgR,SAAS,CAClBvF,KAAK,CAAC;AACLtI,QAAAA,aAAa,EAAE,CAACxF,iBAAY,CAACyF,QAAQ,EAAEzF,iBAAY,CAAC6F,IAAI,EAAE7F,iBAAY,CAAC4F,QAAQ,CAAC;AAChF+H,QAAAA,cAAc,EAAE,IAAI;AACpBC,QAAAA,WAAW,EAAE,IAAI;AACjBF,QAAAA,UAAU,EAAE,IAAI;AAChBG,QAAAA,iBAAiB,EAAE,IAAA;OACnB,CAAC,EACF/H,KAAK,CAAC;AACLN,QAAAA,aAAa,EAAE,CAACxF,iBAAY,CAACyF,QAAQ,EAAEzF,iBAAY,CAAC4F,QAAQ,EAAE5F,iBAAY,CAAC6F,IAAI,CAAC;AAChFN,QAAAA,eAAe,EAAE,IAAA;OACjB,CAAC,CACF,CAAA,CAAA1M,IAAA,CAAA,YAAA;AAEDyJ,QAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AAAC,OAAA,CAAA,CAAA;AACpC,KAAC,QAAAzI,CAAA,EAAA;AAAA,MAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,KAAA;GAAC,CAAA,CAAA;AACH,CAAA;AAEA,SAAS+vB,iBAAiBA,CACzBhnB,GAAa,EACb/H,IAAiC,EACjCyuB,aAAoC,EACpC3mB,OAAkC,EAAA;AAElC,EAAA,MAAMknB,QAAQ,GAAGhvB,IAAI,YAAY4f,oBAAe,CAAA;AAChD,EAAA,MAAM5X,MAAM,GAAGD,GAAG,CAACE,SAAS,EAAE,CAAA;EAE9B,KAAK,MAAMrB,QAAQ,IAAI5G,IAAI,CAACyG,aAAa,EAAE,EAAE;AAC5C,IAAA,IAAI,CAACuoB,QAAQ,IAAI,CAAClnB,OAAO,CAAC2Y,OAAO,CAAC1P,IAAI,CAACnK,QAAQ,CAAC,EAAE,SAAA;IAClD,IAAIooB,QAAQ,IAAI,CAAClnB,OAAO,CAAC0mB,cAAc,CAACzd,IAAI,CAACnK,QAAQ,CAAC,EAAE,SAAA;AAExD,IAAA,MAAM+Y,YAAY,GAAG3f,IAAI,CAACI,YAAY,CAACwG,QAAQ,CAAE,CAAA;IAEjD,MAAM;MAAEqoB,IAAI;AAAEC,MAAAA,IAAAA;KAAM,GAAGC,uBAAuB,CAACvoB,QAAQ,EAAE+Y,YAAY,EAAE3X,MAAM,EAAEF,OAAO,CAAC,CAAA;IAEvF,IAAI,CAAConB,IAAI,EAAE,SAAA;AACX,IAAA,IAAID,IAAI,GAAG,CAAC,IAAIA,IAAI,GAAG,EAAE,EAAE,MAAM,IAAIjuB,KAAK,EAAIyG,EAAAA,MAAI,yBAAyB,CAAC,CAAA;IAC5E,IAAIkY,YAAY,CAACoB,gBAAgB,EAAE,IAAIkO,IAAI,GAAG,CAAC,EAAE,SAAA;AAEjD,IAAA,MAAMpP,YAAY,GAAGF,YAAY,CAACjE,KAAK,EAAE,CAAA;AAEzC;IACA,IAAI9U,QAAQ,KAAK,UAAU,EAAE;AAC5B,MAAA,MAAM2D,KAAK,GAAGkkB,aAAa,CAAClkB,KAAK,CAAA;MACjC,MAAMwO,SAAS,GAAS,EAAqB,CAAA;AAC7C;AACA/Y,MAAAA,IAAI,YAAYM,cAAS,GACtB6J,QAAM,CAAC4O,SAAS,EAAEqW,aAAa,CAACX,aAAa,CAAC,CAAC,GAC/CY,WAAW,CAACtW,SAAS,EAAE,CAAC,CAAC,GAAGxO,KAAK,EAAE,CAAC,GAAGA,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAA;AAC5D,MAAA,KAAK,IAAI9L,CAAC,GAAG,CAAC,EAAE2d,EAAE,GAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAExR,EAAE,GAAGiV,YAAY,CAACpf,QAAQ,EAAE,EAAEhC,CAAC,GAAGmM,EAAE,EAAEnM,CAAC,EAAE,EAAE;AAChFohB,QAAAA,YAAY,CAACrF,UAAU,CAAC/b,CAAC,EAAE2d,EAAE,CAAC,CAAA;AAC9ByD,QAAAA,YAAY,CAACxD,UAAU,CAAC5d,CAAC,EAAE6f,aAAa,CAAClC,EAAE,EAAEA,EAAE,EAAErD,SAAS,CAAS,CAAC,CAAA;AACrE,OAAA;AACD,KAAA;AAEA;AACAuW,IAAAA,iBAAiB,CAACzP,YAAY,EAAEqP,IAAI,EAAED,IAAI,CAAC,CAAA;AAC3CjvB,IAAAA,IAAI,CAACgE,IAAI,CAAC2b,YAAY,EAAEE,YAAY,CAAC,CAAA;AACtC,GAAA;AAEA;EACA,IAAI/X,OAAO,CAACwmB,gBAAgB,IAAItuB,IAAI,CAACI,YAAY,CAAC,WAAW,CAAC,EAAE;AAC/DgsB,IAAAA,oBAAoB,CAACpsB,IAAI,EAAE2K,QAAQ,CAAC,CAAA;AACrC,GAAA;AAEA,EAAA,IACC3K,IAAI,YAAYM,cAAS,IACzBN,IAAI,CAACE,UAAU,EAAE,IACjBF,IAAI,CAACwD,cAAc,EAAE,CAACU,MAAM,IAC5BlE,IAAI,CAACwD,cAAc,EAAE,CAAC,CAAC,CAAE,CAAC/C,QAAQ,EAAE,GAAG,KAAK,EAC3C;AACD,IAAA,MAAMR,OAAO,GAAGD,IAAI,CAACE,UAAU,EAAG,CAAA;AAClCD,IAAAA,OAAO,CAAC4E,QAAQ,CAAC,IAAIK,WAAW,CAACjF,OAAO,CAACyE,QAAQ,EAAG,CAAC,CAAC,CAAA;AACvD,GAAA;AACD,CAAA;AAEA;AACA,SAASgqB,gBAAgBA,CAACa,MAAY,EAAA;EACrC,MAAM;IAAEzmB,GAAG;AAAED,IAAAA,GAAAA;AAAK,GAAA,GAAG0mB,MAAM,CAAA;AAE3B;AACA;AACA,EAAA,MAAMhlB,KAAK,GAAGnI,IAAI,CAACyG,GAAG,CACrB,CAACA,GAAG,CAAC,CAAC,CAAC,GAAGC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;AAAE;EACvB,CAACD,GAAG,CAAC,CAAC,CAAC,GAAGC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EACrB,CAACD,GAAG,CAAC,CAAC,CAAC,GAAGC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CACrB,CAAA;AAED;EACA,MAAMC,MAAM,GAAS,CACpBD,GAAG,CAAC,CAAC,CAAC,GAAG,CAACD,GAAG,CAAC,CAAC,CAAC,GAAGC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAC9BA,GAAG,CAAC,CAAC,CAAC,GAAG,CAACD,GAAG,CAAC,CAAC,CAAC,GAAGC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAC9BA,GAAG,CAAC,CAAC,CAAC,GAAG,CAACD,GAAG,CAAC,CAAC,CAAC,GAAGC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAC9B,CAAA;EAED,OAAO;IAAEC,MAAM;AAAEwB,IAAAA,KAAAA;GAAO,CAAA;AACzB,CAAA;AAEA;AACA,SAASskB,oBAAoBA,CAAC9mB,GAAa,EAAEsE,IAAU,EAAEoiB,aAAoC,EAAA;AAC5F,EAAA,MAAMe,eAAe,GAAGJ,aAAa,CAACX,aAAa,CAAC,CAAA;EACpD,KAAK,MAAMjpB,MAAM,IAAI6G,IAAI,CAAC/G,WAAW,EAAE,EAAE;AACxC,IAAA,IAAI,EAAEE,MAAM,YAAYiqB,SAAI,CAAC,EAAE,SAAA;AAE/B,IAAA,MAAMC,YAAY,GAAGlqB,MAAM,CAACF,WAAW,EAAE,CAACsE,MAAM,CAAE+L,CAAC,IAAKA,CAAC,YAAYC,qBAAgB,CAAuB,CAAA;AAC5G,IAAA,MAAMzN,UAAU,GAAGunB,YAAY,CAACnqB,IAAI,CAAE2P,OAAO,IAAKiZ,YAAY,CAAC1iB,QAAQ,CAACyJ,OAAO,CAACuN,aAAa,EAAG,CAAC,CAAC,CAAA;IAClG,MAAMkN,YAAY,GAAGnqB,MAAM,CAAC2D,YAAY,EAAE,CAACjF,MAAM,GAAG,CAAC,CAAA;AAErD,IAAA,MAAMkQ,IAAI,GAAG5O,MAAM,CAACkhB,OAAO,EAAE,CAAA;AAC7B,IAAA,IAAItS,IAAI,EAAE;MACT5O,MAAM,CAACoqB,OAAO,CAACC,aAAa,CAACzb,IAAI,EAAEqa,aAAa,CAAC,CAAC,CAAA;AAClD,MAAA,SAAA;AACD,KAAA;AAEA,IAAA,MAAM5H,KAAK,GAAGrhB,MAAM,CAAC0iB,YAAY,CAAgB,yBAAyB,CAAC,CAAA;AAC3E,IAAA,IAAIrB,KAAK,EAAE;MACVrhB,MAAM,CAAC4hB,YAAY,CAAC,yBAAyB,EAAE0I,cAAc,CAACjJ,KAAK,EAAE4H,aAAa,CAAC,CAAC,CAAA;AACpF,MAAA,SAAA;AACD,KAAA;AAEA,IAAA,IAAIsB,UAAgB,CAAA;IACpB,IAAIJ,YAAY,IAAIxnB,UAAU,EAAE;MAC/B4nB,UAAU,GAAGhoB,GAAG,CAACkB,UAAU,CAAC,EAAE,CAAC,CAACke,OAAO,CAAC9a,IAAI,CAAC,CAAA;MAC7C7G,MAAM,CAAC6D,QAAQ,CAAC0mB,UAAU,CAAC,CAAC5I,OAAO,CAAC,IAAI,CAAC,CAAA;MACzCuI,YAAY,CACV9lB,MAAM,CAAEsL,OAAO,IAAKA,OAAO,CAACuN,aAAa,EAAE,KAAKlK,OAAO,CAAC,CACxDhQ,OAAO,CAAE2M,OAAO,IAAKA,OAAO,CAAC8a,aAAa,CAACD,UAAU,CAAC,CAAC,CAAA;AAC1D,KAAC,MAAM;AACNA,MAAAA,UAAU,GAAGvqB,MAAM,CAAA;AACpB,KAAA;AAEA,IAAA,MAAMyqB,UAAU,GAAGF,UAAU,CAAC3P,SAAS,EAAE,CAAA;AACzCG,IAAAA,UAAY,CAAC0P,UAAU,EAAEA,UAAU,EAAET,eAAe,CAAC,CAAA;AACrDO,IAAAA,UAAU,CAAC/lB,SAAS,CAACimB,UAAU,CAAC,CAAA;AACjC,GAAA;AACD,CAAA;AAEA;AACA,SAASJ,aAAaA,CAACzb,IAAU,EAAEqa,aAAoC,EAAA;AACtEra,EAAAA,IAAI,GAAGA,IAAI,CAACsH,KAAK,EAAE,CAAC;AACpB,EAAA,MAAM8T,eAAe,GAAGJ,aAAa,CAACX,aAAa,CAAC,CAAA;EACpD,MAAMyB,mBAAmB,GAAG9b,IAAI,CAAC+b,sBAAsB,EAAG,CAACzU,KAAK,EAAE,CAAA;EAClE,MAAM0U,GAAG,GAAG,EAAqB,CAAA;AACjC,EAAA,KAAK,IAAI3xB,CAAC,GAAG,CAAC,EAAEsG,KAAK,GAAGmrB,mBAAmB,CAACzvB,QAAQ,EAAE,EAAEhC,CAAC,GAAGsG,KAAK,EAAEtG,CAAC,EAAE,EAAE;AACvEyxB,IAAAA,mBAAmB,CAAC1V,UAAU,CAAC/b,CAAC,EAAE2xB,GAAG,CAAC,CAAA;AACtC7P,IAAAA,UAAY,CAAC6P,GAAG,EAAEA,GAAG,EAAEZ,eAAe,CAAC,CAAA;AACvCU,IAAAA,mBAAmB,CAAC7T,UAAU,CAAC5d,CAAC,EAAE2xB,GAAG,CAAC,CAAA;AACvC,GAAA;AACA,EAAA,OAAOhc,IAAI,CAACic,sBAAsB,CAACH,mBAAmB,CAAC,CAAA;AACxD,CAAA;AAEA;AACA,SAASJ,cAAcA,CAACjJ,KAAoB,EAAE4H,aAAoC,EAAA;AAAA,EAAA,IAAA6B,mBAAA,EAAAC,oBAAA,EAAAC,oBAAA,CAAA;EACjF,IAAI,CAAC3J,KAAK,CAACzmB,YAAY,CAAC,aAAa,CAAC,IAAI,CAACymB,KAAK,CAACzmB,YAAY,CAAC,UAAU,CAAC,IAAI,CAACymB,KAAK,CAACzmB,YAAY,CAAC,OAAO,CAAC,EAAE;AAC1G,IAAA,OAAOymB,KAAK,CAAA;AACb,GAAA;AAEAA,EAAAA,KAAK,GAAGA,KAAK,CAACnL,KAAK,EAAE,CAAC;AACtB,EAAA,MAAM+U,mBAAmB,GAAA,CAAAH,mBAAA,GAAGzJ,KAAK,CAACzmB,YAAY,CAAC,aAAa,CAAC,KAAjCkwB,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,mBAAA,CAAmC5U,KAAK,EAAE,CAAA;AACtE,EAAA,MAAMgV,gBAAgB,GAAA,CAAAH,oBAAA,GAAG1J,KAAK,CAACzmB,YAAY,CAAC,UAAU,CAAC,KAA9BmwB,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,oBAAA,CAAgC7U,KAAK,EAAE,CAAA;AAChE,EAAA,MAAMiV,aAAa,GAAA,CAAAH,oBAAA,GAAG3J,KAAK,CAACzmB,YAAY,CAAC,OAAO,CAAC,KAA3BowB,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,oBAAA,CAA6B9U,KAAK,EAAE,CAAA;AAC1D,EAAA,MAAMkV,GAAG,GAAIH,mBAAmB,IAAIC,gBAAgB,IAAIC,aAAe,CAAA;EAEvE,MAAME,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAS,CAAA;EACpC,MAAMC,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAS,CAAA;EACvC,MAAMC,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAS,CAAA;EAEpC,MAAMznB,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAS,CAAA;EAC3B,MAAMke,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAS,CAAA;EAC9B,MAAMC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAS,CAAA;AAE3B;AACA,EAAA,MAAMuJ,cAAc,GAAG,CACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CACF,CAAA;AAET,EAAA,MAAMxB,eAAe,GAAGJ,aAAa,CAACX,aAAa,CAAC,CAAA;AAEpD,EAAA,KAAK,IAAIhwB,CAAC,GAAG,CAAC,EAAEsG,KAAK,GAAG6rB,GAAG,CAACnwB,QAAQ,EAAE,EAAEhC,CAAC,GAAGsG,KAAK,EAAEtG,CAAC,EAAE,EAAE;AACvD4hB,IAAAA,cAAS,CAAC4Q,OAAO,CAChBR,mBAAmB,GAAIA,mBAAmB,CAACjW,UAAU,CAAC/b,CAAC,EAAE6K,CAAC,CAAU,GAAGunB,UAAU,EACjFH,gBAAgB,GAAIA,gBAAgB,CAAClW,UAAU,CAAC/b,CAAC,EAAE+oB,CAAC,CAAU,GAAGsJ,UAAU,EAC3EH,aAAa,GAAIA,aAAa,CAACnW,UAAU,CAAC/b,CAAC,EAAEgpB,CAAC,CAAU,GAAGsJ,UAAU,EACrEC,cAAc,CACd,CAAA;AAEDzQ,IAAAA,UAAY,CAACyQ,cAAc,EAAEA,cAAc,EAAExB,eAAe,CAAC,CAAA;IAE7DnP,cAAS,CAAC6Q,SAAS,CAACF,cAAc,EAAE1nB,CAAC,EAAEke,CAAC,EAAEC,CAAC,CAAC,CAAA;IAE5C,IAAIgJ,mBAAmB,EAAEA,mBAAmB,CAACpU,UAAU,CAAC5d,CAAC,EAAE6K,CAAC,CAAC,CAAA;IAC7D,IAAIonB,gBAAgB,EAAEA,gBAAgB,CAACrU,UAAU,CAAC5d,CAAC,EAAE+oB,CAAC,CAAC,CAAA;IACvD,IAAImJ,aAAa,EAAEA,aAAa,CAACtU,UAAU,CAAC5d,CAAC,EAAEgpB,CAAC,CAAC,CAAA;AAClD,GAAA;EAEA,IAAIgJ,mBAAmB,EAAE5J,KAAK,CAAC5Q,YAAY,CAAC,aAAa,EAAEwa,mBAAmB,CAAC,CAAA;EAC/E,IAAIC,gBAAgB,EAAE7J,KAAK,CAAC5Q,YAAY,CAAC,UAAU,EAAEya,gBAAgB,CAAC,CAAA;EACtE,IAAIC,aAAa,EAAE9J,KAAK,CAAC5Q,YAAY,CAAC,OAAO,EAAE0a,aAAa,CAAC,CAAA;AAE7D,EAAA,OAAO9J,KAAK,CAAA;AACb,CAAA;AAEA;AACA,SAASiI,sBAAsBA,CAACziB,IAAU,EAAE9B,KAAa,EAAA;EACxD,KAAK,MAAMvK,IAAI,IAAIqM,IAAI,CAACC,cAAc,EAAE,EAAE;AACzC,IAAA,IAAIrG,QAAQ,GAAGjG,IAAI,CAACkG,WAAW,EAAE,CAAA;IACjC,IAAI,CAACD,QAAQ,EAAE,SAAA;AAEf,IAAA,IAAIspB,MAAM,GAAGtpB,QAAQ,CAACiiB,YAAY,CAAS,sBAAsB,CAAC,CAAA;IAClE,IAAI,CAACqH,MAAM,IAAIA,MAAM,CAAC4B,kBAAkB,EAAE,IAAI,CAAC,EAAE,SAAA;AAEjD;AACA5B,IAAAA,MAAM,GAAGA,MAAM,CAAC7T,KAAK,EAAE,CAAC0V,kBAAkB,CAAC7B,MAAM,CAAC4B,kBAAkB,EAAE,GAAG5mB,KAAK,CAAC,CAAA;AAC/EtE,IAAAA,QAAQ,GAAGA,QAAQ,CAACyV,KAAK,EAAE,CAAC0L,YAAY,CAAC,sBAAsB,EAAEmI,MAAM,CAAC,CAAA;AACxEvvB,IAAAA,IAAI,CAAC8oB,WAAW,CAAC7iB,QAAQ,CAAC,CAAA;AAC3B,GAAA;AACD,CAAA;AAEA;;;;;;;AAOG;AACH,SAASqpB,iBAAiBA,CAAC/rB,SAAmB,EAAE2rB,IAA2B,EAAED,IAAY,EAAA;AACxF,EAAA,MAAMtqB,QAAQ,GAAG,IAAIuqB,IAAI,CAAC3rB,SAAS,CAACmB,QAAQ,EAAG,CAACR,MAAM,CAAC,CAAA;EAEvD,MAAMmtB,QAAQ,GAAGvD,UAAU,CAACriB,QAAQ,CAACyjB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;AAClD,EAAA,MAAMoC,SAAS,GAAGrC,IAAI,GAAGoC,QAAQ,CAAA;EACjC,MAAME,WAAW,GAAGrC,IAAI,CAACsC,iBAAiB,GAAG,CAAC,GAAGH,QAAQ,CAAA;EAEzD,MAAM9mB,KAAK,GAAGnI,IAAI,CAACI,GAAG,CAAC,CAAC,EAAE8uB,SAAS,CAAC,GAAG,CAAC,CAAA;AACxC,EAAA,MAAMG,EAAE,GAAGF,WAAW,GAAGD,SAAS,CAAA;AAClC,EAAA,MAAMI,EAAE,GAAG,CAAC,GAAGJ,SAAS,GAAGC,WAAW,CAAA;AACtC,EAAA,MAAM3U,KAAK,GAAG,CAACyU,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAS,CAAA;EAEhD,KAAK,IAAI5yB,CAAC,GAAG,CAAC,EAAEkzB,EAAE,GAAG,CAAC,EAAEvV,EAAE,GAAa,EAAE,EAAE3d,CAAC,GAAG8E,SAAS,CAAC9C,QAAQ,EAAE,EAAEhC,CAAC,EAAE,EAAE;AACzE8E,IAAAA,SAAS,CAACiX,UAAU,CAAC/b,CAAC,EAAE2d,EAAE,CAAC,CAAA;AAC3B,IAAA,KAAK,IAAIzd,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyd,EAAE,CAAClY,MAAM,EAAEvF,CAAC,EAAE,EAAE;AACnC;MACA,IAAIW,KAAK,GAAGsyB,KAAK,CAACxV,EAAE,CAACzd,CAAC,CAAC,EAAEie,KAAK,CAAC,CAAA;AAE/B;AACAtd,MAAAA,KAAK,GAAG8C,IAAI,CAAC8a,KAAK,CAAC9a,IAAI,CAACe,GAAG,CAAC7D,KAAK,CAAC,GAAGiL,KAAK,CAAC,CAAA;AAE3C;AACAjL,MAAAA,KAAK,GAAIA,KAAK,IAAImyB,EAAE,GAAKnyB,KAAK,IAAIoyB,EAAG,CAAA;AAErC;AACA/sB,MAAAA,QAAQ,CAACgtB,EAAE,EAAE,CAAC,GAAGryB,KAAK,GAAG8C,IAAI,CAACyvB,IAAI,CAACzV,EAAE,CAACzd,CAAC,CAAC,CAAC,CAAA;AAC1C,KAAA;AACD,GAAA;AAEA;AACA4E,EAAAA,SAAS,CAACsB,QAAQ,CAACF,QAAQ,CAAC,CAAC4Z,aAAa,CAAC,IAAI,CAAC,CAACuT,SAAS,CAAC,KAAK,CAAC,CAAA;AAClE,CAAA;AAEA,SAAS3C,uBAAuBA,CAC/BvoB,QAAgB,EAChBrD,SAAmB,EACnByE,MAAe,EACfF,OAAkC,EAAA;AAElC,EAAA,MAAMgB,GAAG,GAAGvF,SAAS,CAACiZ,gBAAgB,CAAC,EAAE,CAAC,CAAA;AAC1C,EAAA,MAAM3T,GAAG,GAAGtF,SAAS,CAACkZ,gBAAgB,CAAC,EAAE,CAAC,CAAA;AAE1C,EAAA,IAAIwS,IAAY,CAAA;AAChB,EAAA,IAAIC,IAA2B,CAAA;EAE/B,IAAItoB,QAAQ,KAAK,UAAU,EAAE;IAC5BqoB,IAAI,GAAGnnB,OAAO,CAACsZ,gBAAgB,CAAA;AAC/B8N,IAAAA,IAAI,GAAGD,IAAI,IAAI,CAAC,GAAGlJ,SAAS,GAAGD,UAAU,CAAA;GACzC,MAAM,IAAIlf,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,SAAS,EAAE;IAC3DqoB,IAAI,GAAGnnB,OAAO,CAACuZ,cAAc,CAAA;AAC7B6N,IAAAA,IAAI,GAAGD,IAAI,IAAI,CAAC,GAAGlJ,SAAS,GAAGD,UAAU,CAAA;GACzC,MAAM,IAAIlf,QAAQ,CAACuP,UAAU,CAAC,QAAQ,CAAC,EAAE;IACzC8Y,IAAI,GAAGnnB,OAAO,CAACwZ,aAAa,CAAA;AAC5B4N,IAAAA,IAAI,GAAGD,IAAI,IAAI,CAAC,GAAG9S,UAAU,GAAGjX,WAAW,CAAA;GAC3C,MAAM,IAAI0B,QAAQ,CAACuP,UAAU,CAAC,WAAW,CAAC,EAAE;IAC5C,IAAIrN,GAAG,CAACvD,IAAI,CAAE9D,CAAC,IAAKA,CAAC,GAAG,CAAC,CAAC,IAAIoH,GAAG,CAACtD,IAAI,CAAE9D,CAAC,IAAKA,CAAC,GAAG,CAAC,CAAC,EAAE;MACrDuG,MAAM,CAACgQ,IAAI,CAAC,CAAA,EAAGvQ,MAAkB,CAAAb,WAAAA,EAAAA,QAA+B,uBAAA,CAAC,CAAA;MACjE,OAAO;AAAEqoB,QAAAA,IAAI,EAAE,CAAC,CAAA;OAAG,CAAA;AACpB,KAAA;IACAA,IAAI,GAAGnnB,OAAO,CAACyZ,gBAAgB,CAAA;AAC/B2N,IAAAA,IAAI,GAAGD,IAAI,IAAI,CAAC,GAAG9S,UAAU,GAAGjX,WAAW,CAAA;GAC3C,MAAM,IAAI0B,QAAQ,CAACuP,UAAU,CAAC,SAAS,CAAC,EAAE;AAC1C8Y,IAAAA,IAAI,GAAG7sB,IAAI,CAACyG,GAAG,CAAC,GAAGtF,SAAS,CAACiiB,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,EAAE,CAAA;AACxD0J,IAAAA,IAAI,GAAGD,IAAI,IAAI,CAAC,GAAG9S,UAAU,GAAGjX,WAAW,CAAA;IAC3C,IAAI3B,SAAS,CAACwd,gBAAgB,EAAE,GAAGkO,IAAI,GAAG,CAAC,EAAE;AAC5C1rB,MAAAA,SAAS,CAACsB,QAAQ,CAAC,IAAIqqB,IAAI,CAAC3rB,SAAS,CAACmB,QAAQ,EAAG,CAAC,CAAC,CAAA;AACpD,KAAA;IACA,OAAO;AAAEuqB,MAAAA,IAAI,EAAE,CAAC,CAAA;KAAG,CAAA;GACnB,MAAM,IAAIroB,QAAQ,CAACuP,UAAU,CAAC,UAAU,CAAC,EAAE;IAC3C,IAAIrN,GAAG,CAACvD,IAAI,CAAE9D,CAAC,IAAKA,CAAC,GAAG,CAAC,CAAC,IAAIoH,GAAG,CAACtD,IAAI,CAAE9D,CAAC,IAAKA,CAAC,GAAG,CAAC,CAAC,EAAE;MACrDuG,MAAM,CAACgQ,IAAI,CAAC,CAAA,EAAGvQ,MAAkB,CAAAb,WAAAA,EAAAA,QAA+B,uBAAA,CAAC,CAAA;MACjE,OAAO;AAAEqoB,QAAAA,IAAI,EAAE,CAAC,CAAA;OAAG,CAAA;AACpB,KAAA;IACAA,IAAI,GAAGnnB,OAAO,CAACumB,cAAc,CAAA;AAC7Ba,IAAAA,IAAI,GAAGD,IAAI,IAAI,CAAC,GAAG9S,UAAU,GAAGjX,WAAW,CAAA;GAC3C,MAAM,IAAI0B,QAAQ,CAACuP,UAAU,CAAC,GAAG,CAAC,EAAE;IACpC,IAAIrN,GAAG,CAACvD,IAAI,CAAE9D,CAAC,IAAKA,CAAC,GAAG,CAAC,CAAC,CAAC,IAAIoH,GAAG,CAACtD,IAAI,CAAE9D,CAAC,IAAKA,CAAC,GAAG,CAAC,CAAC,EAAE;MACtDuG,MAAM,CAACgQ,IAAI,CAAC,CAAA,EAAGvQ,MAAkB,CAAAb,WAAAA,EAAAA,QAAgC,wBAAA,CAAC,CAAA;MAClE,OAAO;AAAEqoB,QAAAA,IAAI,EAAE,CAAC,CAAA;OAAG,CAAA;AACpB,KAAA;IACAA,IAAI,GAAGnnB,OAAO,CAAC0Z,eAAe,CAAA;AAC9B0N,IAAAA,IAAI,GAAGpmB,GAAG,CAACvD,IAAI,CAAE9D,CAAC,IAAKA,CAAC,GAAG,CAAC,CAAC,GACzBytB,IAAI,GAAGD,IAAI,IAAI,CAAC,GAAGlJ,SAAS,GAAGD,UAAU,GACzCoJ,IAAI,GAAGD,IAAI,IAAI,CAAC,GAAG9S,UAAU,GAAGjX,WAAY,CAAA;AACjD,GAAC,MAAM;IACN,MAAM,IAAIlE,KAAK,CAAC,CAAA,EAAGyG,MAA+B,CAAAb,wBAAAA,EAAAA,QAAY,IAAA,CAAC,CAAA;AAChE,GAAA;EAEA,OAAO;IAAEqoB,IAAI;AAAEC,IAAAA,IAAAA;GAAM,CAAA;AACtB,CAAA;AAEA,SAASN,6BAA6BA,CAACviB,IAAU,EAAA;EAChD,MAAM0lB,SAAS,GAAe,EAAE,CAAA;EAChC,MAAMC,iBAAiB,GAAe,EAAE,CAAA;EACxC,KAAK,MAAMhyB,IAAI,IAAIqM,IAAI,CAACC,cAAc,EAAE,EAAE;AACzC,IAAA,MAAM/I,SAAS,GAAGvD,IAAI,CAACI,YAAY,CAAC,UAAU,CAAC,CAAA;AAC/C,IAAA,IAAImD,SAAS,EAAEwuB,SAAS,CAACtuB,IAAI,CAACF,SAAS,CAAC,CAAA;IACxC,KAAK,MAAMxF,MAAM,IAAIiC,IAAI,CAAC0D,WAAW,EAAE,EAAE;AACxC,MAAA,MAAMH,SAAS,GAAGxF,MAAM,CAACqC,YAAY,CAAC,UAAU,CAAC,CAAA;AACjD,MAAA,IAAImD,SAAS,EAAEyuB,iBAAiB,CAACvuB,IAAI,CAACF,SAAS,CAAC,CAAA;AACjD,KAAA;AACD,GAAA;AAEA,EAAA,IAAIwuB,SAAS,CAAC7tB,MAAM,KAAK,CAAC,EAAE;AAC3B,IAAA,MAAM,IAAIlD,KAAK,EAAIyG,EAAAA,MAAI,iCAAiC,CAAC,CAAA;AAC1D,GAAA;AAEA,EAAA,MAAMkB,IAAI,GAAGspB,UAAU,CAAOF,SAAS,EAAE,CAAC,CAAC,CAAA;AAE3C;AACA;AACA;AACA;AACA,EAAA,IAAIC,iBAAiB,CAAC9tB,MAAM,GAAG,CAAC,EAAE;IACjC,MAAM;AAAE4E,MAAAA,GAAG,EAAEopB,MAAM;AAAErpB,MAAAA,GAAG,EAAEspB,MAAAA;AAAQ,KAAA,GAAGF,UAAU,CAAOD,iBAAiB,EAAE,CAAC,CAAC,CAAA;AAC3ElpB,IAAAA,GAAG,CAACH,IAAI,CAACG,GAAG,EAAEH,IAAI,CAACG,GAAG,EAAEA,GAAG,CAACopB,MAAM,EAAE3nB,OAAK,CAAC2nB,MAAM,EAAEA,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;AACzErpB,IAAAA,GAAG,CAACF,IAAI,CAACE,GAAG,EAAEF,IAAI,CAACE,GAAG,EAAEA,GAAG,CAACspB,MAAM,EAAE5nB,OAAK,CAAC4nB,MAAM,EAAEA,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;AAC1E,GAAA;AAEA,EAAA,OAAOxpB,IAAI,CAAA;AACZ,CAAA;AAEA;AACA,SAASspB,UAAUA,CAAkB3uB,SAAqB,EAAEgB,WAAmB,EAAA;EAC9E,MAAMwE,GAAG,GAAa,IAAInF,KAAK,CAACW,WAAW,CAAC,CAACuW,IAAI,CAAClQ,QAAQ,CAAC,CAAA;AAC3D,EAAA,MAAM9B,GAAG,GAAa,IAAIlF,KAAK,CAACW,WAAW,CAAC,CAACuW,IAAI,CAAC,CAAClQ,QAAQ,CAAC,CAAA;EAE5D,MAAMynB,MAAM,GAAa,EAAE,CAAA;EAC3B,MAAMC,MAAM,GAAa,EAAE,CAAA;AAE3B,EAAA,KAAK,MAAM7lB,QAAQ,IAAIlJ,SAAS,EAAE;AACjCkJ,IAAAA,QAAQ,CAACgQ,gBAAgB,CAAC4V,MAAM,CAAC,CAAA;AACjC5lB,IAAAA,QAAQ,CAACiQ,gBAAgB,CAAC4V,MAAM,CAAC,CAAA;IACjC,KAAK,IAAI5zB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6F,WAAW,EAAE7F,CAAC,EAAE,EAAE;AACrCqK,MAAAA,GAAG,CAACrK,CAAC,CAAC,GAAG2D,IAAI,CAAC0G,GAAG,CAACA,GAAG,CAACrK,CAAC,CAAC,EAAE2zB,MAAM,CAAC3zB,CAAC,CAAC,CAAC,CAAA;AACpCoK,MAAAA,GAAG,CAACpK,CAAC,CAAC,GAAG2D,IAAI,CAACyG,GAAG,CAACA,GAAG,CAACpK,CAAC,CAAC,EAAE4zB,MAAM,CAAC5zB,CAAC,CAAC,CAAC,CAAA;AACrC,KAAA;AACD,GAAA;EAEA,OAAO;IAAEqK,GAAG;AAAED,IAAAA,GAAAA;GAAsC,CAAA;AACrD,CAAA;AAEA,SAAS8lB,YAAYA,CAAC2D,MAAc,EAAA;AACnC,EAAA,MAAMC,MAAM,GAAGD,MAAM,CAAC,CAAC,CAAC,CAAA;AACxB,EAAA,KAAK,MAAM3pB,IAAI,IAAI2pB,MAAM,EAAE;AAC1BxpB,IAAAA,GAAG,CAACypB,MAAM,CAACzpB,GAAG,EAAEypB,MAAM,CAACzpB,GAAG,EAAEH,IAAI,CAACG,GAAG,CAAC,CAAA;AACrCD,IAAAA,GAAG,CAAC0pB,MAAM,CAAC1pB,GAAG,EAAE0pB,MAAM,CAAC1pB,GAAG,EAAEF,IAAI,CAACE,GAAG,CAAC,CAAA;AACtC,GAAA;AACA,EAAA,OAAO0pB,MAAM,CAAA;AACd,CAAA;AAOA,SAASnD,aAAaA,CAACrW,SAAgC,EAAA;AACtD,EAAA,OAAOyZ,4BAA4B,CAAC,EAAqB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEzZ,SAAS,CAAChQ,MAAM,EAAE,CAC1FgQ,SAAS,CAACxO,KAAK,EACfwO,SAAS,CAACxO,KAAK,EACfwO,SAAS,CAACxO,KAAK,CACf,CAAS,CAAA;AACX,CAAA;AAEA,SAASqnB,KAAKA,CAACtyB,KAAa,EAAEsd,KAAW,EAAA;EACxC,OAAOxa,IAAI,CAAC0G,GAAG,CAAC1G,IAAI,CAACyG,GAAG,CAACvJ,KAAK,EAAEsd,KAAK,CAAC,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;AACrD;;AC7fO,MAAM6V,gBAAgB,GAA8C;AAC1EC,EAAAA,KAAK,EAAE,MAAM;EACb,GAAGtE,iBAAAA;EACH;AAED,MAAM3mB,MAAI,GAAG,SAAS,CAAA;AAEtB;;;;;;;;;;;;;;;;;;;;;;;;AAwBG;AACG,SAAUkrB,OAAOA,CAAC9qB,QAAwB,EAAA;AAC/C,EAAA,MAAMC,OAAO,GAAG;AAAE,IAAA,GAAG2qB,gBAAgB;IAAE,GAAG5qB,QAAAA;GAAsC,CAAA;AAChF,EAAA,MAAM8jB,OAAO,GAAG7jB,OAAO,CAAC6jB,OAA4C,CAAA;EAEpE,IAAI,CAACA,OAAO,EAAE;AACb,IAAA,MAAM,IAAI3qB,KAAK,EAAIyG,EAAAA,MAAI,0DAA0D,CAAC,CAAA;AACnF,GAAA;AAEA,EAAA,OAAOvI,eAAe,CAACuI,MAAI,EAAA,UAAS5B,QAAkB,EAAA;IAAA,IAAmB;AACxE,MAAA,IAAI4a,OAAe,CAAA;AACnB,MAAA,IAAI+N,cAAsB,CAAA;AAC1B,MAAA,IAAInN,cAAc,GAAGvZ,OAAO,CAACuZ,cAAc,CAAA;AAE3C;AACA;AACA;AACA;AACA;AACA,MAAA,IAAIvZ,OAAO,CAAC4qB,KAAK,KAAK,QAAQ,EAAE;AAC/BjS,QAAAA,OAAO,GAAG,IAAI,CAAA;AACd+N,QAAAA,cAAc,GAAG,IAAI,CAAA;AACtB,OAAC,MAAM;AACN/N,QAAAA,OAAO,GAAG,6CAA6C,CAAA;AACvD+N,QAAAA,cAAc,GAAG,4DAA4D,CAAA;QAC7EnN,cAAc,GAAGjf,IAAI,CAAC0G,GAAG,CAACuY,cAAc,EAAE,CAAC,CAAC,CAAC;AAC9C,OAAA;MAAC,OAAApjB,OAAA,CAAAC,OAAA,CAEK2H,QAAQ,CAACkT,SAAS,CACvBgD,OAAO,CAAC;AACP4P,QAAAA,OAAO,EAAEA,OAAO;AAChB5tB,QAAAA,MAAM,EAAE,MAAA;OACR,CAAC,EACFwwB,QAAQ,CAAC;AACR,QAAA,GAAGzmB,OAAO;QACV2Y,OAAO;QACP+N,cAAc;AACdnN,QAAAA,cAAAA;OACA,CAAC,CACF,CAAA,CAAA9iB,IAAA,CAAA,YAAA;AAEDsH,QAAAA,QAAQ,CACN+a,eAAe,CAACgS,gCAAqB,CAAC,CACtChR,WAAW,CAAC,IAAI,CAAC,CACjBC,iBAAiB,CAAC;AAClBZ,UAAAA,MAAM,EACLnZ,OAAO,CAAC4qB,KAAK,KAAK,QAAQ,GACvBE,gCAAqB,CAAC9Q,aAAa,CAAC+Q,QAAQ,GAC5CD,gCAAqB,CAAC9Q,aAAa,CAACgR,MAAAA;AACxC,SAAA,CAAC,CAAA;AAAC,OAAA,CAAA,CAAA;AACL,KAAC,QAAA9zB,CAAA,EAAA;AAAA,MAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,KAAA;GAAC,CAAA,CAAA;AACH;;ACvF6D;AAiDxD,SAAA+zB,OAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAA3zB,KAAgC,EAAA;aAElC,EAAwE;yBAC3D4zB,OAAK;eAClB,CAAazL,CAAA,EAAA;iBACA,GAAA,CAAA,EAAA;kBAEkEnoB,KAAA,CAAAmoB,CAAA,CAAA;;gBAE/EnoB,KAAoF,CAAAmC,CAAA,CAAA;;kBAEPsxB,OAAA,CAAAI,IAAA,CAAA,IAAA,EAAAH,IAAA,EAAAC,KAAA,CAAA,CAAA;;AAE3E,OAAA;;sBAEkB,CAAA10B,IAAA,EAAA;MAClBe,KAAA,CAAAf,IAAA,CAAAw0B,OAAA,CAAAI,IAAA,CAAA,IAAa,EAAAH,IAAA,EAAAC,KAAA,CAAA,EAAAF,OAAqB,CAAAI,IAAA,CAAA,IAAa,EAAAH,IAAA,EAAA,CAAS,CAAE,CAAA,CAAA;AAC1D,MAAA,OAAA;;IAGFA,IAAA,CAAAvL,CAAA,GAAAwL,KAAA,CAAA;kBACI,CAAA;AACH,IAAA,MAAAG,QAAA,GAAAJ,IAAA,CAAQK,CAAC,CAAA;kBACT;eACDL,IAAC,CAAA,CAAA;;AAGD,GAAA;;MA5EqBE,KAAA,4BAAkB;EAEpC,SAAAA,KAAAA,GAAO,EAAA;EAKPA,KAAA,CAAAI,SAAA,CAAA/0B,IAAA,GAAA,UAAsDg1B,WAAA,EAAAC,UAAA,EAAA;AAE5D,IAAA,MAAAjB,MAAA,GAAA,IAAAW,KAAA,EAAA,CAAA;;;;;;;;;AASG,SAAA;AACH,QAAA,OAAgBX,MAAA,CAAA;OACf,MAA6D;AAC7D,QAAA,OAAM,IAAA,CAAA;;AAGL,KAAA;UAEA,GAAM,UAAAkB,KAAA,EAAA;MACJ,IAAA;AACA,QAAA,MAAAn0B,KAAA,GAAAm0B,KAAA,CAAAhyB,CAAA,CAAA;iBACA,CAAGgmB,CAAA,GAAE,CAAA,EAAG;kBACL8K,sBAAe,GAA8CgB,WAAA,CAAAj0B,KAAA,CAAA,GAAAA,KAAA,CAAA,CAAA;SACjE,MAAA,IAAAk0B,YAAe;kBACRjB,MAAA,EAAA,CAAA,EAAAiB,UAAA,CAAAl0B,KAAA,CAAA,CAAA,CAAA;eACP;kBAEKizB,MAAA,EAAA,CAAA,EAAAjzB,KAAe,CAAG,CAAA;;eAElBN,CAAA,EAAA;AAEN+zB,QAAAA,OAAA,CAAAR,MAAmB,EAAA,CAAA,EAAAvzB,CAAA,CAAA,CAAA;;;AAIlB,IAAA,OAAAuzB,MAAA,CAAA;;;;AAoCC,SAAAmB,uBAAsB,EAAA;EACtB,OAAAC,QAAA,qBAAqBA,QAAO,CAAAlM,CAAA,GAAA,CAAA,CAAA;AAC5B,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA/EEhgB,MAAI,GAAG,YAAY,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOzB;;;;;;;;;AASG;AACa,SAAAmsB,UAAUA,CAAC/rB,QAAA,EAAiD;AAI3E,EAAA,OAAO3I,eAAe,CAACuI,MAAI,EAAA,UAASM,GAAa,EAAA;IAAA,IAAmB;AAAA,MAAA,SAAA8rB,MAAA,GAAA;AAwFnE;QACAC,kBAAkB,CAAC9lB,OAAO,EAAE,CAAA;AAE5B;AACA,QAAA,KAAK,MAAM+lB,GAAG,IAAIC,aAAa,EAAE;AAChC,UAAA,IAAID,GAAG,IAAIA,GAAG,CAACzuB,WAAW,EAAE,CAACpB,MAAM,KAAK,CAAC,EAAE6vB,GAAG,CAAC/lB,OAAO,EAAE,CAAA;AACzD,SAAA;AAEAhG,QAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AAAC,OAAA;AA/FnC,MAAA,MAAMO,MAAM,GAAGD,GAAG,CAACE,SAAS,EAAE,CAAA;AAE9B,MAAA,MAAMgsB,cAAc,GAAGlsB,GAAG,CACxB3B,OAAO,EAAE,CACT8tB,kBAAkB,EAAE,CACpBvtB,GAAG,CAAEwtB,GAAG,IAAKA,GAAG,CAACC,aAAa,CAAC,CAAA;AACjC,MAAA,IAAI,CAACH,cAAc,CAACxoB,QAAQ,CAAC,qCAAqC,CAAC,EAAE;AACpEzD,QAAAA,MAAM,CAACgQ,IAAI,EAAIvQ,EAAAA,MAAI,8DAA8D,CAAC,CAAA;QAClF,OAAAxJ,OAAA,CAAAC,OAAA,EAAA,CAAA;AACD,OAAA;AAEA,MAAA,MAAMm2B,YAAY,GAAGtsB,GAAG,CAAC6Y,eAAe,CAAC0T,0BAAe,CAAC,CAAA;AACzD,MAAA,MAAMC,aAAa,GAAGxsB,GAAG,CAAC6Y,eAAe,CAAC4T,+BAAoB,CAAC,CAAA;AAC/D,MAAA,MAAMV,kBAAkB,GAAG/rB,GAAG,CAAC6Y,eAAe,CAAC6T,4CAAiC,CAAC,CAAA;AAEjF,MAAA,MAAMT,aAAa,GAAG,IAAIpyB,GAAG,EAAkB,CAAA;AAAC,MAAA,MAAA6R,MAAA,GAAAihB,MAAA,CAEzB3sB,GAAG,CAAC3B,OAAO,EAAE,CAACC,aAAa,EAAE,EAAA,UAAzCJ,QAAQ,EAAmC;AAAA,QAAA,SAAAqP,MAAA,GAAA;AAkErD;AACArP,UAAAA,QAAQ,CAACmhB,YAAY,CAAC,qCAAqC,EAAE,IAAI,CAAC,CAAA;AAAC,SAAA;AAlEnE,QAAA,MAAMuN,SAAS,GAAG1uB,QAAQ,CAACiiB,YAAY,CAAwB,qCAAqC,CAAC,CAAA;AACrG,QAAA,IAAI,CAACyM,SAAS,EAAA,OAAA;AAEd;QACA,MAAMC,QAAQ,GAAGL,aAAa,CAC5BM,cAAc,EAAE,CAChBC,iBAAiB,CAAC,GAAG,CAAC,CACtBC,sBAAsB,CAACJ,SAAS,CAACK,iBAAiB,EAAE,CAAC,CAAA;AAEvD;QACAhB,aAAa,CAACxyB,GAAG,CAACmzB,SAAS,CAACM,4BAA4B,EAAE,CAAC,CAAA;QAC3DjB,aAAa,CAACxyB,GAAG,CAACyE,QAAQ,CAACivB,mBAAmB,EAAE,CAAC,CAAA;QACjDlB,aAAa,CAACxyB,GAAG,CAACyE,QAAQ,CAACkvB,2BAA2B,EAAE,CAAC,CAAA;AAEzD;AACA;AACA;AACA;AACA;AACAlvB,QAAAA,QAAQ,CACNsR,kBAAkB,CAACod,SAAS,CAACS,gBAAgB,EAAE,CAAC,CAChDtd,iBAAiB,CAAC,CAAC,CAAC,CACpBF,kBAAkB,CAAC,CAAC,CAAC,CACrBwP,YAAY,CAAC,mBAAmB,EAAEiN,YAAY,CAACgB,SAAS,EAAE,CAACC,MAAM,CAAC,IAAI,CAAC,CAAC,CACxElO,YAAY,CAAC,wBAAwB,EAAEwN,QAAQ,CAAC,CAAA;AAElD;AACA,QAAA,MAAMW,cAAc,GAAGZ,SAAS,CAACa,iBAAiB,EAAE,CAAA;AACpD,QAAA,IAAID,cAAc,EAAE;AACnBtvB,UAAAA,QAAQ,CAACwvB,mBAAmB,CAACF,cAAc,CAAC,CAAA;AAC5CtvB,UAAAA,QAAQ,CAACyvB,uBAAuB,EAAG,CAACC,IAAI,CAAChB,SAAS,CAACiB,qBAAqB,EAAG,CAAC,CAAA;AAC7E,SAAA;AAEA;AACA,QAAA,MAAMC,SAAS,GAAGlB,SAAS,CAACM,4BAA4B,EAAE,CAAA;AAAC,QAAA,MAAA1f,KAAA,GAAA,YAAA;AAAA,UAAA,IACvDsgB,SAAS,EAAA;AACZ;AACA,YAAA,MAAMC,aAAa,GAAGnB,SAAS,CAACoB,gCAAgC,EAAG,CAAA;AACnE,YAAA,MAAMC,eAAe,GAAGjuB,GAAG,CAACkuB,aAAa,EAAE,CAAA;AAAC,YAAA,OAAAh4B,OAAA,CAAAC,OAAA,CACtCL,cAAc,CAACg4B,SAAS,EAAEG,eAAe,EAAE,CAACx3B,MAAM,EAAEC,CAAC,EAAEE,CAAC,KAAI;AACjEH,cAAAA,MAAM,CAACqD,GAAG,CAACpD,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;aACzB,CAAC,EAAAJ,IAAA,CAAA,YAAA;AACFq2B,cAAAA,QAAQ,CAACsB,kBAAkB,CAACF,eAAe,CAAC,CAAA;AAC5CpB,cAAAA,QAAQ,CAACuB,uBAAuB,CAACH,eAAe,CAAC,CAAA;cACjDpB,QAAQ,CAACwB,sBAAsB,EAAG,CAACT,IAAI,CAACG,aAAa,CAAC,CAAA;cACtDlB,QAAQ,CAACyB,2BAA2B,EAAG,CAACV,IAAI,CAACG,aAAa,CAAC,CAAA;AAE3D;AACA,cAAA,MAAMQ,gBAAgB,GAAG3B,SAAS,CAAC4B,mBAAmB,EAAE,CAAA;AACxD,cAAA,MAAMC,iBAAiB,GAAGzuB,GAAG,CAACkuB,aAAa,EAAE,CAAA;AAAC,cAAA,OAAAh4B,OAAA,CAAAC,OAAA,CACxCL,cAAc,CAACg4B,SAAS,EAAEW,iBAAiB,EAAE,CAACh4B,MAAM,EAAEC,CAAC,EAAEE,CAAC,KAAI;AACnE;gBACA,MAAM83B,SAAS,GAAG,GAAG,GAAGr0B,IAAI,CAAC8a,KAAK,CAAC1e,MAAM,CAACmD,GAAG,CAAClD,CAAC,EAAEE,CAAC,EAAE,CAAC,CAAC,GAAG23B,gBAAgB,CAAC,CAAA;gBAC1E93B,MAAM,CAACqD,GAAG,CAACpD,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;gBACtBH,MAAM,CAACqD,GAAG,CAACpD,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAE83B,SAAS,CAAC,CAAA;gBAC9Bj4B,MAAM,CAACqD,GAAG,CAACpD,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;gBACtBH,MAAM,CAACqD,GAAG,CAACpD,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAA;eACxB,CAAC,EAAAJ,IAAA,CAAA,YAAA;AACF0H,gBAAAA,QAAQ,CAACywB,2BAA2B,CAACF,iBAAiB,CAAC,CAAA;gBACvDvwB,QAAQ,CAAC0wB,+BAA+B,EAAG,CAAChB,IAAI,CAACG,aAAa,CAAC,CAAA;AAAC,eAAA,CAAA,CAAA;AAAA,aAAA,CAAA,CAAA;AAAA,WAAA,MAAA;YAEhElB,QAAQ,CAACG,sBAAsB,CAACJ,SAAS,CAACK,iBAAiB,EAAE,CAAC,CAAA;YAC9D/uB,QAAQ,CAAC2R,kBAAkB,CAAC,CAAC,GAAG+c,SAAS,CAAC4B,mBAAmB,EAAE,CAAC,CAAA;AAAC,WAAA;AAAA,SAAA,EAAA,CAAA;AAAA,QAAA,OAAAhhB,KAAA,IAAAA,KAAA,CAAAhX,IAAA,GAAAgX,KAAA,CAAAhX,IAAA,CAAA+W,MAAA,CAAAA,GAAAA,MAAA,CAAAC,KAAA,CAAA,CAAA;OAKlE,CAAA,CAAA;AAAA,MAAA,OAAAtX,OAAA,CAAAC,OAAA,CAAAuV,MAAA,IAAAA,MAAA,CAAAlV,IAAA,GAAAkV,MAAA,CAAAlV,IAAA,CAAAs1B,MAAA,CAAAA,GAAAA,MAAA,CAAApgB,MAAA,CAAA,CAAA,CAAA;AAWF,KAAC,QAAAzU,CAAA,EAAA;AAAA,MAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,KAAA;GAAC,CAAA,CAAA;AACH;;AC7HA,MAAMyI,MAAI,GAAG,QAAQ,CAAA;AAQrB;;;;;;;;AAQG;AACa,SAAAmvB,MAAMA,CAAC/uB,QAAA,EAAyC;AAI/D,EAAA,OAAO3I,eAAe,CAACuI,MAAI,EAAGM,GAAa,IAAU;AACpD,IAAA,MAAMC,MAAM,GAAGD,GAAG,CAACE,SAAS,EAAE,CAAA;AAC9B,IAAA,MAAMyB,OAAO,GAAG,IAAItI,GAAG,EAAqC,CAAA;AAE5D,IAAA,KAAK,MAAMiL,IAAI,IAAItE,GAAG,CAAC3B,OAAO,EAAE,CAACgG,UAAU,EAAE,EAAE;MAC9C,KAAK,MAAMpM,IAAI,IAAIqM,IAAI,CAACC,cAAc,EAAE,EAAE;AACzC,QAAA,MAAMrM,OAAO,GAAGD,IAAI,CAACE,UAAU,EAAE,CAAA;QACjC,IAAI,CAACD,OAAO,EAAE,SAAA;QAEd,MAAM6a,cAAc,GAAG9a,IAAI,CAACI,YAAY,CAAC,UAAU,CAAE,CAACK,QAAQ,EAAE,CAAA;AAEhE;QACA,KAAK,MAAMkf,YAAY,IAAI3f,IAAI,CAACwD,cAAc,EAAE,EAAE;AACjDxD,UAAAA,IAAI,CAACgE,IAAI,CAAC2b,YAAY,EAAEkX,eAAe,CAAClX,YAAY,EAAE1f,OAAO,EAAE+H,MAAM,EAAE0B,OAAO,CAAC,CAAC,CAAA;AAEhF;AACA,UAAA,IAAIiW,YAAY,CAACra,WAAW,EAAE,CAACpB,MAAM,KAAK,CAAC,EAAEyb,YAAY,CAAC3R,OAAO,EAAE,CAAA;AACpE,SAAA;AAEA;QACA,KAAK,MAAMjQ,MAAM,IAAIiC,IAAI,CAAC0D,WAAW,EAAE,EAAE;UACxC,KAAK,MAAMic,YAAY,IAAI5hB,MAAM,CAACyF,cAAc,EAAE,EAAE;AACnDzF,YAAAA,MAAM,CAACiG,IAAI,CAAC2b,YAAY,EAAEkX,eAAe,CAAClX,YAAY,EAAE1f,OAAO,EAAE+H,MAAM,EAAE0B,OAAO,CAAC,CAAC,CAAA;AAElF;AACA,YAAA,IAAIiW,YAAY,CAACra,WAAW,EAAE,CAACpB,MAAM,KAAK,CAAC,EAAEyb,YAAY,CAAC3R,OAAO,EAAE,CAAA;AACpE,WAAA;AACD,SAAA;QAEA,MAAM+M,cAAc,GAAG/a,IAAI,CAACI,YAAY,CAAC,UAAU,CAAE,CAACK,QAAQ,EAAE,CAAA;AAChEuH,QAAAA,MAAM,CAACU,KAAK,CAAC,CAAA,EAAGjB,MAAS,CAAA,EAAA,EAAArE,aAAa,CAAC0X,cAAc,EAAEC,cAAc,CAAC,YAAY,CAAC,CAAA;AAEnF;AACA/a,QAAAA,IAAI,CAACkW,UAAU,CAAC,IAAI,CAAC,CAAA;AACrB,QAAA,IAAIjW,OAAO,CAACqF,WAAW,EAAE,CAACpB,MAAM,KAAK,CAAC,EAAEjE,OAAO,CAAC+N,OAAO,EAAE,CAAA;AAC1D,OAAA;AACD,KAAA;AAEAhG,IAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AACnC,GAAC,CAAC,CAAA;AACH,CAAA;AAEA,SAASovB,eAAeA,CACvBlX,YAAsB,EACtB1f,OAAiB,EACjB+H,MAAe,EACf0B,OAA+C,EAAA;AAE/C,EAAA,IAAIA,OAAO,CAACpI,GAAG,CAACqe,YAAY,CAAC,IAAIjW,OAAO,CAAC/H,GAAG,CAACge,YAAY,CAAE,CAACre,GAAG,CAACrB,OAAO,CAAC,EAAE;AACzE+H,IAAAA,MAAM,CAACU,KAAK,CAAC,CAAA,EAAGjB,MAAI,CAAA,mCAAA,EAAsCkY,YAAY,CAACnR,OAAO,EAAM,CAAA,EAAA,CAAA,CAAC,CAAA;IACrF,OAAO9E,OAAO,CAAC/H,GAAG,CAACge,YAAY,CAAE,CAAChe,GAAG,CAAC1B,OAAO,CAAE,CAAA;AAChD,GAAA;AAEA,EAAA,MAAM4f,YAAY,GAAGF,YAAY,CAACjE,KAAK,EAAE,CAAA;EACzC,MAAMI,SAAS,GAAG6D,YAAY,CAACjb,QAAQ,EAAG,CAACxD,WAA8C,CAAA;AACzF2e,EAAAA,YAAY,CAAChb,QAAQ,CAAC,IAAIiX,SAAS,CAAC7b,OAAO,CAACQ,QAAQ,EAAE,GAAGkf,YAAY,CAACpb,cAAc,EAAE,CAAC,CAAC,CAAA;EAExF,MAAM6X,EAAE,GAAa,EAAE,CAAA;AACvB,EAAA,KAAK,IAAI3d,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwB,OAAO,CAACQ,QAAQ,EAAE,EAAEhC,CAAC,EAAE,EAAE;AAC5CohB,IAAAA,YAAY,CAACxD,UAAU,CAAC5d,CAAC,EAAEkhB,YAAY,CAACnF,UAAU,CAACva,OAAO,CAAC4K,SAAS,CAACpM,CAAC,CAAC,EAAE2d,EAAE,CAAC,CAAC,CAAA;AAC9E,GAAA;AAEA,EAAA,IAAI,CAAC1S,OAAO,CAACpI,GAAG,CAACqe,YAAY,CAAC,EAAEjW,OAAO,CAAC7H,GAAG,CAAC8d,YAAY,EAAE,IAAIve,GAAG,EAAE,CAAC,CAAA;EACpEsI,OAAO,CAAC/H,GAAG,CAACge,YAAY,CAAE,CAAC9d,GAAG,CAAC5B,OAAO,EAAE4f,YAAY,CAAC,CAAA;AAErD,EAAA,OAAOA,YAAY,CAAA;AACpB;;ACrFA,MAAMpY,MAAI,GAAG,SAAS,CAAA;AAQtB,MAAMqvB,gBAAgB,GAA6B;AAClDne,EAAAA,SAAS,EAAE,KAAA;CACX,CAAA;AAED;;;;;;;;;;;;AAYG;AACa,SAAAoe,OAAOA,CAAClvB,QAAA,EAA2C;AAAA,EAAA,IAA3CA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,QAAA,GAA2BivB,gBAAgB,CAAA;AAAA,GAAA;AAClE,EAAA,MAAMhvB,OAAO,GAAG;AAAE,IAAA,GAAGgvB,gBAAgB;IAAE,GAAGjvB,QAAAA;GAAsC,CAAA;AAEhF,EAAA,OAAO3I,eAAe,CAACuI,MAAI,EAAA,UAAS5B,QAAkB,EAAA;IAAA,IAAmB;AACxE,MAAA,MAAMmC,MAAM,GAAGnC,QAAQ,CAACoC,SAAS,EAAE,CAAA;MACnC,IAAI+uB,QAAQ,GAAG,CAAC,CAAA;AAAC,MAAA,OAAA/4B,OAAA,CAAAC,OAAA,CAEX2H,QAAQ,CAACkT,SAAS,CAAC6d,MAAM,EAAE,CAAC,EAAAr4B,IAAA,CAAA,YAAA;AAElC,QAAA,KAAK,MAAM8N,IAAI,IAAIxG,QAAQ,CAACO,OAAO,EAAE,CAACgG,UAAU,EAAE,EAAE;UACnD,KAAK,MAAMpM,IAAI,IAAIqM,IAAI,CAACC,cAAc,EAAE,EAAE;AACzC,YAAA,MAAMnM,QAAQ,GAAGH,IAAI,CAACI,YAAY,CAAC,UAAU,CAAE,CAAA;AAC/C,YAAA,IAAIyd,MAAM,GAAG7d,IAAI,CAACI,YAAY,CAAC,QAAQ,CAAC,CAAA;AAExC,YAAA,IAAI0H,OAAO,CAAC6Q,SAAS,IAAIkF,MAAM,EAAE;cAChCA,MAAM,CAAC7P,OAAO,EAAE,CAAA;aAChB,MAAM,IAAI6P,MAAM,EAAE;AAClB7V,cAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,qCAAqC,CAAC,CAAA;AAC1D,cAAA,SAAA;AACD,aAAA;YAEAoW,MAAM,GAAGhY,QAAQ,CACf0T,cAAc,EAAE,CAChB1U,QAAQ,CAAC,IAAIsZ,YAAY,CAAChe,QAAQ,CAACM,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CACnDgZ,OAAO,CAAC,MAAM,CAAC,CAAA;YAEjB,MAAM1W,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAS,CAAA;YAC3B,MAAMC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAS,CAAA;YAC3B,MAAM8H,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAS,CAAA;AAE3B,YAAA,KAAK,IAAIrM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,QAAQ,CAACM,QAAQ,EAAE,EAAEhC,CAAC,IAAI,CAAC,EAAE;cAChD0B,QAAQ,CAACqa,UAAU,CAAC/b,CAAC,GAAG,CAAC,EAAEsE,CAAC,CAAC,CAAA;cAC7B5C,QAAQ,CAACqa,UAAU,CAAC/b,CAAC,GAAG,CAAC,EAAEuE,CAAC,CAAC,CAAA;cAC7B7C,QAAQ,CAACqa,UAAU,CAAC/b,CAAC,GAAG,CAAC,EAAEqM,CAAC,CAAC,CAAA;cAE7B,MAAMmsB,UAAU,GAAGC,aAAa,CAACn0B,CAAC,EAAEC,CAAC,EAAE8H,CAAC,CAAC,CAAA;cAEzC+S,MAAM,CAACxB,UAAU,CAAC5d,CAAC,GAAG,CAAC,EAAEw4B,UAAU,CAAC,CAAA;cACpCpZ,MAAM,CAACxB,UAAU,CAAC5d,CAAC,GAAG,CAAC,EAAEw4B,UAAU,CAAC,CAAA;cACpCpZ,MAAM,CAACxB,UAAU,CAAC5d,CAAC,GAAG,CAAC,EAAEw4B,UAAU,CAAC,CAAA;AACrC,aAAA;AAEAj3B,YAAAA,IAAI,CAACiW,YAAY,CAAC,QAAQ,EAAE4H,MAAM,CAAC,CAAA;AACnCmZ,YAAAA,QAAQ,EAAE,CAAA;AACX,WAAA;AACD,SAAA;AAAC,QAAA,IAEG,CAACA,QAAQ,EAAA;AACZhvB,UAAAA,MAAM,CAACgQ,IAAI,EAAIvQ,EAAAA,MAAI,qDAAqD,CAAC,CAAA;AAAC,SAAA,MAAA;AAE1EO,UAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AAAC,SAAA;AAAA,OAAA,CAAA,CAAA;AAErC,KAAC,QAAAzI,CAAA,EAAA;AAAA,MAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,KAAA;GAAC,CAAA,CAAA;AACH,CAAA;AAEA;AACA,SAASk4B,aAAaA,CAACn0B,CAAO,EAAEC,CAAO,EAAE8H,CAAO,EAAA;AAC/C,EAAA,MAAMygB,CAAC,GAAG,CAACvoB,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AACjD,EAAA,MAAMuoB,CAAC,GAAG,CAACxgB,CAAC,CAAC,CAAC,CAAC,GAAG/H,CAAC,CAAC,CAAC,CAAC,EAAE+H,CAAC,CAAC,CAAC,CAAC,GAAG/H,CAAC,CAAC,CAAC,CAAC,EAAE+H,CAAC,CAAC,CAAC,CAAC,GAAG/H,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;EACjD,MAAMo0B,CAAC,GAAG,CACT5L,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;AAAE;AAC3BC,EAAAA,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,EACzBC,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,CACjB,CAAA;EACT,OAAO8L,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAED,CAAC,CAAS,CAAA;AACvC;;AC/EA,MAAM1vB,MAAI,GAAG,SAAS,CAAA;AAcf,MAAM4vB,gBAAgB,GAA6B;AACzDC,EAAAA,SAAS,EAAE,CAAC;AACZxuB,EAAAA,GAAG,EAAE,CAAA;EACL;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCG;AACa,SAAAyuB,OAAOA,CAAC1vB,QAAA,EAA2C;AAAA,EAAA,IAA3CA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,QAAA,GAA2BwvB,gBAAgB,CAAA;AAAA,GAAA;AAClE,EAAA,MAAMvvB,OAAO,GAAG;AAAE,IAAA,GAAGuvB,gBAAgB;IAAE,GAAGxvB,QAAAA;GAAsC,CAAA;EAChF,MAAMyvB,SAAS,GAAGl1B,IAAI,CAACyG,GAAG,CAACf,OAAO,CAACwvB,SAAS,EAAE,CAAC,CAAC,CAAA;EAChD,MAAMxuB,GAAG,GAAG1G,IAAI,CAACyG,GAAG,CAACf,OAAO,CAACgB,GAAG,EAAE,CAAC,CAAC,CAAA;AAEpC,EAAA,OAAO5J,eAAe,CAACuI,MAAI,EAAA,UAAS5B,QAAkB,EAAA;IAAA,IAAmB;AACxE,MAAA,MAAMmC,MAAM,GAAGnC,QAAQ,CAACoC,SAAS,EAAE,CAAA;AACnC,MAAA,MAAMC,IAAI,GAAGrC,QAAQ,CAACO,OAAO,EAAE,CAAA;AAE/B;MAAA,OAAAnI,OAAA,CAAAC,OAAA,CACM2H,QAAQ,CAACkT,SAAS,CACvBvF,KAAK,CAAC;AACLtI,QAAAA,aAAa,EAAE,CAACxF,iBAAY,CAACyF,QAAQ,CAAC;AACtCkI,QAAAA,cAAc,EAAE,KAAK;AACrBC,QAAAA,WAAW,EAAE,IAAI;AACjBF,QAAAA,UAAU,EAAE,IAAA;OACZ,CAAC,CACF,CAAA,CAAA7U,IAAA,CAAA,YAAA;AAAA,QAAA,SAAAi5B,MAAA,GAAA;AAAA,UAAA,SAAA3D,MAAA,GAAA;AAAA,YAAA,SAAAve,MAAA,GAAA;AAiJD;cAEA,IAAImiB,wBAAwB,GAAG,CAAC,CAAA;AAChC,cAAA,KAAK,MAAMz3B,IAAI,IAAI8U,KAAK,EAAE;AACzB,gBAAA,MAAM4iB,WAAW,GAAG13B,IAAI,CAACkG,WAAW,EAAG,CAAA;AACvC,gBAAA,MAAMuP,GAAG,GAAGkiB,cAAc,CAACh2B,GAAG,CAAC+1B,WAAW,CAAE,CAAA;AAC5C,gBAAA,MAAME,UAAU,GAAGC,eAAe,CAACl2B,GAAG,CAAC8T,GAAG,CAAE,CAAA;AAE5C;AACA;AACA,gBAAA,MAAMqiB,MAAM,GAAG,CAACF,UAAU,GAAG,GAAG,IAAIG,QAAQ,CAAA;gBAC5C,MAAMC,KAAK,GAAIF,MAAM,IAAIG,CAAC,GAAGC,QAAQ,CAAC,GAAID,CAAC,CAAA;AAE3C,gBAAA,MAAM93B,QAAQ,GAAGH,IAAI,CAACI,YAAY,CAAC,UAAU,CAAE,CAAA;AAC/C,gBAAA,MAAMwT,MAAM,GAAGzT,QAAQ,CAACmZ,SAAS,EAAE,CAAA;AACnC,gBAAA,MAAMrU,KAAK,GAAG,IAAIkZ,YAAY,CAAChe,QAAQ,CAACM,QAAQ,EAAE,GAAG,CAAC,CAAC,CAACoa,IAAI,CAACmd,KAAK,CAAC,CAAA;gBACnE,MAAM7gB,EAAE,GAAGtR,QAAQ,CAAC0T,cAAc,EAAE,CAACE,OAAO,CAAC,MAAM,CAAC,CAAC5U,QAAQ,CAACI,KAAK,CAAC,CAACuU,SAAS,CAAC5F,MAAM,CAAC,CAAA;AAEtF,gBAAA,IAAIukB,WAAW,CAAA;AACf,gBAAA,KAAK,MAAMlyB,QAAQ,IAAImyB,gBAAgB,EAAE;kBACxC,IAAInyB,QAAQ,CAACyH,MAAM,CAACgqB,WAAW,EAAEW,SAAS,CAAC,EAAE;AAC5CF,oBAAAA,WAAW,GAAGlyB,QAAQ,CAAA;AACvB,mBAAA;AACD,iBAAA;gBAEA,IAAI,CAACkyB,WAAW,EAAE;AACjB,kBAAA,MAAMj1B,MAAM,GAAG,CAACu0B,wBAAwB,EAAE,EAAE70B,QAAQ,EAAE,CAAC01B,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAA;AACvEH,kBAAAA,WAAW,GAAGT,WAAW,CAAChc,KAAK,EAAE,CAAC6c,OAAO,CAAmB,CAAA,eAAA,EAAAr1B,MAAQ,CAAA,CAAA,CAAC,CAAA;AAErE,kBAAA,IAAIs1B,gBAAgB,EAAE;AACrBL,oBAAAA,WAAW,CACT5gB,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAChCke,mBAAmB,CAAC+C,gBAAgB,CAAC,CACrC9C,uBAAuB,EAAG,CAC1B+C,YAAY,CAACrnB,gBAAW,CAACsnB,SAAS,CAACC,OAAO,CAAC,CAC3CC,YAAY,CAACxnB,gBAAW,CAACynB,SAAS,CAACF,OAAO,CAAC,CAAA;AAC9C,mBAAA;AACA,kBAAA,IAAIG,eAAe,EAAE;AACpBX,oBAAAA,WAAW,CACT1gB,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAC5BshB,kBAAkB,CAACD,eAAe,CAAC,CACnCE,sBAAsB,EAAG,CACzBP,YAAY,CAACrnB,gBAAW,CAACsnB,SAAS,CAACC,OAAO,CAAC,CAC3CC,YAAY,CAACxnB,gBAAW,CAACynB,SAAS,CAACF,OAAO,CAAC,CAAA;AAC9C,mBAAA;AACA,kBAAA,IAAIM,wBAAwB,EAAE;AAC7Bd,oBAAAA,WAAW,CACTrgB,iBAAiB,CAAC,CAAC,CAAC,CACpBF,kBAAkB,CAAC,CAAC,CAAC,CACrB8e,2BAA2B,CAACuC,wBAAwB,CAAC,CACrDtC,+BAA+B,EAAG,CAClC8B,YAAY,CAACrnB,gBAAW,CAACsnB,SAAS,CAACC,OAAO,CAAC,CAC3CC,YAAY,CAACxnB,gBAAW,CAACynB,SAAS,CAACF,OAAO,CAAC,CAAA;AAC9C,mBAAA;AAEAP,kBAAAA,gBAAgB,CAAC30B,IAAI,CAAC00B,WAAW,CAAC,CAAA;AACnC,iBAAA;gBAEAn4B,IAAI,CAAC8oB,WAAW,CAACqP,WAAW,CAAC,CAACliB,YAAY,CAAC,YAAY,EAAEkB,EAAE,CAAC,CAAA;AAC7D,eAAA;cAAC,OAAAlZ,OAAA,CAAAC,OAAA,CAEK2H,QAAQ,CAACkT,SAAS,CAACvF,KAAK,CAAC;AAAEtI,gBAAAA,aAAa,EAAE,CAACxF,iBAAY,CAAC4F,QAAQ,CAAA;eAAG,CAAC,CAAC,CAAA,CAAA/M,IAAA,CAAA,YAAA;AAE3EyJ,gBAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AAAC,eAAA,CAAA,CAAA;AAAA,aAAA;AAAA,YAAA,MAAA8N,KAAA,GAAA,YAAA;AAAA,cAAA,IApE/B0jB,wBAAwB,EAAA;AAAA,gBAAA,OAAAh7B,OAAA,CAAAC,OAAA,CACPU,wBAAU,CAACs6B,oBAAoB,CAACC,iBAAkB,EAAEjU,QAAQ,CAAC,CAAA3mB,CAAAA,IAAA,WAA3E66B,KAAK,EAAA;kBACXH,wBAAwB,CAACn6B,QAAQ,CAACs6B,KAAK,CAAC,CAACr6B,WAAW,CAACmmB,QAAQ,CAAC,CAAA;AAAC,iBAAA,CAAA,CAAA;AAAA,eAAA;AAAA,aAAA,EAAA,CAAA;AAAA,YAAA,OAAA3P,KAAA,IAAAA,KAAA,CAAAhX,IAAA,GAAAgX,KAAA,CAAAhX,IAAA,CAAA+W,MAAA,CAAAA,GAAAA,MAAA,CAAAC,KAAA,CAAA,CAAA;AAAA,WAAA;AAAA,UAAA,MAAA9B,MAAA,GAAA,YAAA;AAAA,YAAA,IAN5DqlB,eAAe,EAAA;AAAA,cAAA,OAAA76B,OAAA,CAAAC,OAAA,CACEU,wBAAU,CAACs6B,oBAAoB,CAACG,QAAS,EAAEnU,QAAQ,CAAC,CAAA3mB,CAAAA,IAAA,WAAlE66B,KAAK,EAAA;gBACXN,eAAe,CAACh6B,QAAQ,CAACs6B,KAAK,CAAC,CAACr6B,WAAW,CAACmmB,QAAQ,CAAC,CAAA;AAAC,eAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAA,CAAA;AAAA,UAAA,OAAAzR,MAAA,IAAAA,MAAA,CAAAlV,IAAA,GAAAkV,MAAA,CAAAlV,IAAA,CAAAs1B,MAAA,CAAAA,GAAAA,MAAA,CAAApgB,MAAA,CAAA,CAAA;AAAA,SAAA;AAxIvD,QAAA,MAAMqB,KAAK,GAAG,IAAIlT,GAAG,EAAa,CAAA;AAClC,QAAA,MAAMwN,SAAS,GAAG,IAAIxN,GAAG,EAAY,CAAA;AAErC;AAYA;AAuBA;AAQA;AAYA;AAgCA;AAoCA;QAzHA,KAAK,MAAMyK,IAAI,IAAInE,IAAI,CAACkE,UAAU,EAAE,EAAE;UACrC,KAAK,MAAMpM,IAAI,IAAIqM,IAAI,CAACC,cAAc,EAAE,EAAE;AACzC,YAAA,MAAMrG,QAAQ,GAAGjG,IAAI,CAACkG,WAAW,EAAE,CAAA;YACnC,IAAI,CAACD,QAAQ,IAAI,CAAC,CAACjG,IAAI,CAACI,YAAY,CAAC,YAAY,CAAC,EAAE,SAAA;AAEpD0U,YAAAA,KAAK,CAACtT,GAAG,CAACxB,IAAI,CAAC,CAAA;AACfoP,YAAAA,SAAS,CAAC5N,GAAG,CAACyE,QAAQ,CAAC,CAAA;AACxB,WAAA;AACD,SAAA;AAIA,QAAA,MAAMqzB,YAAY,GAAG,IAAI13B,GAAG,EAAU,CAAA;AACtC,QAAA,MAAM+1B,cAAc,GAAG,IAAIv2B,GAAG,EAAoB,CAAA;AAClD,QAAA,MAAMm4B,aAAa,GAAwC;AAC1DC,UAAAA,SAAS,EAAE,IAAI53B,GAAG,EAAU;AAC5By3B,UAAAA,QAAQ,EAAE,IAAIz3B,GAAG,EAAU;UAC3Bu3B,iBAAiB,EAAE,IAAIv3B,GAAG,EAAU;SACpC,CAAA;AAED,QAAA,KAAK,MAAMqE,QAAQ,IAAImJ,SAAS,EAAE;AACjC,UAAA,MAAMoqB,SAAS,GAAGC,UAAU,CAACxzB,QAAQ,CAACuR,kBAAkB,EAAE,CAAC5S,KAAK,EAAU,CAAC,CAAA;AAC3E,UAAA,MAAMy0B,QAAQ,GAAGI,UAAU,CAAC,CAAC,GAAGxzB,QAAQ,CAAC0R,iBAAiB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA;UACjE,MAAM8e,SAAS,GAAGiD,WAAW,CAACzzB,QAAQ,CAAC4R,kBAAkB,EAAE,CAAC,CAAA;UAC5D,MAAM8hB,QAAQ,GAAGD,WAAW,CAACzzB,QAAQ,CAAC8R,iBAAiB,EAAE,CAAC,CAAA;UAC1D,MAAMtC,GAAG,GAAG,CAAA,UAAA,EAAa+jB,SAAS,CAAA,UAAA,EAAaH,QAAQ,CAAsBM,mBAAAA,EAAAA,QAAQ,CAAGlD,EAAAA,SAAS,CAAE,CAAA,CAAA;AACnG8C,UAAAA,aAAa,CAACC,SAAS,CAACh4B,GAAG,CAACg4B,SAAS,CAAC,CAAA;AACtCD,UAAAA,aAAa,CAACF,QAAQ,CAAC73B,GAAG,CAAC63B,QAAQ,CAAC,CAAA;UACpCE,aAAa,CAACJ,iBAAiB,CAAC33B,GAAG,CAACm4B,QAAQ,GAAG,GAAG,GAAGlD,SAAS,CAAC,CAAA;AAC/D6C,UAAAA,YAAY,CAAC93B,GAAG,CAACiU,GAAG,CAAC,CAAA;AACrBkiB,UAAAA,cAAc,CAAC91B,GAAG,CAACoE,QAAQ,EAAEwP,GAAG,CAAC,CAAA;AAClC,SAAA;AAIA,QAAA,MAAMsiB,QAAQ,GAAGuB,YAAY,CAACj4B,IAAI,CAAA;QAClC,IAAI02B,QAAQ,GAAGjvB,GAAG,EAAE;UACnBd,MAAM,CAACU,KAAK,CAAC,CAAA,EAAGjB,MAAgB,CAAAqB,SAAAA,EAAAA,GAA0C,uCAAA,CAAC,CAAA;AAC3E,UAAA,OAAA;AACD,SAAA;AAIA,QAAA,MAAMmvB,CAAC,GAAG2B,cAAc,CAAC7B,QAAQ,GAAGT,SAAS,CAAC,CAAA;AAC9C,QAAA,MAAMuC,CAAC,GAAGD,cAAc,CAACtC,SAAS,CAAC,CAAA;AACnC,QAAA,MAAMY,QAAQ,GAAGD,CAAC,GAAGF,QAAQ,GAAGT,SAAS,CAAA;AAEzC,QAAA,MAAM4B,oBAAoB,GAAuD;AAChFM,UAAAA,SAAS,EAAE,IAAI;AACfH,UAAAA,QAAQ,EAAE,IAAI;AACdF,UAAAA,iBAAiB,EAAE,IAAA;SACnB,CAAA;QAGD,MAAMd,SAAS,GAAG,IAAIz2B,GAAG,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAA;QAC7C,MAAM0N,IAAI,GAAG,YAAA;AAAA,UAAA,OAAwB,GAAA1K,KAAA,CAAAk1B,IAAA,CAAAC,SAAA,CAAMxxB,CAAAA,OAAO,CAAElD,IAAI,IAAKgzB,SAAS,CAAC72B,GAAG,CAAC6D,IAAI,CAAC,CAAC,CAAA;AAAA,SAAA,CAAA;QAEjF,IAAImzB,gBAAgB,GAAmB,IAAI,CAAA;QAC3C,IAAIM,eAAe,GAAmB,IAAI,CAAA;QAC1C,IAAIG,wBAAwB,GAAmB,IAAI,CAAA;AAEnD,QAAA,IAAIM,aAAa,CAACC,SAAS,CAACn4B,IAAI,IAAIyH,GAAG,EAAE;UACxC,MAAM3J,IAAI,GAAG,kBAAkB,CAAA;AAC/Bq5B,UAAAA,gBAAgB,GAAG3yB,QAAQ,CAACowB,aAAa,CAAC92B,IAAI,CAAC,CAAC66B,MAAM,CAAC,CAAG76B,EAAAA,IAAI,MAAM,CAAC,CAAA;UACrE+5B,oBAAoB,CAACM,SAAS,GAAGS,2BAAO,CAAC,IAAI9d,UAAU,CAAC8b,CAAC,GAAG4B,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC5B,CAAC,EAAE4B,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;AAC9EvqB,UAAAA,IAAI,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,sBAAsB,CAAC,CAAA;AACpE,SAAA;AACA,QAAA,IAAIiqB,aAAa,CAACF,QAAQ,CAACh4B,IAAI,IAAIyH,GAAG,EAAE;UACvC,MAAM3J,IAAI,GAAG,iBAAiB,CAAA;AAC9B25B,UAAAA,eAAe,GAAGjzB,QAAQ,CAACowB,aAAa,CAAC92B,IAAI,CAAC,CAAC66B,MAAM,CAAC,CAAG76B,EAAAA,IAAI,MAAM,CAAC,CAAA;UACpE+5B,oBAAoB,CAACG,QAAQ,GAAGY,2BAAO,CAAC,IAAI9d,UAAU,CAAC8b,CAAC,GAAG4B,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC5B,CAAC,EAAE4B,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;AAC7EvqB,UAAAA,IAAI,CAAC,gBAAgB,EAAE,iBAAiB,EAAE,qBAAqB,CAAC,CAAA;AACjE,SAAA;AACA,QAAA,IAAIiqB,aAAa,CAACJ,iBAAiB,CAAC93B,IAAI,IAAIyH,GAAG,EAAE;UAChD,MAAM3J,IAAI,GAAG,0BAA0B,CAAA;AACvC85B,UAAAA,wBAAwB,GAAGpzB,QAAQ,CAACowB,aAAa,CAAC92B,IAAI,CAAC,CAAC66B,MAAM,CAAC,CAAG76B,EAAAA,IAAI,MAAM,CAAC,CAAA;UAC7E+5B,oBAAoB,CAACC,iBAAiB,GAAGc,2BAAO,CAAC,IAAI9d,UAAU,CAAC8b,CAAC,GAAG4B,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC5B,CAAC,EAAE4B,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;UACtFvqB,IAAI,CAAC,gBAAgB,EAAE,iBAAiB,EAAE,0BAA0B,EAAE,8BAA8B,CAAC,CAAA;AACtG,SAAA;AAEA,QAAA,IAAI,EAAEkpB,gBAAgB,IAAIM,eAAe,IAAIG,wBAAwB,CAAC,EAAE;UACvEjxB,MAAM,CAACU,KAAK,CAAC,CAAA,EAAGjB,MAAoC,CAAAqB,6BAAAA,EAAAA,GAA6B,0BAAA,CAAC,CAAA;AAClF,UAAA,OAAA;AACD,SAAA;AAIA,QAAA,MAAMoxB,WAAW,GAAG,IAAIt4B,GAAG,EAAU,CAAA;AACrC,QAAA,MAAMi2B,eAAe,GAAG,IAAIz2B,GAAG,EAAkB,CAAA;QACjD,MAAMg3B,gBAAgB,GAAe,EAAE,CAAA;QAEvC,IAAI+B,SAAS,GAAG,CAAC,CAAA;AACjB,QAAA,KAAK,MAAMl0B,QAAQ,IAAImJ,SAAS,EAAE;AACjC,UAAA,MAAMqG,GAAG,GAAGkiB,cAAc,CAACh2B,GAAG,CAACsE,QAAQ,CAAE,CAAA;AACzC,UAAA,IAAIi0B,WAAW,CAAC54B,GAAG,CAACmU,GAAG,CAAC,EAAE,SAAA;UAE1B,MAAMhN,KAAK,GAAG0xB,SAAS,EAAE,CAAA;UAEzB,IAAIjB,oBAAoB,CAACM,SAAS,EAAE;AACnC,YAAA,MAAMh7B,MAAM,GAAG06B,oBAAoB,CAACM,SAAS,CAAA;YAC7C,MAAMA,SAAS,GAAG,CAAC,GAAGvzB,QAAQ,CAACuR,kBAAkB,EAAE,CAAS,CAAA;AAC5DhF,YAAAA,eAAU,CAAC4nB,mBAAmB,CAACZ,SAAS,EAAEA,SAAS,CAAC,CAAA;YACpDa,UAAU,CAAC77B,MAAM,EAAEiK,KAAK,EAAE+wB,SAAS,EAAElC,SAAS,CAAC,CAAA;AAChD,WAAA;UACA,IAAI4B,oBAAoB,CAACG,QAAQ,EAAE;AAClC,YAAA,MAAM76B,MAAM,GAAG06B,oBAAoB,CAACG,QAAQ,CAAA;YAC5C,MAAMA,QAAQ,GAAG,CAAC,GAAGpzB,QAAQ,CAAC0R,iBAAiB,EAAE,EAAE,CAAC,CAAS,CAAA;AAC7DnF,YAAAA,eAAU,CAAC4nB,mBAAmB,CAACf,QAAQ,EAAEA,QAAQ,CAAC,CAAA;YAClDgB,UAAU,CAAC77B,MAAM,EAAEiK,KAAK,EAAE4wB,QAAQ,EAAE/B,SAAS,CAAC,CAAA;AAC/C,WAAA;UACA,IAAI4B,oBAAoB,CAACC,iBAAiB,EAAE;AAC3C,YAAA,MAAM36B,MAAM,GAAG06B,oBAAoB,CAACC,iBAAiB,CAAA;AACrD,YAAA,MAAMQ,QAAQ,GAAG1zB,QAAQ,CAAC8R,iBAAiB,EAAE,CAAA;AAC7C,YAAA,MAAM0e,SAAS,GAAGxwB,QAAQ,CAAC4R,kBAAkB,EAAE,CAAA;AAC/CwiB,YAAAA,UAAU,CAAC77B,MAAM,EAAEiK,KAAK,EAAE,CAAC,CAAC,EAAEguB,SAAS,EAAEkD,QAAQ,EAAE,CAAC,CAAC,EAAErC,SAAS,CAAC,CAAA;AAClE,WAAA;AAEA4C,UAAAA,WAAW,CAAC14B,GAAG,CAACiU,GAAG,CAAC,CAAA;AACpBoiB,UAAAA,eAAe,CAACh2B,GAAG,CAAC4T,GAAG,EAAEhN,KAAK,CAAC,CAAA;AAChC,SAAA;QAIA,MAAMyc,QAAQ,GAAG,WAAW,CAAA;AAAC,QAAA,MAAAoV,MAAA,GAAA,YAAA;AAAA,UAAA,IAEzB9B,gBAAgB,EAAA;AAAA,YAAA,OAAAv6B,OAAA,CAAAC,OAAA,CACCU,wBAAU,CAACs6B,oBAAoB,CAACM,SAAU,EAAEtU,QAAQ,CAAC,CAAA3mB,CAAAA,IAAA,WAAnE66B,KAAK,EAAA;cACXZ,gBAAgB,CAAC15B,QAAQ,CAACs6B,KAAK,CAAC,CAACr6B,WAAW,CAACmmB,QAAQ,CAAC,CAAA;AAAC,aAAA,CAAA,CAAA;AAAA,WAAA;AAAA,SAAA,EAAA,CAAA;AAAA,QAAA,OAAAoV,MAAA,IAAAA,MAAA,CAAA/7B,IAAA,GAAA+7B,MAAA,CAAA/7B,IAAA,CAAAi5B,MAAA,CAAAA,GAAAA,MAAA,CAAA8C,MAAA,CAAA,CAAA;AAAA,OAAA,CAAA,CAAA;AA2EzD,KAAC,QAAAt7B,CAAA,EAAA;AAAA,MAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,KAAA;GAAC,CAAA,CAAA;AACH,CAAA;AAEA;AACA,SAAS06B,WAAWA,CAACp6B,KAAa,EAAA;AACjC,EAAA,MAAMi7B,GAAG,GAAGn4B,IAAI,CAAC8a,KAAK,CAAC5d,KAAK,GAAG,GAAG,CAAC,CAACsD,QAAQ,CAAC,EAAE,CAAC,CAAA;EAChD,OAAO23B,GAAG,CAACr2B,MAAM,KAAK,CAAC,GAAG,GAAG,GAAGq2B,GAAG,GAAGA,GAAG,CAAA;AAC1C,CAAA;AAEA;AACA,SAASd,UAAUA,CAACn6B,KAAW,EAAA;AAC9BkT,EAAAA,eAAU,CAAC4nB,mBAAmB,CAAC96B,KAAK,EAAEA,KAAK,CAAC,CAAA;EAC5C,OAAOA,KAAK,CAACqH,GAAG,CAAC+yB,WAAW,CAAC,CAAC3yB,IAAI,CAAC,EAAE,CAAC,CAAA;AACvC,CAAA;AAEA;AACA,SAAS6yB,cAAcA,CAACt6B,KAAa,EAAA;EACpC,OAAO8C,IAAI,CAACI,GAAG,CAAC,CAAC,EAAEJ,IAAI,CAACo4B,IAAI,CAACp4B,IAAI,CAACE,GAAG,CAAChD,KAAK,CAAC,GAAG8C,IAAI,CAACq4B,GAAG,CAAC,CAAC,CAAA;AAC1D,CAAA;AAEA;AACA,SAASJ,UAAUA,CAAC77B,MAA2B,EAAEiK,KAAa,EAAEnJ,KAAW,EAAEg4B,SAAiB,EAAA;EAC7F,KAAK,IAAI74B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG64B,SAAS,EAAE74B,CAAC,EAAE,EAAE;IACnC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG24B,SAAS,EAAE34B,CAAC,EAAE,EAAE;AACnCH,MAAAA,MAAM,CAACqD,GAAG,CAAC4G,KAAK,GAAG6uB,SAAS,GAAG74B,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEW,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAA;AACvDd,MAAAA,MAAM,CAACqD,GAAG,CAAC4G,KAAK,GAAG6uB,SAAS,GAAG74B,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEW,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAA;AACvDd,MAAAA,MAAM,CAACqD,GAAG,CAAC4G,KAAK,GAAG6uB,SAAS,GAAG74B,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEW,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAA;AACvDd,MAAAA,MAAM,CAACqD,GAAG,CAAC4G,KAAK,GAAG6uB,SAAS,GAAG74B,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEW,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAA;AACxD,KAAA;AACD,GAAA;AACD;;AClUA,MAAMmI,MAAI,GAAG,WAAW,CAAA;AAOxB,MAAMizB,kBAAkB,GAA+B;AACtD7X,EAAAA,UAAU,EAAE,IAAI;AAChB1W,EAAAA,MAAM,EAAE,IAAA;CACR,CAAA;AAED;;;;;;;;;;;;;;;;AAgBG;AACa,SAAAwuB,SAASA,CAAC9yB,QAAA,EAA+C;AAAA,EAAA,IAA/CA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,QAAA,GAA6B6yB,kBAAkB,CAAA;AAAA,GAAA;AACxE,EAAA,MAAM5yB,OAAO,GAAG;AAAE,IAAA,GAAG4yB,kBAAkB;IAAE,GAAG7yB,QAAAA;GAAwC,CAAA;AAEpF,EAAA,OAAO3I,eAAe,CAACuI,MAAI,EAAA,UAASM,GAAa,EAAA;IAAA,IAAmB;AACnE,MAAA,MAAMC,MAAM,GAAGD,GAAG,CAACE,SAAS,EAAE,CAAA;AAE9B,MAAA,IAAIH,OAAO,CAACqE,MAAM,KAAK,KAAK,EAAEyuB,eAAe,CAAC7yB,GAAG,EAAEC,MAAM,EAAEF,OAAO,CAAC,CAAA;AACnE,MAAA,IAAIA,OAAO,CAAC+a,UAAU,KAAK,KAAK,EAAEgY,mBAAmB,CAAC9yB,GAAG,EAAEC,MAAM,EAAEF,OAAO,CAAC,CAAA;MAE3E,IAAI,CAACA,OAAO,CAACqE,MAAM,IAAI,CAACrE,OAAO,CAAC+a,UAAU,EAAE;AAC3C7a,QAAAA,MAAM,CAACgQ,IAAI,EAAIvQ,EAAAA,MAAI,sDAAsD,CAAC,CAAA;AAC3E,OAAA;MAAC,OAAAxJ,OAAA,CAAAC,OAAA,CAEK6J,GAAG,CAACgR,SAAS,CAACvF,KAAK,CAAC;AAAEtI,QAAAA,aAAa,EAAE,CAACxF,iBAAY,CAACyN,MAAM,CAAA;OAAG,CAAC,CAAC,CAAA,CAAA5U,IAAA,CAAA,YAAA;AAEpEyJ,QAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AAAC,OAAA,CAAA,CAAA;AACpC,KAAC,QAAAzI,CAAA,EAAA;AAAA,MAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,KAAA;GAAC,CAAA,CAAA;AACH,CAAA;AAEA,SAAS47B,eAAeA,CAAC7yB,GAAa,EAAEC,MAAe,EAAEF,OAAyB,EAAA;EACjF,MAAMgzB,YAAY,GAAG,IAAIl5B,GAAG,CAC3BmG,GAAG,CACD3B,OAAO,EAAE,CACTuN,WAAW,EAAE,CACbhN,GAAG,CAAE3D,CAAC,IAAKA,CAAC,CAAC0P,MAAM,EAAE,CAAC,CACxB,CAAA;AAED3K,EAAAA,GAAG,CAAC3B,OAAO,EAAE,CACXgG,UAAU,EAAE,CACZ7D,OAAO,CAAC,CAAC8D,IAAI,EAAE0uB,SAAS,KAAI;IAC5B,IAAIp3B,KAAK,CAACq3B,OAAO,CAAClzB,OAAO,CAACqE,MAAM,CAAC,IAAI,CAACrE,OAAO,CAACqE,MAAM,CAACV,QAAQ,CAACY,IAAI,CAACmC,OAAO,EAAE,CAAC,EAAE;AAC9ExG,MAAAA,MAAM,CAACU,KAAK,CAAC,CAAA,EAAGjB,MAAwB,CAAAszB,iBAAAA,EAAAA,SAAwB,CAAA1uB,YAAAA,EAAAA,IAAI,CAACmC,OAAO,EAAE,IAAI,CAAC,CAAA;AACnF,MAAA,OAAA;AACD,KAAA;AAEAxG,IAAAA,MAAM,CAACU,KAAK,CAAC,CAAA,EAAGjB,MAAI,CAAA,4BAAA,EAA+B4E,IAAI,CAACmC,OAAO,EAAM,CAAA,EAAA,CAAA,CAAC,CAAA;IAEtE,MAAMoF,MAAM,GAAG7L,GAAG,CAChBkzB,YAAY,CAAC5uB,IAAI,CAACmC,OAAO,EAAE,CAAC,CAC5BwrB,MAAM,CAACkB,eAAe,CAAC7uB,IAAI,CAACmC,OAAO,EAAE,IAAI,MAAM,EAAEssB,YAAY,CAAC,CAAC,CAAA;IAEjEzuB,IAAI,CAACC,cAAc,EAAE,CAAC/D,OAAO,CAAEgE,SAAS,IAAI;AAC3C,MAAA,MAAMtM,OAAO,GAAGsM,SAAS,CAACrM,UAAU,EAAE,CAAA;AACtC,MAAA,IAAID,OAAO,EAAEA,OAAO,CAACuZ,SAAS,CAAC5F,MAAM,CAAC,CAAA;AACtCrH,MAAAA,SAAS,CAAC/I,cAAc,EAAE,CAAC+E,OAAO,CAAEhF,SAAS,IAAKA,SAAS,CAACiW,SAAS,CAAC5F,MAAM,CAAC,CAAC,CAAA;MAC9ErH,SAAS,CAAC7I,WAAW,EAAE,CAAC6E,OAAO,CAAE4yB,UAAU,IAAI;AAC9CA,QAAAA,UAAU,CAAC33B,cAAc,EAAE,CAAC+E,OAAO,CAAEhF,SAAS,IAAKA,SAAS,CAACiW,SAAS,CAAC5F,MAAM,CAAC,CAAC,CAAA;AAChF,OAAC,CAAC,CAAA;AACH,KAAC,CAAC,CAAA;AACH,GAAC,CAAC,CAAA;AACJ,CAAA;AAEA,SAASinB,mBAAmBA,CAAC9yB,GAAa,EAAEC,MAAe,EAAEF,OAAyB,EAAA;EACrF,MAAMgzB,YAAY,GAAG,IAAIl5B,GAAG,CAC3BmG,GAAG,CACD3B,OAAO,EAAE,CACTuN,WAAW,EAAE,CACbhN,GAAG,CAAE3D,CAAC,IAAKA,CAAC,CAAC0P,MAAM,EAAE,CAAC,CACxB,CAAA;AAED3K,EAAAA,GAAG,CAAC3B,OAAO,EAAE,CACXgC,cAAc,EAAE,CAChBG,OAAO,CAAC,CAAC0M,IAAI,EAAEmmB,SAAS,KAAI;IAC5B,IAAIz3B,KAAK,CAACq3B,OAAO,CAAClzB,OAAO,CAAC+a,UAAU,CAAC,IAAI,CAAC/a,OAAO,CAAC+a,UAAU,CAACpX,QAAQ,CAACwJ,IAAI,CAACzG,OAAO,EAAE,CAAC,EAAE;AACtFxG,MAAAA,MAAM,CAACU,KAAK,CAAC,CAAA,EAAGjB,MAA6B,CAAA2zB,sBAAAA,EAAAA,SAAwB,CAAAnmB,YAAAA,EAAAA,IAAI,CAACzG,OAAO,EAAE,IAAI,CAAC,CAAA;AACxF,MAAA,OAAA;AACD,KAAA;AAEAxG,IAAAA,MAAM,CAACU,KAAK,CAAC,CAAA,EAAGjB,MAAI,CAAA,iCAAA,EAAoCwN,IAAI,CAACzG,OAAO,EAAM,CAAA,EAAA,CAAA,CAAC,CAAA;IAE3E,MAAMoF,MAAM,GAAG7L,GAAG,CAChBkzB,YAAY,CAAChmB,IAAI,CAACzG,OAAO,EAAE,CAAC,CAC5BwrB,MAAM,CAACkB,eAAe,CAACjmB,IAAI,CAACzG,OAAO,EAAE,IAAI,WAAW,EAAEssB,YAAY,CAAC,CAAC,CAAA;IAEtE7lB,IAAI,CAACrI,YAAY,EAAE,CAACrE,OAAO,CAAEoE,OAAO,IAAI;AACvC,MAAA,MAAMmB,KAAK,GAAGnB,OAAO,CAACE,QAAQ,EAAE,CAAA;AAChC,MAAA,MAAMkB,MAAM,GAAGpB,OAAO,CAACG,SAAS,EAAE,CAAA;AAClC,MAAA,IAAIgB,KAAK,EAAEA,KAAK,CAAC0L,SAAS,CAAC5F,MAAM,CAAC,CAAA;AAClC,MAAA,IAAI7F,MAAM,EAAEA,MAAM,CAACyL,SAAS,CAAC5F,MAAM,CAAC,CAAA;AACrC,KAAC,CAAC,CAAA;AACH,GAAC,CAAC,CAAA;AACJ,CAAA;AAEA,SAASsnB,eAAeA,CAACG,QAAgB,EAAEC,QAAqB,EAAA;AAC/D,EAAA,IAAIrW,GAAG,GAAM,CAAAoW,EAAAA,SAAc,IAAA,CAAA,CAAA;EAC3B,IAAI58B,CAAC,GAAG,CAAC,CAAA;AACT,EAAA,OAAO68B,QAAQ,CAACh6B,GAAG,CAAC2jB,GAAG,CAAC,EAAEA,GAAG,GAAM,CAAAoW,EAAAA,SAAY58B,CAAAA,EAAAA,CAAC,GAAQ,IAAA,CAAA,CAAA;AACxD,EAAA,OAAOwmB,GAAG,CAAA;AACX;;ACzHA,IAAI,qBAAqB,CAAC;AAC1B;AACA,CAAC,UAAU,qBAAqB,EAAE;AAClC,EAAE,qBAAqB,CAAC,qBAAqB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;AACpE,EAAE,qBAAqB,CAAC,qBAAqB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;AACpE,EAAE,qBAAqB,CAAC,qBAAqB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;AACtE,CAAC,EAAE,qBAAqB,KAAK,qBAAqB,GAAG,EAAE,CAAC,CAAC,CAAC;AAO1D,MAAM,OAAO,GAAG,QAAQ,CAAC;AACzB;AACA;AACA;AACA,SAAS,aAAa,CAAC,KAAK,EAAE,MAAM,EAAE,aAAa,EAAE,SAAS,GAAG,IAAI,EAAE;AACvE,EAAE,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;AACnD,EAAE,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC7C,EAAE,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/C,EAAE,MAAM,SAAS,GAAG,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACnD,EAAE,MAAM,SAAS,GAAG,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACnD,EAAE,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AACrC,EAAE,IAAI,UAAU,GAAG,CAAC,CAAC;AACrB;AACA,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,EAAE,CAAC,EAAE;AACtC,IAAI,MAAM,QAAQ,GAAG,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;AAC3C,IAAI,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC1B,IAAI,MAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAClC,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,GAAG,QAAQ,KAAK,QAAQ,GAAG,QAAQ,CAAC,CAAC;AACxD,IAAI,IAAI,IAAI,GAAG,KAAK,CAAC;AACrB;AACA,IAAI,IAAI,IAAI,KAAK,QAAQ,KAAK,CAAC,KAAK,CAAC,IAAI,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;AAC7D,MAAM,UAAU,CAAC,MAAM,EAAE,UAAU,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;AACpD,MAAM,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;AACnC,MAAM,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;AAC3C;AACA,MAAM,IAAI,aAAa,KAAK,OAAO,EAAE;AACrC;AACA,QAAQ,MAAM,MAAM,GAAG,KAAK,CAAC,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;AAC3D,QAAQ,MAAM,KAAK,GAAG,QAAQ,CAAC,SAAS,EAAE,KAAK,CAAC,GAAG,QAAQ,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AAC9E,QAAQ,IAAI,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,CAAC,IAAI,KAAK,GAAG,MAAM,CAAC,OAAO,IAAI,IAAI,CAAC,EAAE,CAAC;AAClF,OAAO,MAAM,IAAI,aAAa,KAAK,MAAM,EAAE;AAC3C;AACA,QAAQ,MAAM,MAAM,GAAG,KAAK,CAAC,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;AAC3D,QAAQ,IAAI,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;AAC7C,OAAO,MAAM,IAAI,aAAa,KAAK,MAAM,EAAE;AAC3C;AACA,QAAQ,IAAI,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AAC9D,OAAO;AACP,KAAK;AACL;AACA;AACA,IAAI,IAAI,IAAI,EAAE;AACd,MAAM,IAAI,CAAC,KAAK,UAAU,EAAE;AAC5B,QAAQ,KAAK,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACrC,QAAQ,UAAU,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;AACnE,OAAO;AACP;AACA,MAAM,UAAU,EAAE,CAAC;AACnB,KAAK;AACL,GAAG;AACH;AACA;AACA,EAAE,IAAI,SAAS,GAAG,CAAC,EAAE;AACrB,IAAI,KAAK,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;AACzC,IAAI,UAAU,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,CAAC,MAAM,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;AACvE,IAAI,UAAU,EAAE,CAAC;AACjB,GAAG;AACH;AACA,EAAE,OAAO,UAAU,CAAC;AACpB,CAAC;AACD;AACA;AACA,SAAS,UAAU,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;AAC1C,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,WAAW,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;AACrE,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,GAAG,WAAW,GAAG,CAAC,CAAC,CAAC;AAC/C,GAAG;AACH;AACA,EAAE,OAAO,MAAM,CAAC;AAChB,CAAC;AACD;AACA,SAAS,UAAU,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;AACzC,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,WAAW,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;AACpE,IAAI,KAAK,CAAC,KAAK,GAAG,WAAW,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC9C,GAAG;AACH,CAAC;AACD;AACA,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,GAAG,CAAC,EAAE;AACjC,EAAE,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;AAC7B,IAAI,OAAO,KAAK,CAAC;AACjB,GAAG;AACH;AACA,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS,EAAE;AAC3C,MAAM,OAAO,KAAK,CAAC;AACnB,KAAK;AACL,GAAG;AACH;AACA,EAAE,OAAO,IAAI,CAAC;AACd,CAAC;AACD;AACA,SAAS,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE;AACzB,EAAE,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC/B,CAAC;AACD;AACA,SAAS,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;AAC7B,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAClE;AACA,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AACD;AACA;AACA,SAAS,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;AAC7B;AACA;AACA,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACf,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACf,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACf,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACf,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACf,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACf,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,EAAE,IAAI,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC;AAC1C;AACA,EAAE,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AAChD;AACA,EAAE,IAAI,KAAK,GAAG,GAAG,EAAE;AACnB,IAAI,KAAK,GAAG,CAAC,KAAK,CAAC;AACnB,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC;AACb,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC;AACb,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC;AACb,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC;AACb,GAAG;AACH;AACA;AACA,EAAE,IAAI,GAAG,GAAG,KAAK,GAAG,OAAO,EAAE;AAC7B;AACA,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC7B,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAC5B,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,IAAI,KAAK,CAAC,GAAG,KAAK,CAAC;AACjD,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC;AACzC,GAAG,MAAM;AACT;AACA;AACA,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACrB,IAAI,MAAM,GAAG,CAAC,CAAC;AACf,GAAG;AACH;AACA;AACA,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,EAAE,GAAG,MAAM,GAAG,EAAE,CAAC;AACrC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,EAAE,GAAG,MAAM,GAAG,EAAE,CAAC;AACrC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,EAAE,GAAG,MAAM,GAAG,EAAE,CAAC;AACrC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,EAAE,GAAG,MAAM,GAAG,EAAE,CAAC;AACrC,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AACD;AACA,SAAS,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE;AACxB,EAAE,MAAM,UAAU,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/B,EAAE,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,UAAU,GAAG,UAAU,GAAG,CAAC,CAAC,CAAC;AACpD,CAAC;AACD;AACA,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE;AACnB,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/D;;ACrJA,MAAMxd,MAAI,GAAG,UAAU,CAAA;AAEvB,MAAM8zB,WAAW,GAAG,IAAIpd,YAAY,CAAC,CAAC,CAAC,CAAA;AAQvC,MAAMqd,iBAAiB,GAA8B;AACpD5P,EAAAA,KAAK,EAAE3tB,OAAO,CAACC,OAAO,EAAE;AACxBu9B,EAAAA,QAAQ,EAAEC,aAAa;AACvBjjB,EAAAA,SAAS,EAAE,IAAA;CACX,CAAA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BG;AACa,SAAAgjB,QAAQA,CAAC5zB,QAAA,EAA6C;AAAA,EAAA,IAA7CA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,QAAA,GAA4B2zB,iBAAiB,CAAA;AAAA,GAAA;AACrE,EAAA,MAAM1zB,OAAO,GAAG;AAAE,IAAA,GAAG0zB,iBAAiB;IAAE,GAAG3zB,QAAAA;GAAuC,CAAA;AAElF,EAAA,OAAO3I,eAAe,CAACuI,MAAI,EAAS5B,UAAAA,QAAkB,EAAErG,OAA0B,EAAA;IAAA,IAAmB;AACpG,MAAA,MAAMm8B,gBAAgB,GAAG,IAAI/5B,GAAG,EAAY,CAAA;AAC5C,MAAA,MAAMg6B,gBAAgB,GAAG/1B,QAAQ,CAACO,OAAO,EAAE,CAAC8H,aAAa,EAAE,CAAChK,MAAM,CAAA;AAClE,MAAA,MAAM8D,MAAM,GAAGnC,QAAQ,CAACoC,SAAS,EAAE,CAAA;AAEnC,MAAA,MAAM2jB,KAAK,GAAG9jB,OAAO,CAAC8jB,KAAK,CAAA;AAC3B,MAAA,MAAM6P,QAAQ,GAAG3zB,OAAO,CAAC2zB,QAAgC,CAAA;AAAC,MAAA,OAAAx9B,OAAA,CAAAC,OAAA,CAEpD0tB,KAAK,EAAArtB,IAAA,CAAA,YAAA;AAAA,QAAA,SAAA+W,MAAA,GAAA;AAoFXtN,UAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AAAC,SAAA;AAlFnC,QAAA,KAAK,MAAMiF,SAAS,IAAI7G,QAAQ,CAACO,OAAO,EAAE,CAACgC,cAAc,EAAE,EAAE;AAC5D,UAAA,MAAMyzB,kBAAkB,GAAG,IAAIz6B,GAAG,EAAqD,CAAA;UACvF,KAAK,MAAM8T,OAAO,IAAIxI,SAAS,CAACyI,YAAY,EAAE,EAAE;AAC/C0mB,YAAAA,kBAAkB,CAACh6B,GAAG,CAACqT,OAAO,CAAC4mB,UAAU,EAAG,EAAE5mB,OAAO,CAACuN,aAAa,EAAG,CAAC,CAAA;AACxE,WAAA;UAEA,KAAK,MAAM9V,OAAO,IAAID,SAAS,CAACE,YAAY,EAAE,EAAE;AAC/C,YAAA,MAAMmvB,oBAAoB,GAAGpvB,OAAO,CAACqvB,gBAAgB,EAAE,CAAA;AAEvD,YAAA,IAAID,oBAAoB,KAAK,MAAM,IAAIA,oBAAoB,KAAK,QAAQ,EAAE;AACzE,cAAA,MAAMjuB,KAAK,GAAGnB,OAAO,CAACE,QAAQ,EAAG,CAAA;AACjC,cAAA,MAAMkB,MAAM,GAAGpB,OAAO,CAACG,SAAS,EAAG,CAAA;AAEnC6uB,cAAAA,gBAAgB,CAACn6B,GAAG,CAACsM,KAAK,CAAC,CAAA;AAC3B6tB,cAAAA,gBAAgB,CAACn6B,GAAG,CAACuM,MAAM,CAAC,CAAA;AAE5B;cACA,MAAMkuB,QAAQ,GAAGC,cAAc,CAC9BpuB,KAAK,CAACpJ,QAAQ,EAAG,EACjBoJ,KAAK,CAAChH,gBAAgB,EAAE,EACxBgH,KAAK,CAACZ,aAAa,EAAE,CACrB,CAAA;cACD,MAAMivB,SAAS,GAAGD,cAAc,CAC/BnuB,MAAM,CAACrJ,QAAQ,EAAG,EAClBqJ,MAAM,CAACjH,gBAAgB,EAAE,EACzBiH,MAAM,CAACb,aAAa,EAAE,CACtB,CAAA;cAED,MAAM5I,WAAW,GAAG63B,SAAS,CAACj4B,MAAM,GAAG+3B,QAAQ,CAAC/3B,MAAM,CAAA;AACtD,cAAA,MAAMM,QAAQ,GAAGy3B,QAAQ,CAAC/3B,MAAM,CAAA;AAChC,cAAA,IAAIG,QAAgB,CAAA;cAEpB,IAAI03B,oBAAoB,KAAK,MAAM,EAAE;AACpC13B,gBAAAA,QAAQ,GAAGo3B,QAAQ,CAACQ,QAAQ,EAAEE,SAAS,EAAE,MAAM,EAAEr0B,OAAO,CAAC2Q,SAAS,CAAC,CAAA;eACnE,MAAM,IAAIojB,kBAAkB,CAACl6B,GAAG,CAACgL,OAAO,CAAC,KAAK,UAAU,EAAE;AAC1DtI,gBAAAA,QAAQ,GAAGo3B,QAAQ,CAACQ,QAAQ,EAAEE,SAAS,EAAE,OAAO,EAAEr0B,OAAO,CAAC2Q,SAAS,CAAC,CAAA;AACrE,eAAC,MAAM;AACNpU,gBAAAA,QAAQ,GAAGo3B,QAAQ,CAACQ,QAAQ,EAAEE,SAAS,EAAE,MAAM,EAAEr0B,OAAO,CAAC2Q,SAAS,CAAC,CAAA;AACpE,eAAA;cAEA,IAAIpU,QAAQ,GAAGG,QAAQ,EAAE;AACxB;AACA;AACA,gBAAA,MAAM43B,QAAQ,GAAGtuB,KAAK,CAACpJ,QAAQ,EAAG,CAAA;AAClC,gBAAA,MAAM23B,SAAS,GAAGtuB,MAAM,CAACrJ,QAAQ,EAAG,CAAA;AAEpC,gBAAA,MAAM43B,QAAQ,GAAGC,gBAAgB,CAChC,IAAIpe,YAAY,CAAC8d,QAAQ,CAACroB,MAAM,EAAEqoB,QAAQ,CAACO,UAAU,EAAEn4B,QAAQ,CAAC,EAChEyJ,KAAK,CAAChH,gBAAgB,EAAE,EACxBgH,KAAK,CAACZ,aAAa,EAAE,CACrB,CAAA;AACD,gBAAA,MAAMuvB,SAAS,GAAGF,gBAAgB,CACjC,IAAIpe,YAAY,CAACge,SAAS,CAACvoB,MAAM,EAAEuoB,SAAS,CAACK,UAAU,EAAEn4B,QAAQ,GAAGC,WAAW,CAAC,EAChFyJ,MAAM,CAACjH,gBAAgB,EAAE,EACzBiH,MAAM,CAACb,aAAa,EAAE,CACtB,CAAA;AAEDY,gBAAAA,KAAK,CAACjJ,QAAQ,CAAC02B,WAAW,CAAC,CAAA;AAC3BxtB,gBAAAA,MAAM,CAAClJ,QAAQ,CAAC02B,WAAW,CAAC,CAAA;AAE5B5uB,gBAAAA,OAAO,CAAC+vB,QAAQ,CAAC5uB,KAAK,CAAC4N,KAAK,EAAE,CAAC7W,QAAQ,CAACy3B,QAAQ,CAAC,CAAC,CAAA;AAClD3vB,gBAAAA,OAAO,CAACgwB,SAAS,CAAC5uB,MAAM,CAAC2N,KAAK,EAAE,CAAC7W,QAAQ,CAAC43B,SAAS,CAAC,CAAC,CAAA;AAErD3uB,gBAAAA,KAAK,CAACjJ,QAAQ,CAACu3B,QAAQ,CAAC,CAAA;AACxBruB,gBAAAA,MAAM,CAAClJ,QAAQ,CAACw3B,SAAS,CAAC,CAAA;AAC3B,eAAA;AACD,aAAA;AACD,WAAA;AACD,SAAA;AAEA,QAAA,KAAK,MAAM7vB,QAAQ,IAAI7I,KAAK,CAACC,IAAI,CAAC+3B,gBAAgB,CAAC9tB,MAAM,EAAE,CAAC,EAAE;AAC7D,UAAA,MAAM+uB,IAAI,GAAGpwB,QAAQ,CAAClH,WAAW,EAAE,CAACC,IAAI,CAAEoQ,CAAC,IAAK,EAAEA,CAAC,YAAYxG,SAAI,CAAC,CAAC,CAAA;AACrE,UAAA,IAAI,CAACytB,IAAI,EAAEpwB,QAAQ,CAACwB,OAAO,EAAE,CAAA;AAC9B,SAAA;AAEA;AACA;AACA,QAAA,MAAM6uB,gBAAgB,GAAGh3B,QAAQ,CAACO,OAAO,EAAE,CAAC8H,aAAa,EAAE,CAAChK,MAAM,CAAA;AAAC,QAAA,MAAAqR,KAAA,GAAA,YAAA;AAAA,UAAA,IAC/DsnB,gBAAgB,GAAGjB,gBAAgB,IAAI,CAACr8B,kBAAkB,CAACC,OAAO,EAAEiI,MAAI,EAAE,OAAO,CAAC,EAAA;YAAA,OAAAxJ,OAAA,CAAAC,OAAA,CAC/E2H,QAAQ,CAACkT,SAAS,CAACvN,KAAK,CAAC;AAAEN,cAAAA,aAAa,EAAE,CAACxF,iBAAY,CAACyF,QAAQ,CAAA;aAAG,CAAC,CAAC,CAAA,CAAA5M,IAAA,CAAA,YAAA,EAAA,CAAA,CAAA;AAAA,WAAA;AAAA,SAAA,EAAA,CAAA;AAAA,QAAA,OAAAgX,KAAA,IAAAA,KAAA,CAAAhX,IAAA,GAAAgX,KAAA,CAAAhX,IAAA,CAAA+W,MAAA,CAAAA,GAAAA,MAAA,CAAAC,KAAA,CAAA,CAAA;AAAA,OAAA,CAAA,CAAA;AAI7E,KAAC,QAAAvW,CAAA,EAAA;AAAA,MAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,KAAA;GAAC,CAAA,CAAA;AACH,CAAA;AAEA;AACA,SAASk9B,cAAcA,CACtBz3B,QAAoB,EACpBoC,aAAyC,EACzCsmB,UAAmB,EAAA;EAEnB,IAAI1oB,QAAQ,YAAY0Z,YAAY,EAAE,OAAO1Z,QAAQ,CAACG,KAAK,EAAE,CAAA;AAC7D,EAAA,MAAMD,QAAQ,GAAG,IAAIwZ,YAAY,CAAC1Z,QAAQ,CAAC,CAAA;AAC3C,EAAA,IAAI,CAAC0oB,UAAU,EAAE,OAAOxoB,QAAQ,CAAA;AAEhC,EAAA,KAAK,IAAIlG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkG,QAAQ,CAACT,MAAM,EAAEzF,CAAC,EAAE,EAAE;AACzCkG,IAAAA,QAAQ,CAAClG,CAAC,CAAC,GAAG4hB,cAAS,CAACiN,mBAAmB,CAAC3oB,QAAQ,CAAClG,CAAC,CAAC,EAAEoI,aAAa,CAAC,CAAA;AACxE,GAAA;AAEA,EAAA,OAAOlC,QAAQ,CAAA;AAChB,CAAA;AAEA;AACA,SAAS43B,gBAAgBA,CACxB93B,QAAsB,EACtBoC,aAAyC,EACzCsmB,UAAmB,EAAA;AAEnB,EAAA,IAAItmB,aAAa,KAAK6S,aAAQ,CAACojB,aAAa,CAACC,KAAK,EAAE,OAAOt4B,QAAQ,CAACG,KAAK,EAAE,CAAA;AAC3E,EAAA,MAAMo4B,UAAU,GAAG/T,8BAAyB,CAACpiB,aAAa,CAAC,CAAA;EAC3D,MAAMlC,QAAQ,GAAG,IAAIq4B,UAAU,CAACv4B,QAAQ,CAACP,MAAM,CAAC,CAAA;AAEhD,EAAA,KAAK,IAAIzF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkG,QAAQ,CAACT,MAAM,EAAEzF,CAAC,EAAE,EAAE;IACzCkG,QAAQ,CAAClG,CAAC,CAAC,GAAG0uB,UAAU,GAAG9M,cAAS,CAACqN,mBAAmB,CAACjpB,QAAQ,CAAChG,CAAC,CAAC,EAAEoI,aAAa,CAAC,GAAGpC,QAAQ,CAAChG,CAAC,CAAC,CAAA;AACnG,GAAA;AAEA,EAAA,OAAOkG,QAAQ,CAAA;AAChB;;AC7LA,MAAM8C,MAAI,GAAG,UAAU,CAAA;AAavB,MAAMw1B,iBAAiB,GAA8B;AACpD99B,EAAAA,IAAI,EAAE,EAAE;AACR+9B,EAAAA,GAAG,EAAE,EAAE;AACPzc,EAAAA,OAAO,EAAE,IAAI;AACb/Z,EAAAA,IAAI,EAAE,IAAA;CACN,CAAA;AAED;;;;AAIG;AACa,SAAAy2B,QAAQA,CAACt1B,QAAA,EAA6C;AAAA,EAAA,IAA7CA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,QAAA,GAA4Bo1B,iBAAiB,CAAA;AAAA,GAAA;AACrE,EAAA,MAAMn1B,OAAO,GAAG;AAAE,IAAA,GAAGm1B,iBAAiB;IAAE,GAAGp1B,QAAAA;GAAuC,CAAA;AAElF,EAAA,OAAO3I,eAAe,CAACuI,MAAI,EAAGM,GAAa,IAAU;AACpD,IAAA,MAAMC,MAAM,GAAGD,GAAG,CAACE,SAAS,EAAE,CAAA;AAC9B,IAAA,MAAMC,IAAI,GAAGH,GAAG,CAAC3B,OAAO,EAAE,CAAA;AAC1B,IAAA,MAAM82B,GAAG,GAAGp1B,OAAO,CAACo1B,GAAG,CAAA;AAEvB;IACA,MAAME,aAAa,GAAGl1B,IAAI,CAACiM,SAAS,EAAE,CAACvK,MAAM,CAAEH,IAAI,IAAKA,IAAI,CAAC+E,OAAO,EAAE,CAAC+H,KAAK,CAACzO,OAAO,CAAC2Y,OAAO,CAAC,CAAC,CAAA;AAE9F;IACA,IAAI3Y,OAAO,CAACpB,IAAI,EAAE;MACjB02B,aAAa,CAAC12B,IAAI,CAAC,CAAC3D,CAAC,EAAEC,CAAC,KAAMD,CAAC,CAACyL,OAAO,EAAE,GAAGxL,CAAC,CAACwL,OAAO,EAAE,GAAG,CAAC,GAAG,CAAC,CAAE,CAAC,CAAA;AACnE,KAAA;AAEA;IACA,MAAMyG,IAAI,GAAGlN,GAAG,CAACs1B,eAAe,CAACv1B,OAAO,CAAC3I,IAAI,CAAC,CAAA;IAC9C,MAAMm+B,UAAU,GAAGp1B,IAAI,CAACyL,WAAW,EAAE,CAAC,CAAC,CAAC,CAAA;AACxCypB,IAAAA,aAAa,CAAC70B,OAAO,CAAC,CAACkB,IAAI,EAAEhL,CAAC,KAAI;AACjC;AACA,MAAA,IAAI8+B,UAAU,CAAA;AACd,MAAA,IAAIC,WAAW,CAAA;MACf,IAAI/+B,CAAC,KAAK,CAAC,EAAE;AACZ8+B,QAAAA,UAAU,GAAG,CAAC9+B,CAAC,GAAGy+B,GAAG,EAAE,CAACz+B,CAAC,GAAG,CAAC,IAAIy+B,GAAG,CAAC,CAAA;AACrCM,QAAAA,WAAW,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;OAChC,MAAM,IAAI/+B,CAAC,KAAK2+B,aAAa,CAACl5B,MAAM,GAAG,CAAC,EAAE;AAC1Cq5B,QAAAA,UAAU,GAAG,CAAC,CAAC9+B,CAAC,GAAG,CAAC,IAAIy+B,GAAG,EAAEz+B,CAAC,GAAGy+B,GAAG,CAAC,CAAA;AACrCM,QAAAA,WAAW,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;AACjC,OAAC,MAAM;AACND,QAAAA,UAAU,GAAG,CAAC,CAAC9+B,CAAC,GAAG,CAAC,IAAIy+B,GAAG,EAAEz+B,CAAC,GAAGy+B,GAAG,EAAE,CAACz+B,CAAC,GAAG,CAAC,IAAIy+B,GAAG,CAAC,CAAA;AACpDM,QAAAA,WAAW,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;AAC1C,OAAA;AAEA;MACA,MAAM1vB,KAAK,GAAG/F,GAAG,CAACwR,cAAc,EAAE,CAAC1U,QAAQ,CAAC,IAAIsZ,YAAY,CAACof,UAAU,CAAC,CAAC,CAAC/jB,SAAS,CAAC8jB,UAAU,CAAC,CAAA;AAC/F,MAAA,MAAMvvB,MAAM,GAAGhG,GAAG,CAChBwR,cAAc,EAAE,CAChB1U,QAAQ,CAAC,IAAIsZ,YAAY,CAACqf,WAAW,CAAC,CAAC,CACvChkB,SAAS,CAAC8jB,UAAU,CAAC,CACrB7jB,OAAO,CAACC,aAAQ,CAACC,IAAI,CAAC8jB,IAAI,CAAC,CAAA;MAC7B,MAAM9wB,OAAO,GAAG5E,GAAG,CACjB21B,sBAAsB,EAAE,CACxBC,gBAAgB,CAACC,qBAAgB,CAACC,aAAa,CAACC,IAAI,CAAC,CACrDpB,QAAQ,CAAC5uB,KAAK,CAAC,CACf6uB,SAAS,CAAC5uB,MAAM,CAAC,CAAA;MACnB,MAAMmH,OAAO,GAAGnN,GAAG,CACjBg2B,sBAAsB,EAAE,CACxB/N,aAAa,CAACvmB,IAAI,CAAC,CACnBu0B,aAAa,CAACpoB,qBAAgB,CAACsY,UAAU,CAACD,KAAK,CAAC,CAChDgQ,UAAU,CAACtxB,OAAO,CAAC,CAAA;MACrBsI,IAAI,CAACipB,UAAU,CAACvxB,OAAO,CAAC,CAACwxB,UAAU,CAACjpB,OAAO,CAAC,CAAA;AAC7C,KAAC,CAAC,CAAA;AAEFlN,IAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AACnC,GAAC,CAAC,CAAA;AACH;;ACtEA,MAAMA,MAAI,GAAG,UAAU,CAAA;AAkBhB,MAAM22B,iBAAiB,GAAkD;AAC/EC,EAAAA,KAAK,EAAE,GAAG;AACVC,EAAAA,KAAK,EAAE,MAAM;AACbC,EAAAA,UAAU,EAAE,KAAA;EACZ;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCG;AACG,SAAUC,QAAQA,CAAC32B,QAAyB,EAAA;AACjD,EAAA,MAAMC,OAAO,GAAG;AAAE,IAAA,GAAGs2B,iBAAiB;IAAE,GAAGv2B,QAAAA;GAAuC,CAAA;AAElF,EAAA,MAAM42B,UAAU,GAAG32B,OAAO,CAAC22B,UAAkD,CAAA;EAE7E,IAAI,CAACA,UAAU,EAAE;AAChB,IAAA,MAAM,IAAIz9B,KAAK,EAAIyG,EAAAA,MAAI,6DAA6D,CAAC,CAAA;AACtF,GAAA;AAEA,EAAA,OAAOvI,eAAe,CAACuI,MAAI,EAAS5B,UAAAA,QAAkB,EAAErG,OAA0B,EAAA;IAAA,IAAmB;AACpG,MAAA,MAAMwI,MAAM,GAAGnC,QAAQ,CAACoC,SAAS,EAAE,CAAA;MAAC,OAAAhK,OAAA,CAAAC,OAAA,CAE9BugC,UAAU,CAAC7S,KAAK,EAAArtB,IAAA,CAAA,YAAA;QAAA,OAAAN,OAAA,CAAAC,OAAA,CAChB2H,QAAQ,CAACkT,SAAS,CAACF,IAAI,CAAC;AAAEF,UAAAA,SAAS,EAAE,KAAA;SAAO,CAAC,CAAC,CAAA,CAAApa,IAAA,CAAA,YAAA;AAEpD;;AAiBA;;AAUA;AACA;AA3BA,UAAA,KAAK,MAAM8N,IAAI,IAAIxG,QAAQ,CAACO,OAAO,EAAE,CAACgG,UAAU,EAAE,EAAE;YACnD,KAAK,MAAMpM,IAAI,IAAIqM,IAAI,CAACC,cAAc,EAAE,EAAE;cACzC,IAAItM,IAAI,CAACK,OAAO,EAAE,KAAKC,cAAS,CAACC,IAAI,CAACM,SAAS,EAAE;AAChDmH,gBAAAA,MAAM,CAACgQ,IAAI,CACV,CAAA,EAAGvQ,MAAI,CAAA,8BAAA,EAAiC4E,IAAI,CAACmC,OAAO,EAAoC,CAAA,gCAAA,CAAA,CACxF,CAAA;AACD,gBAAA,SAAA;AACD,eAAA;AACAkwB,cAAAA,iBAAiB,CAAC74B,QAAQ,EAAE7F,IAAI,EAAE8H,OAAO,CAAC,CAAA;AAE1C,cAAA,IAAI9H,IAAI,CAACE,UAAU,EAAG,CAACO,QAAQ,EAAE,KAAK,CAAC,EAAET,IAAI,CAACgO,OAAO,EAAE,CAAA;AACxD,aAAA;AAEA,YAAA,IAAI3B,IAAI,CAACC,cAAc,EAAE,CAACpI,MAAM,KAAK,CAAC,EAAEmI,IAAI,CAAC2B,OAAO,EAAE,CAAA;AACvD,WAAA;UAAC,OAAA/P,OAAA,CAAAC,OAAA,CAGK2H,QAAQ,CAACkT,SAAS,CACvBvF,KAAK,CAAC;YACLtI,aAAa,EAAE,CAACxF,iBAAY,CAACyF,QAAQ,EAAEzF,iBAAY,CAACoN,IAAI,CAAC;AACzDO,YAAAA,cAAc,EAAE,IAAI;AACpBC,YAAAA,WAAW,EAAE,IAAI;AACjBF,YAAAA,UAAU,EAAE,KAAA;WACZ,CAAC,CACF,CAAA,CAAA7U,IAAA,CAAA,YAAA;AAAA,YAAA,SAAA+W,MAAA,GAAA;AAQDtN,cAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AAAC,aAAA;AAAA,YAAA,MAAA8N,KAAA,GAAA,YAAA;cAAA,IAJ/B,CAAChW,kBAAkB,CAACC,OAAO,EAAEiI,MAAI,EAAE,OAAO,CAAC,EAAA;gBAAA,OAAAxJ,OAAA,CAAAC,OAAA,CACxC2H,QAAQ,CAACkT,SAAS,CAACvN,KAAK,CAAC;AAAEN,kBAAAA,aAAa,EAAE,CAACxF,iBAAY,CAACyF,QAAQ,CAAA;iBAAG,CAAC,CAAC,CAAA,CAAA5M,IAAA,CAAA,YAAA,EAAA,CAAA,CAAA;AAAA,eAAA;AAAA,aAAA,EAAA,CAAA;AAAA,YAAA,OAAAgX,KAAA,IAAAA,KAAA,CAAAhX,IAAA,GAAAgX,KAAA,CAAAhX,IAAA,CAAA+W,MAAA,CAAAA,GAAAA,MAAA,CAAAC,KAAA,CAAA,CAAA;AAAA,WAAA,CAAA,CAAA;AAAA,SAAA,CAAA,CAAA;AAAA,OAAA,CAAA,CAAA;AAI7E,KAAC,QAAAvW,CAAA,EAAA;AAAA,MAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,KAAA;GAAC,CAAA,CAAA;AACH,CAAA;SAEgB0/B,iBAAiBA,CAAC74B,QAAkB,EAAE7F,IAAe,EAAE6H,QAAyB,EAAA;AAC/F,EAAA,MAAMC,OAAO,GAAG;AAAE,IAAA,GAAGs2B,iBAAiB;IAAE,GAAGv2B,QAAAA;GAAuC,CAAA;AAClF,EAAA,MAAM42B,UAAU,GAAG32B,OAAO,CAAC22B,UAAsC,CAAA;AAEjE,EAAA,MAAMz2B,MAAM,GAAGnC,QAAQ,CAACoC,SAAS,EAAE,CAAA;AACnC,EAAA,MAAM9H,QAAQ,GAAGH,IAAI,CAACI,YAAY,CAAC,UAAU,CAAE,CAAA;AAC/C,EAAA,MAAM0Z,UAAU,GAAG9Z,IAAI,CAACE,UAAU,EAAG,CAAA;AACrC,EAAA,MAAM4a,cAAc,GAAG3a,QAAQ,CAACM,QAAQ,EAAE,CAAA;AAE1C,EAAA,IAAIk+B,aAAa,GAAGx+B,QAAQ,CAACuE,QAAQ,EAAG,CAAA;AACxC,EAAA,IAAI2kB,YAAY,GAAGvP,UAAU,CAACpV,QAAQ,EAAG,CAAA;AAEzC;EAEA,IAAIvE,QAAQ,CAAC2G,gBAAgB,EAAE,KAAK4S,aAAQ,CAACojB,aAAa,CAACC,KAAK,EAAE;AACjE,IAAA,IAAI58B,QAAQ,CAAC+M,aAAa,EAAE,EAAE;MAC7B,MAAMpJ,GAAG,GAAG66B,aAAa,CAAA;MACzB,MAAM56B,GAAG,GAAG,IAAIoa,YAAY,CAACra,GAAG,CAACI,MAAM,CAAC,CAAA;AAExC;MACA,KAAK,IAAIzF,CAAC,GAAG,CAAC,EAAEmM,EAAE,GAAGzK,QAAQ,CAACM,QAAQ,EAAE,EAAE2b,EAAE,GAAG,EAAc,EAAE3d,CAAC,GAAGmM,EAAE,EAAEnM,CAAC,EAAE,EAAE;QAC3E2d,EAAE,GAAGjc,QAAQ,CAACqa,UAAU,CAAC/b,CAAC,EAAE2d,EAAE,CAAC,CAAA;AAC/Bjc,QAAAA,QAAQ,CAAC0E,QAAQ,CAACd,GAAG,CAAC,CAACsY,UAAU,CAAC5d,CAAC,EAAE2d,EAAE,CAAC,CAACvX,QAAQ,CAACf,GAAG,CAAC,CAAA;AACvD,OAAA;AAEA66B,MAAAA,aAAa,GAAG56B,GAAG,CAAA;AACpB,KAAC,MAAM;AACN46B,MAAAA,aAAa,GAAG,IAAIxgB,YAAY,CAACwgB,aAAa,CAAC,CAAA;AAChD,KAAA;AACD,GAAA;EAEA,IAAI7kB,UAAU,CAAChT,gBAAgB,EAAE,KAAK4S,aAAQ,CAACojB,aAAa,CAAC8B,YAAY,EAAE;AAC1EvV,IAAAA,YAAY,GAAG,IAAIlkB,WAAW,CAACkkB,YAAY,CAAC,CAAA;AAC7C,GAAA;AAEA;AAEA,EAAA,MAAMwV,WAAW,GAAGz8B,IAAI,CAACC,KAAK,CAAEyF,OAAO,CAACu2B,KAAK,GAAGvjB,cAAc,GAAI,CAAC,CAAC,GAAG,CAAC,CAAA;AACxE,EAAA,MAAM,CAAC/P,eAAe,EAAEuzB,KAAK,CAAC,GAAGG,UAAU,CAACD,QAAQ,CACnDnV,YAA2B,EAC3BsV,aAA6B,EAC7B,CAAC,EACDE,WAAW,EACX/2B,OAAO,CAACw2B,KAAK,EACbx2B,OAAO,CAACy2B,UAAU,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE,CACxC,CAAA;EAED,MAAM,CAACn6B,KAAK,EAAE4nB,MAAM,CAAC,GAAGyS,UAAU,CAACK,WAAW,CAAC/zB,eAAe,CAAC,CAAA;EAE/D/C,MAAM,CAACU,KAAK,CAAI,CAAAjB,EAAAA,WAASrE,aAAa,CAACjD,QAAQ,CAACM,QAAQ,EAAE,EAAEurB,MAAM,CAAsB,CAAA,kBAAA,EAAAsS,KAAK,CAAC77B,OAAO,CAAC,CAAC,CAAI,CAAA,CAAA,CAAA,CAAC,CAAA;AAE5G;AAEA,EAAA,KAAK,MAAMkd,YAAY,IAAItc,kBAAkB,CAACrD,IAAI,CAAC,EAAE;AACpD,IAAA,MAAM6f,YAAY,GAAGF,YAAY,CAACjE,KAAK,EAAE,CAAA;AACzCvX,IAAAA,cAAc,CAAC0b,YAAY,EAAEzb,KAAK,EAAE4nB,MAAM,CAAC,CAAA;AAC3CnoB,IAAAA,iBAAiB,CAAC7D,IAAI,EAAE2f,YAAY,EAAEE,YAAY,CAAC,CAAA;AACnD,IAAA,IAAIF,YAAY,CAACra,WAAW,EAAE,CAACpB,MAAM,KAAK,CAAC,EAAEyb,YAAY,CAAC3R,OAAO,EAAE,CAAA;AACpE,GAAA;AAEA;AAEA,EAAA,MAAMkb,UAAU,GAAGpP,UAAU,CAAC4B,KAAK,EAAE,CAAA;AACrCwN,EAAAA,UAAU,CAACrkB,QAAQ,CAACiW,cAAc,IAAI,KAAK,GAAG,IAAI5V,WAAW,CAAC6F,eAAe,CAAC,GAAGA,eAAe,CAAC,CAAA;AACjG/K,EAAAA,IAAI,CAACkW,UAAU,CAACgT,UAAU,CAAC,CAAA;AAC3B,EAAA,IAAIpP,UAAU,CAACxU,WAAW,EAAE,CAACpB,MAAM,KAAK,CAAC,EAAE4V,UAAU,CAAC9L,OAAO,EAAE,CAAA;AAE/D,EAAA,OAAOhO,IAAI,CAAA;AACZ;;AC5LA,MAAMyH,MAAI,GAAG,QAAQ,CAAA;AAWrB,MAAMs3B,eAAe,GAA4B;EAChDV,KAAK,EAAE,CAAC,GAAG,CAAA;CACX,CAAA;AAED;;;;;;;;;;;;;;;;;;;;;AAqBG;AACa,SAAAW,MAAMA,CAACn3B,QAAA,EAAyC;AAAA,EAAA,IAAzCA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,QAAA,GAA0Bk3B,eAAe,CAAA;AAAA,GAAA;AAC/D,EAAA,MAAMj3B,OAAO,GAAG;AAAE,IAAA,GAAGi3B,eAAe;IAAE,GAAGl3B,QAAAA;GAAqC,CAAA;AAE9E,EAAA,MAAMw2B,KAAK,GAAGv2B,OAAO,CAACu2B,KAAK,CAAA;AAC3B,EAAA,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAG,CAAC,EAAE;AAC3B,IAAA,MAAM,IAAIr9B,KAAK,EAAIyG,EAAAA,MAAI,kCAAkC,CAAC,CAAA;AAC3D,GAAA;AAEA,EAAA,OAAOvI,eAAe,CAACuI,MAAI,EAAG5B,QAAkB,IAAU;AACzD,IAAA,MAAMqC,IAAI,GAAGrC,QAAQ,CAACO,OAAO,EAAE,CAAA;AAC/B,IAAA,MAAM4B,MAAM,GAAGnC,QAAQ,CAACoC,SAAS,EAAE,CAAA;IAEnC,IAAIg3B,aAAa,GAAG,CAAC,CAAA;IAErB,KAAK,MAAMzyB,QAAQ,IAAItE,IAAI,CAACgG,aAAa,EAAE,EAAE;AAC5C,MAAA,MAAMnJ,KAAK,GAAGyH,QAAQ,CAAC/L,QAAQ,EAAE,CAAA;AACjC,MAAA,MAAMulB,IAAI,GAAGriB,KAAK,CAAC6I,QAAQ,CAACjI,cAAc,EAAE,CAAC,CAACsW,IAAI,CAAC,CAAC,CAAC,CAAA;AACrD,MAAA,MAAMuB,EAAE,GAAGzY,KAAK,CAAC6I,QAAQ,CAACjI,cAAc,EAAE,CAAC,CAACsW,IAAI,CAAC,CAAC,CAAC,CAAA;MAEnD,IAAIqkB,YAAY,GAAG,CAAC,CAAA;MACpB,KAAK,IAAIzgC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsG,KAAK,EAAEtG,CAAC,EAAE,EAAE;AAC/B+N,QAAAA,QAAQ,CAACgO,UAAU,CAAC/b,CAAC,EAAE2d,EAAE,CAAC,CAAA;AAC1B,QAAA,IAAI,CAACiE,cAAS,CAACC,EAAE,CAAClE,EAAE,EAAE4J,IAAI,EAAE,CAAC,CAAC,EAAEkZ,YAAY,EAAE,CAAA;AAC9C,QAAA,IAAIA,YAAY,GAAGn6B,KAAK,IAAIs5B,KAAK,EAAE,MAAA;AACpC,OAAA;AAEA,MAAA,MAAMW,MAAM,GAAGE,YAAY,GAAGn6B,KAAK,GAAGs5B,KAAK,CAAA;AAC3C,MAAA,IAAIW,MAAM,KAAKxyB,QAAQ,CAACW,SAAS,EAAE,EAAE;AACpCX,QAAAA,QAAQ,CAACslB,SAAS,CAACkN,MAAM,CAAC,CAAA;AAC1BC,QAAAA,aAAa,EAAE,CAAA;AAChB,OAAA;AACD,KAAA;IAEAj3B,MAAM,CAACU,KAAK,CAAC,CAAA,EAAGjB,MAAiB,CAAAw3B,UAAAA,EAAAA,aAA0B,aAAA,CAAC,CAAA;AAC5Dj3B,IAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AACnC,GAAC,CAAC,CAAA;AACH;;ACpEqD,MAyTtC03B,wBAAwB,aACtChhC,QAAoB,EACpBihC,WAAmB,EACnBC,WAAmB,EACnBv3B,OAAyC,EAAA;EAAA,IAAA;AAAA,IAAA,OAAA7J,OAAA,CAAAC,OAAA,CAEhBG,uBAAS,CAACF,QAAQ,EAAEihC,WAAW,CAAC,CAAA7gC,CAAAA,IAAA,WAAnD+gC,SAAS,EAAA;MAEf,IAAIx3B,OAAO,CAACy3B,MAAM,EAAE;QACnB,MAAM,CAACtH,CAAC,EAAE4B,CAAC,CAAC,GAAGyF,SAAS,CAAC5gC,KAAK,CAAA;AAC9B,QAAA,MAAM8gC,OAAO,GAAGv4B,SAAS,CAAC,CAACgxB,CAAC,EAAE4B,CAAC,CAAC,EAAE/xB,OAAO,CAACy3B,MAAM,CAAC,CAAA;QACjD,MAAME,SAAS,GAAGxF,2BAAO,CAAC,IAAI9d,UAAU,CAACqjB,OAAO,CAAC,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAGA,OAAO,EAAE,CAAC,CAAC,CAAC,CAAA;AACvF13B,QAAAA,OAAO,CAAC43B,YAAY,KAAKC,2BAAmB,CAACC,QAAQ,GAClDC,uBAAQ,CAACP,SAAS,EAAEG,SAAS,CAAC,GAC9BK,uBAAQ,CAACR,SAAS,EAAEG,SAAS,CAAC,CAAA;AACjC,QAAA,OAAO7gC,wBAAU,CAAC6gC,SAAS,EAAEJ,WAAW,CAAC,CAAA;AAC1C,OAAA;AAEA,MAAA,OAAOzgC,wBAAU,CAAC0gC,SAAS,EAAED,WAAW,CAAC,CAAA;AAAC,KAAA,CAAA,CAAA;AAC3C,GAAC,QAAArgC,CAAA,EAAA;AAAA,IAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA,CAAA,CAAA;AAAA,MAtEc+gC,gBAAgB,aAC9B5hC,QAAoB,EACpB6hC,YAAoB,EACpBX,WAAmB,EACnBv3B,OAAyC,EAAA;EAAA,IAAA;AAEzC,IAAA,MAAM6jB,OAAO,GAAG7jB,OAAO,CAAC6jB,OAAuB,CAAA;IAC/C,IAAIsU,cAAc,GAAiF,EAAE,CAAA;AAErG,IAAA,MAAMC,SAAS,GAAGC,qBAAqB,CAACd,WAAW,CAAC,CAAA;AAEpD,IAAA,QAAQa,SAAS;AAChB,MAAA,KAAK,MAAM;AACVD,QAAAA,cAAc,GAAG;UAAEG,OAAO,EAAEt4B,OAAO,CAACs4B,OAAAA;SAA8B,CAAA;AAClE,QAAA,MAAA;AACD,MAAA,KAAK,KAAK;AACTH,QAAAA,cAAc,GAAG;UAChBG,OAAO,EAAEt4B,OAAO,CAACs4B,OAAO;UACxBC,MAAM,EAAEj8B,KAAK,CAAC0D,OAAO,CAACu4B,MAAM,EAAE,GAAG,EAAE,EAAE,CAAA;SACjB,CAAA;AACrB,QAAA,MAAA;AACD,MAAA,KAAK,MAAM;AACVJ,QAAAA,cAAc,GAAG;UAChBG,OAAO,EAAEt4B,OAAO,CAACs4B,OAAO;UACxBC,MAAM,EAAEj8B,KAAK,CAAC0D,OAAO,CAACu4B,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;UACrCC,QAAQ,EAAEx4B,OAAO,CAACw4B,QAAQ;UAC1BC,YAAY,EAAEz4B,OAAO,CAACy4B,YAAAA;SACD,CAAA;AACtB,QAAA,MAAA;AACD,MAAA,KAAK,MAAM;AACVN,QAAAA,cAAc,GAAG;UAChBG,OAAO,EAAEt4B,OAAO,CAACs4B,OAAO;UACxBC,MAAM,EAAEj8B,KAAK,CAAC0D,OAAO,CAACu4B,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;UACrCC,QAAQ,EAAEx4B,OAAO,CAACw4B,QAAAA;SACG,CAAA;AACtB,QAAA,MAAA;AACF,KAAA;AAEA,IAAA,MAAMpa,QAAQ,GAAGyF,OAAO,CAACxtB,QAAQ,CAAC,CAACqiC,QAAQ,CAACN,SAAS,EAAED,cAAc,CAAC,CAAA;IAEtE,IAAIn4B,OAAO,CAACy3B,MAAM,EAAE;AACnBrZ,MAAAA,QAAQ,CAACqZ,MAAM,CAACz3B,OAAO,CAACy3B,MAAM,CAAC,CAAC,CAAC,EAAEz3B,OAAO,CAACy3B,MAAM,CAAC,CAAC,CAAC,EAAE;AACrDkB,QAAAA,GAAG,EAAE,QAAQ;QACbC,MAAM,EAAE54B,OAAO,CAAC43B,YAAY;AAC5BiB,QAAAA,kBAAkB,EAAE,IAAA;AACpB,OAAA,CAAC,CAAA;AACH,KAAA;AAAC,IAAA,MAAAC,OAAA,GAEMpzB,gBAAW,CAACC,MAAM,CAAA;AAAA,IAAA,OAAAxP,OAAA,CAAAC,OAAA,CAAOgoB,QAAQ,CAAC2a,QAAQ,EAAE,CAAA,CAAAtiC,IAAA,CAAA,UAAAuiC,kBAAA,EAAA;AAAnD,MAAA,OAAAF,OAAA,CAAA9G,IAAA,CAAOtsB,gBAAW,EAAAszB,kBAAA,CAAA,CAAA;AAAmC,KAAA,CAAA,CAAA;AACtD,GAAC,QAAA9hC,CAAA,EAAA;AAAA,IAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA,CAAA,CAAA;AAhHD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BG;AACH,MAAsB+hC,eAAe,GAAA,UAACpwB,OAAgB,EAAE9I,QAAgC,EAAA;EAAA,IAAA;AACvF,IAAA,MAAMC,OAAO,GAAG;AAAE,MAAA,GAAGk5B,yBAAyB;MAAE,GAAGn5B,QAAAA;KAA8C,CAAA;AACjG,IAAA,MAAM8jB,OAAO,GAAG7jB,OAAO,CAAC6jB,OAA8B,CAAA;AAEtD,IAAA,MAAMsV,SAAS,GAAGC,SAAS,CAACvwB,OAAO,CAAC,CAAA;AACpC,IAAA,MAAMuvB,SAAS,GAAGp4B,OAAO,CAACq5B,YAAY,IAAIF,SAAS,CAAA;AACnD,IAAA,MAAM7B,WAAW,GAAGzuB,OAAO,CAACrS,WAAW,EAAE,CAAA;AACzC,IAAA,MAAM+gC,WAAW,GAAY,CAAAa,MAAAA,EAAAA,UAAW,CAAA,CAAA;AAExC,IAAA,MAAM/hC,QAAQ,GAAGwS,OAAO,CAACvS,QAAQ,EAAG,CAAA;AAAC,IAAA,OAAAH,OAAA,CAAAC,OAAA,CACpBytB,OAAO,GACfoU,gBAAgB,CAAC5hC,QAAQ,EAAEihC,WAAW,EAAEC,WAAW,EAAEv3B,OAAO,CAAC,GAC7Dq3B,wBAAwB,CAAChhC,QAAQ,EAAEihC,WAAW,EAAEC,WAAW,EAAEv3B,OAAO,CAAC,CAAAvJ,CAAAA,IAAA,WAFxEM,QAAQ,EAAA;AAId,MAAA,MAAMuiC,aAAa,GAAGjjC,QAAQ,CAACwlB,UAAU,CAAA;AACzC,MAAA,MAAM0d,aAAa,GAAGxiC,QAAQ,CAAC8kB,UAAU,CAAA;AAAC,MAAA,IAEtCyb,WAAW,KAAKC,WAAW,IAAIgC,aAAa,IAAID,aAAa,IAAI,CAACt5B,OAAO,CAACy3B,MAAM,EAAA,EAAA,MAG7E,IAAIH,WAAW,KAAKC,WAAW,EAAE;AACvC;AACA1uB,QAAAA,OAAO,CAAC7R,QAAQ,CAACD,QAAQ,CAAC,CAAA;AAC3B,OAAC,MAAM;AACN;AACA,QAAA,MAAMyiC,YAAY,GAAG9c,eAAU,CAAC+c,mBAAmB,CAACnC,WAAW,CAAC,CAAA;AAChE,QAAA,MAAMoC,YAAY,GAAGhd,eAAU,CAAC+c,mBAAmB,CAAClC,WAAW,CAAC,CAAA;QAChE,MAAMoC,MAAM,GAAG9wB,OAAO,CAAC+B,MAAM,EAAE,CAAC7P,OAAO,CAAC,IAAI6+B,MAAM,CAAC,MAAMJ,YAAe,CAAA,CAAA,CAAA,CAAC,EAAM,CAAA,CAAA,EAAAE,YAAc,CAAA,CAAA,CAAC,CAAA;AAC9F7wB,QAAAA,OAAO,CAAC7R,QAAQ,CAACD,QAAQ,CAAC,CAACE,WAAW,CAACsgC,WAAW,CAAC,CAACrF,MAAM,CAACyH,MAAM,CAAC,CAAA;AACnE,OAAA;AAAC,KAAA,CAAA,CAAA;AACF,GAAC,QAAAziC,CAAA,EAAA;AAAA,IAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA;AAlQD,MAAMyI,MAAI,GAAG,iBAAiB,CAAA;AAGvB,MAAMk6B,kCAAkC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAU;AAC1F,MAAMC,oBAAoB,GAAG,CAAC,YAAY,EAAE,WAAW,EAAE,YAAY,EAAE,YAAY,CAAC,CAAA;AAEpF;AACYjC,qCAKX;AALD,CAAA,UAAYA,mBAAmB,EAAA;AAC9B;AACAA,EAAAA,mBAAA,CAAA,UAAA,CAAA,GAAA,UAAqB,CAAA;AACrB;AACAA,EAAAA,mBAAA,CAAA,UAAA,CAAA,GAAA,UAAqB,CAAA;AACtB,CAAC,EALWA,2BAAmB,KAAnBA,2BAAmB,GAK9B,EAAA,CAAA,CAAA,CAAA;AAyDD;AACO,MAAMqB,yBAAyB,GAAwE;EAC7GtB,YAAY,EAAEC,2BAAmB,CAACC,QAAQ;AAC1Cnf,EAAAA,OAAO,EAAEkI,SAAS;AAClBkZ,EAAAA,OAAO,EAAElZ,SAAS;AAClBhX,EAAAA,KAAK,EAAEgX,SAAS;AAChByX,EAAAA,OAAO,EAAEzX,SAAS;AAClB0X,EAAAA,MAAM,EAAE1X,SAAS;AACjB2X,EAAAA,QAAQ,EAAE,KAAK;AACfC,EAAAA,YAAY,EAAE,KAAA;EACd;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCG;AACG,SAAUuB,eAAeA,CAACj6B,QAAgC,EAAA;AAC/D,EAAA,MAAMC,OAAO,GAAG;AAAE,IAAA,GAAGk5B,yBAAyB;IAAE,GAAGn5B,QAAAA;GAA8C,CAAA;AACjG,EAAA,MAAMs5B,YAAY,GAAGr5B,OAAO,CAACq5B,YAAkC,CAAA;AAC/D,EAAA,MAAMY,SAAS,GAAGj6B,OAAO,CAAC2Y,OAAO,CAAA;AACjC,EAAA,MAAMuhB,SAAS,GAAGl6B,OAAO,CAAC+5B,OAAO,CAAA;AACjC,EAAA,MAAMI,OAAO,GAAGn6B,OAAO,CAAC6J,KAAK,CAAA;AAE7B,EAAA,OAAOzS,eAAe,CAACuI,MAAI,EAAA,UAAS5B,QAAkB,EAAA;IAAA,IAAmB;AACxE,MAAA,MAAMmC,MAAM,GAAGnC,QAAQ,CAACoC,SAAS,EAAE,CAAA;MACnC,MAAMyG,QAAQ,GAAG7I,QAAQ,CAACO,OAAO,EAAE,CAACuI,YAAY,EAAE,CAAA;AAAC,MAAA,OAAA1Q,OAAA,CAAAC,OAAA,CAE7CD,OAAO,CAAC2U,GAAG,CAChBlE,QAAQ,CAAC/H,GAAG,CAAQgK,UAAAA,OAAO,EAAEuxB,YAAY,EAAA;QAAA,IAAI;AAC5C,UAAA,MAAMvwB,KAAK,GAAGD,gBAAgB,CAACf,OAAO,CAAC,CAAA;AACvC,UAAA,MAAM+U,QAAQ,GAAGwF,qBAAqB,CAACva,OAAO,CAAC,CAAA;AAC/C,UAAA,MAAMwxB,YAAY,GACjBxxB,OAAO,CAAC+B,MAAM,EAAE,IAChB/B,OAAO,CAACnC,OAAO,EAAE,IACjB,CAAA,EAAG0zB,YAAY,GAAG,CAAC,CAAA,CAAA,EAAIr8B,QAAQ,CAACO,OAAO,EAAE,CAACuI,YAAY,EAAE,CAACzK,OAAQ,CAAA,CAAA;AAClE,UAAA,MAAMjB,MAAM,GAAG,CAAA,EAAGwE,MAAQ,CAAA,CAAA,EAAA06B,aAAe,CAAA,CAAA,CAAA;AAEzC;UAEA,IAAI,CAACP,oBAAoB,CAACn2B,QAAQ,CAACkF,OAAO,CAACrS,WAAW,EAAE,CAAC,EAAE;AAC1D0J,YAAAA,MAAM,CAACU,KAAK,CAAC,CAAA,EAAGzF,MAAM,CAAA,sCAAA,EAAyC0N,OAAO,CAACrS,WAAW,EAAM,CAAA,EAAA,CAAA,CAAC,CAAA;YACzF,OAAAL,OAAA,CAAAC,OAAA,EAAA,CAAA;WACA,MAAM,IAAI6jC,SAAS,IAAI,CAACA,SAAS,CAAChxB,IAAI,CAACJ,OAAO,CAACnC,OAAO,EAAE,CAAC,IAAI,CAACuzB,SAAS,CAAChxB,IAAI,CAACJ,OAAO,CAAC+B,MAAM,EAAE,CAAC,EAAE;AAChG1K,YAAAA,MAAM,CAACU,KAAK,EAAIzF,EAAAA,MAAM,8CAA8C,CAAC,CAAA;YACrE,OAAAhF,OAAA,CAAAC,OAAA,EAAA,CAAA;AACD,WAAC,MAAM,IAAI8jC,SAAS,IAAI,CAACA,SAAS,CAACjxB,IAAI,CAACJ,OAAO,CAACrS,WAAW,EAAE,CAAC,EAAE;AAC/D0J,YAAAA,MAAM,CAACU,KAAK,CAAC,CAAA,EAAGzF,MAAM,CAAA,aAAA,EAAgB0N,OAAO,CAACrS,WAAW,EAAsC,CAAA,kCAAA,CAAA,CAAC,CAAA;YAChG,OAAAL,OAAA,CAAAC,OAAA,EAAA,CAAA;WACA,MAAM,IAAI+jC,OAAO,IAAItwB,KAAK,CAACzN,MAAM,IAAI,CAACyN,KAAK,CAACpM,IAAI,CAAE8R,IAAI,IAAK4qB,OAAO,CAAClxB,IAAI,CAACsG,IAAI,CAAC,CAAC,EAAE;AAChFrP,YAAAA,MAAM,CAACU,KAAK,CAAC,CAAA,EAAGzF,MAAsB,CAAA,aAAA,EAAA0O,KAAK,CAAC5K,IAAI,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAA;YACzF,OAAA9I,OAAA,CAAAC,OAAA,EAAA,CAAA;AACD,WAAC,MAAM,IAAI4J,OAAO,CAACq5B,YAAY,KAAK,MAAM,IAAIzb,QAAQ,GAAGyF,mBAAc,CAACI,CAAC,EAAE;AAC1EvjB,YAAAA,MAAM,CAACgQ,IAAI,CAAC,CAAA,EAAG/U,MAAsB,CAAA,aAAA,EAAA0O,KAAK,CAAC5K,IAAI,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAA;YACjF,OAAA9I,OAAA,CAAAC,OAAA,EAAA,CAAA;AACD,WAAA;AAEA,UAAA,MAAM+iC,SAAS,GAAGC,SAAS,CAACvwB,OAAO,CAAC,CAAA;AACpC,UAAA,MAAMuvB,SAAS,GAAGiB,YAAY,IAAIF,SAAS,CAAA;UAC3Cj5B,MAAM,CAACU,KAAK,CAAI,CAAAzF,EAAAA,MAAoB,cAAAg+B,SAAe,CAAA,GAAA,EAAAf,SAAW,CAAA,CAAA,CAAC,CAAA;AAC/Dl4B,UAAAA,MAAM,CAACU,KAAK,CAAC,CAAA,EAAGzF,MAAoB,CAAA,WAAA,EAAA0O,KAAK,CAAC5K,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;AAExD,UAAA,MAAM5I,QAAQ,GAAGwS,OAAO,CAACvS,QAAQ,EAAG,CAAA;AACpC,UAAA,MAAMgjC,aAAa,GAAGjjC,QAAQ,CAACwlB,UAAU,CAAA;UAAC,OAAA1lB,OAAA,CAAAC,OAAA,CAEpC6iC,eAAe,CAACpwB,OAAO,EAAE7I,OAAO,CAAC,CAAA,CAAAvJ,IAAA,CAAA,YAAA;AAEvC,YAAA,MAAMM,QAAQ,GAAG8R,OAAO,CAACvS,QAAQ,EAAG,CAAA;AACpC,YAAA,MAAMijC,aAAa,GAAGxiC,QAAQ,CAAC8kB,UAAU,CAAA;YAEzC,MAAMye,IAAI,GAAGjkC,QAAQ,KAAKU,QAAQ,GAAG,WAAW,GAAG,EAAE,CAAA;AAErDmJ,YAAAA,MAAM,CAACU,KAAK,IAAIzF,MAAM,CAAA,SAAA,EAAYlB,WAAW,CAACq/B,aAAa,CAAO,CAAA,GAAA,EAAAr/B,WAAW,CAACs/B,aAAa,EAAIe,EAAAA,IAAI,EAAE,CAAC,CAAA;AAAC,WAAA,CAAA,CAAA;AACxG,SAAC,QAAApjC,CAAA,EAAA;AAAA,UAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,SAAA;OAAC,CAAA,CACF,EAAAT,IAAA,CAAA,YAAA;AAED;AACA,QAAA,MAAM8jC,aAAa,GAAGx8B,QAAQ,CAAC+a,eAAe,CAAC0hB,yBAAc,CAAC,CAAA;AAC9D,QAAA,IAAI5zB,QAAQ,CAACnJ,IAAI,CAAEoL,OAAO,IAAKA,OAAO,CAACrS,WAAW,EAAE,KAAK,YAAY,CAAC,EAAE;AACvE+jC,UAAAA,aAAa,CAACzgB,WAAW,CAAC,IAAI,CAAC,CAAA;AAChC,SAAC,MAAM;UACNygB,aAAa,CAACr0B,OAAO,EAAE,CAAA;AACxB,SAAA;AAEA;AACA,QAAA,MAAMu0B,aAAa,GAAG18B,QAAQ,CAAC+a,eAAe,CAAC4hB,yBAAc,CAAC,CAAA;AAC9D,QAAA,IAAI9zB,QAAQ,CAACnJ,IAAI,CAAEoL,OAAO,IAAKA,OAAO,CAACrS,WAAW,EAAE,KAAK,YAAY,CAAC,EAAE;AACvEikC,UAAAA,aAAa,CAAC3gB,WAAW,CAAC,IAAI,CAAC,CAAA;AAChC,SAAC,MAAM;UACN2gB,aAAa,CAACv0B,OAAO,EAAE,CAAA;AACxB,SAAA;AAEAhG,QAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AAAC,OAAA,CAAA,CAAA;AACpC,KAAC,QAAAzI,CAAA,EAAA;AAAA,MAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,KAAA;GAAC,CAAA,CAAA;AACH,CAAA;AAyIA,SAASkiC,SAASA,CAACvwB,OAAgB,EAAA;AAClC,EAAA,OAAOwvB,qBAAqB,CAACxvB,OAAO,CAACrS,WAAW,EAAE,CAAC,CAAA;AACpD,CAAA;AAEA,SAAS6hC,qBAAqBA,CAACjb,QAAgB,EAAA;EAC9C,MAAMud,MAAM,GAAGvd,QAAQ,CAACwd,KAAK,CAAC,GAAG,CAAC,CAACvyB,GAAG,EAAwB,CAAA;EAC9D,IAAI,CAACsyB,MAAM,IAAI,CAACd,kCAAkC,CAACl2B,QAAQ,CAACg3B,MAAM,CAAC,EAAE;AACpE,IAAA,MAAM,IAAIzhC,KAAK,EAAuBkkB,mBAAAA,EAAAA,QAAQ,IAAI,CAAC,CAAA;AACpD,GAAA;AACA,EAAA,OAAOud,MAAM,CAAA;AACd,CAAA;AAEA,SAASr+B,KAAKA,CAAC9E,KAAgC,EAAEqjC,MAAc,EAAEC,MAAc,EAAA;AAC9E,EAAA,IAAItjC,KAAK,IAAI,IAAI,EAAE,OAAOqpB,SAAS,CAAA;EACnC,OAAOvmB,IAAI,CAAC8a,KAAK,CAAE5d,KAAK,GAAGqjC,MAAM,GAAIC,MAAM,CAAC,CAAA;AAC7C;;AClWA,MAAMn7B,MAAI,GAAG,UAAU,CAAA;AAevB,MAAMo7B,iBAAiB,GAAwD;AAC9ElqB,EAAAA,SAAS,EAAE,KAAA;CACX,CAAA;AAED;;;;;;;;;;;;;;;;;AAiBG;AACa,SAAAmqB,QAAQA,CAACj7B,QAAA,EAA6C;AAAA,EAAA,IAA7CA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,QAAA,GAA4Bg7B,iBAAiB,CAAA;AAAA,GAAA;AACrE,EAAA,IAAI,CAACh7B,QAAQ,CAACk7B,gBAAgB,EAAE;AAC/B,IAAA,MAAM,IAAI/hC,KAAK,EAAIyG,EAAAA,MAAI,8DAA8D,CAAC,CAAA;AACvF,GAAA;AAEA,EAAA,MAAMK,OAAO,GAAG;AAAE,IAAA,GAAG+6B,iBAAiB;IAAE,GAAGh7B,QAAAA;GAAuC,CAAA;AAElF,EAAA,OAAO3I,eAAe,CAACuI,MAAI,EAAGM,GAAa,IAAU;AACpD,IAAA,MAAMC,MAAM,GAAGD,GAAG,CAACE,SAAS,EAAE,CAAA;AAC9B,IAAA,MAAM+6B,YAAY,GAAG,IAAI5hC,GAAG,EAAsB,CAAA;AAClD,IAAA,MAAM6hC,YAAY,GAAG,IAAI7hC,GAAG,EAAoB,CAAA;IAChD,IAAI41B,QAAQ,GAAG,CAAC,CAAA;AAEhB,IAAA,KAAK,MAAM3qB,IAAI,IAAItE,GAAG,CAAC3B,OAAO,EAAE,CAACgG,UAAU,EAAE,EAAE;AAC9C,MAAA,MAAM82B,QAAQ,GAAG72B,IAAI,CAACmC,OAAO,EAAE,CAAA;AAC/B,MAAA,MAAM20B,cAAc,GAAG92B,IAAI,CAACC,cAAc,EAAE,CAAA;AAE5C,MAAA,KAAK,IAAI7N,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0kC,cAAc,CAACj/B,MAAM,EAAEzF,CAAC,EAAE,EAAE;AAC/C,QAAA,MAAMuB,IAAI,GAAGmjC,cAAc,CAAC1kC,CAAC,CAAC,CAAA;AAE9B;AACA,QAAA,IAAI,CAAC2kC,eAAe,CAACpjC,IAAI,EAAEgI,MAAM,EAAEk7B,QAAQ,EAAEzkC,CAAC,EAAEqJ,OAAO,CAAC6Q,SAAS,CAAC,EAAE,SAAA;AAEpE,QAAA,MAAM0qB,gBAAgB,GAAGC,iBAAiB,CAACtjC,IAAI,CAAC,CAAA;AAEhD;QACA,MAAMG,QAAQ,GAAGH,IAAI,CAACI,YAAY,CAAC,UAAU,CAAE,CAACsE,QAAQ,EAAG,CAAA;QAC3D,MAAMmZ,MAAM,GAAG7d,IAAI,CAACI,YAAY,CAAC,QAAQ,CAAE,CAACsE,QAAQ,EAAG,CAAA;QACvD,MAAM6+B,QAAQ,GAAGvjC,IAAI,CAACI,YAAY,CAACijC,gBAAgB,CAAE,CAAC3+B,QAAQ,EAAG,CAAA;AAEjE;QACA,MAAM8+B,UAAU,GAAGR,YAAY,CAACrhC,GAAG,CAACxB,QAAQ,CAAC,IAAIsjC,SAAI,EAAE,CAAA;AACvDT,QAAAA,YAAY,CAACnhC,GAAG,CAAC1B,QAAQ,EAAEqjC,UAAU,CAAC,CAAA;QAEtC,MAAME,QAAQ,GAAGV,YAAY,CAACrhC,GAAG,CAACkc,MAAM,CAAC,IAAI4lB,SAAI,EAAE,CAAA;AACnDT,QAAAA,YAAY,CAACnhC,GAAG,CAACgc,MAAM,EAAE6lB,QAAQ,CAAC,CAAA;QAElC,MAAMC,UAAU,GAAGX,YAAY,CAACrhC,GAAG,CAAC4hC,QAAQ,CAAC,IAAIE,SAAI,EAAE,CAAA;AACvDT,QAAAA,YAAY,CAACnhC,GAAG,CAAC0hC,QAAQ,EAAEI,UAAU,CAAC,CAAA;AAEtC;AACA,QAAA,MAAMC,WAAW,GAAG5jC,IAAI,CAACI,YAAY,CAAC,SAAS,CAAC,CAAA;AAChD,QAAA,IAAIwjC,WAAW,IAAIA,WAAW,CAACt+B,WAAW,EAAE,CAACpB,MAAM,KAAK,CAAC,EAAE0/B,WAAW,CAAC51B,OAAO,EAAE,CAAA;AAEhF;QACA,MAAM61B,aAAa,GAAM,CAAAL,EAAAA,cAAcE,QAAQ,CAAA,CAAA,EAAIC,UAAU,CAAE,CAAA,CAAA;AAC/D,QAAA,IAAI5lB,OAAO,GAAGklB,YAAY,CAACthC,GAAG,CAACkiC,aAAa,CAAC,CAAA;AAC7C,QAAA,IAAI9lB,OAAO,EAAE;UACZ/V,MAAM,CAACU,KAAK,CAAI,CAAAjB,EAAAA,MAAmC,+BAAAhJ,CAAc,CAAA,UAAA,EAAAykC,QAAY,CAAA,EAAA,CAAA,CAAC,CAAA;AAC9EljC,UAAAA,IAAI,CAACiW,YAAY,CAAC,SAAS,EAAE8H,OAAO,CAAC,CAAA;AACrCiZ,UAAAA,QAAQ,EAAE,CAAA;AACV,UAAA,SAAA;AACD,SAAA;AAEA;QACAhvB,MAAM,CAACU,KAAK,CAAI,CAAAjB,EAAAA,MAAkC,8BAAAhJ,CAAc,CAAA,UAAA,EAAAykC,QAAY,CAAA,EAAA,CAAA,CAAC,CAAA;QAC7E,MAAMY,aAAa,GAAG9jC,IAAI,CAACI,YAAY,CAAC,UAAU,CAAE,CAACkZ,SAAS,EAAE,CAAA;AAChE,QAAA,MAAMyqB,YAAY,GAAGj8B,OAAO,CAACi7B,gBAAgB,CAC5C5iC,QAAQ,YAAYge,YAAY,GAAGhe,QAAQ,GAAG,IAAIge,YAAY,CAAChe,QAAQ,CAAC,EACxE0d,MAAM,YAAYM,YAAY,GAAGN,MAAM,GAAG,IAAIM,YAAY,CAACN,MAAM,CAAC,EAClE0lB,QAAQ,YAAYplB,YAAY,GAAGolB,QAAQ,GAAG,IAAIplB,YAAY,CAAColB,QAAQ,CAAC,CACxE,CAAA;AAED;QACA,KAAK,IAAI9kC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGslC,YAAY,CAAC7/B,MAAM,EAAEzF,CAAC,IAAI,CAAC,EAAEslC,YAAY,CAACtlC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAA;QAEtEsf,OAAO,GAAGhW,GAAG,CAACwR,cAAc,EAAE,CAACC,SAAS,CAACsqB,aAAa,CAAC,CAACj/B,QAAQ,CAACk/B,YAAY,CAAC,CAACtqB,OAAO,CAAC,MAAM,CAAC,CAAA;AAC9FzZ,QAAAA,IAAI,CAACiW,YAAY,CAAC,SAAS,EAAE8H,OAAO,CAAC,CAAA;AAErCklB,QAAAA,YAAY,CAACphC,GAAG,CAACgiC,aAAa,EAAE9lB,OAAO,CAAC,CAAA;AACxCiZ,QAAAA,QAAQ,EAAE,CAAA;AACX,OAAA;AACD,KAAA;IAEA,IAAI,CAACA,QAAQ,EAAE;AACdhvB,MAAAA,MAAM,CAACgQ,IAAI,EAAIvQ,EAAAA,MAAI,qDAAqD,CAAC,CAAA;AAC1E,KAAC,MAAM;AACNO,MAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;AACnC,KAAA;AACD,GAAC,CAAC,CAAA;AACH,CAAA;AAEA,SAAS67B,iBAAiBA,CAACtjC,IAAe,EAAA;AACzC,EAAA,MAAMiG,QAAQ,GAAGjG,IAAI,CAACkG,WAAW,EAAE,CAAA;AACnC,EAAA,IAAI,CAACD,QAAQ,EAAE,OAAO,YAAY,CAAA;AAElC,EAAA,MAAM+9B,iBAAiB,GAAG/9B,QAAQ,CAACg+B,oBAAoB,EAAE,CAAA;AACzD,EAAA,IAAI,CAACD,iBAAiB,EAAE,OAAO,YAAY,CAAA;AAE3C,EAAA,MAAMT,QAAQ,GAAGS,iBAAiB,CAAC1tB,WAAW,EAAE,CAAA;AAChD,EAAA,MAAM1P,QAAQ,GAAe,CAAA28B,SAAAA,EAAAA,SAAU,CAAA,CAAA;EACvC,IAAIvjC,IAAI,CAACI,YAAY,CAACwG,QAAQ,CAAC,EAAE,OAAOA,QAAQ,CAAA;AAEhD,EAAA,OAAO,YAAY,CAAA;AACpB,CAAA;AAEA,SAASw8B,eAAeA,CAACpjC,IAAe,EAAEgI,MAAe,EAAEk7B,QAAgB,EAAEzkC,CAAS,EAAEka,SAAkB,EAAA;AACzG,EAAA,IACC3Y,IAAI,CAACK,OAAO,EAAE,KAAKC,cAAS,CAACC,IAAI,CAACM,SAAS,IAC3C,CAACb,IAAI,CAACI,YAAY,CAAC,UAAU,CAAC,IAC9B,CAACJ,IAAI,CAACI,YAAY,CAAC,QAAQ,CAAC,IAC5B,CAACJ,IAAI,CAACI,YAAY,CAAC,YAAY,CAAC,EAC/B;AACD4H,IAAAA,MAAM,CAACU,KAAK,CACX,CAAA,EAAGjB,MAA4B,CAAA,qBAAA,EAAAhJ,CAAc,CAAA,UAAA,EAAAykC,QAA4B,CAAA,kBAAA,CAAA,GACxE,qEAAqE,CACtE,CAAA;AACD,IAAA,OAAO,KAAK,CAAA;AACb,GAAA;EAEA,IAAIljC,IAAI,CAACI,YAAY,CAAC,SAAS,CAAC,IAAI,CAACuY,SAAS,EAAE;IAC/C3Q,MAAM,CAACU,KAAK,CAAI,CAAAjB,EAAAA,MAA4B,wBAAAhJ,CAAc,CAAA,UAAA,EAAAykC,QAA2B,CAAA,iBAAA,CAAA,CAAC,CAAA;AACtF,IAAA,OAAO,KAAK,CAAA;AACb,GAAA;AAEA,EAAA,IAAIljC,IAAI,CAACE,UAAU,EAAE,EAAE;AACtB;AACA8H,IAAAA,MAAM,CAACgQ,IAAI,CAAC,CAAA,EAAGvQ,MAAI,CAAA,qBAAA,EAAwBhJ,CAAC,CAAA,UAAA,EAAaykC,QAAQ,CAAA,kBAAA,CAAoB,GAAG,eAAe,CAAC,CAAA;AACxG,IAAA,OAAO,KAAK,CAAA;AACb,GAAA;AAEA,EAAA,OAAO,IAAI,CAAA;AACZ;;AC/JA;;AAEG;SACagB,KAAKA,GAAA;AACpB,EAAA,OAAQn8B,GAAa,IAAU;AAC9B,IAAA,MAAMo8B,cAAc,GAAGp8B,GAAG,CAAC6Y,eAAe,CAACwjB,4BAAiB,CAAsB,CAAA;AAClF,IAAA,MAAMF,KAAK,GAAGC,cAAc,CAACE,WAAW,EAAE,CAAA;AAC1Ct8B,IAAAA,GAAG,CAAC3B,OAAO,EAAE,CACXC,aAAa,EAAE,CACfkC,OAAO,CAAEtC,QAAQ,IAAI;AACrBA,MAAAA,QAAQ,CAACmhB,YAAY,CAAC,qBAAqB,EAAE8c,KAAK,CAAC,CAAA;AACpD,KAAC,CAAC,CAAA;GACH,CAAA;AACF;;ACbA,MAAMz8B,MAAI,GAAG,aAAa,CAAA;AAM1B;;;;;;;;;;;;;;;;AAgBG;AACa,SAAA68B,WAAWA,CAACz8B,QAAA,EAAmD;AAI9E,EAAA,OAAO3I,eAAe,CAACuI,MAAI,EAAA,UAAS5B,QAAkB,EAAA;IAAA,IAAmB;AACxE,MAAA,MAAMmC,MAAM,GAAGnC,QAAQ,CAACoC,SAAS,EAAE,CAAA;AAEnC,MAAA,MAAM2L,MAAM,GAAG/N,QAAQ,CAACO,OAAO,EAAE,CAACuN,WAAW,EAAE,CAAC,CAAC,CAAC,CAAA;AAClD9N,MAAAA,QAAQ,CACNO,OAAO,EAAE,CACT8H,aAAa,EAAE,CACf3F,OAAO,CAAExF,CAAC,IAAKA,CAAC,CAACyW,SAAS,CAAC5F,MAAM,CAAC,CAAC,CAAA;MACrC/N,QAAQ,CACNO,OAAO,EAAE,CACTuN,WAAW,EAAE,CACbpL,OAAO,CAAC,CAACvF,CAAC,EAAEyF,KAAK,KAAMA,KAAK,GAAG,CAAC,GAAGzF,CAAC,CAACgL,OAAO,EAAE,GAAG,IAAK,CAAC,CAAA;AAEzDhG,MAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,MAAI,aAAa,CAAC,CAAA;MAAC,OAAAxJ,OAAA,CAAAC,OAAA,EAAA,CAAA;AACpC,KAAC,QAAAc,CAAA,EAAA;AAAA,MAAA,OAAAf,OAAA,CAAAgB,MAAA,CAAAD,CAAA,CAAA,CAAA;AAAA,KAAA;GAAC,CAAA,CAAA;AACH;;AC1CA,MAAMyI,IAAI,GAAG,kBAAkB,CAAA;AAQ/B;;;;;;;;;;;;;;;;AAgBG;AACG,SAAU88B,gBAAgBA,CAACz8B,OAA0B,EAAA;AAC1D,EAAA,OAAO5I,eAAe,CAACuI,IAAI,EAAGM,GAAa,IAAU;AACpD,IAAA,MAAMC,MAAM,GAAGD,GAAG,CAACE,SAAS,EAAE,CAAA;IAE9B,MAAMu8B,eAAe,GAAG,CAAC18B,OAAO,CAAC08B,eAAe,IAAI,EAAE,EAAEC,WAAW,EAAE,CAAA;IAErE,IAAID,eAAe,KAAK,aAAa,EAAE;AACtCx8B,MAAAA,MAAM,CAACgM,IAAI,EAAIvM,EAAAA,IAAI,sDAAsD,CAAC,CAAA;AAC1E,MAAA,OAAA;AACD,KAAA;IAEA,IAAI+8B,eAAe,KAAK,MAAM,EAAE;MAC/Bx8B,MAAM,CAACs2B,KAAK,EACR72B,EAAAA,IAAI,gCAAgC+8B,eAAyC,CAAA,wBAAA,CAAA,GAC/E,qCAAqC,CACtC,CAAA;AACD,MAAA,OAAA;AACD,KAAA;AAEA,IAAA,MAAME,SAAS,GAAG,IAAI9iC,GAAG,EAAY,CAAA;AAErC;IACA,SAAS+iC,YAAYA,CAAC75B,CAAS,EAAA;AAC9B,MAAA,OAAOA,CAAC,GAAG,OAAO,GAAGA,CAAC,GAAG,YAAY,GAAG1I,IAAI,CAACI,GAAG,CAACsI,CAAC,GAAG,YAAY,GAAG,YAAY,EAAE,GAAG,CAAC,CAAA;AACvF,KAAA;IAEA,SAAS85B,eAAeA,CAACr4B,SAAoB,EAAA;MAC5C,MAAMs4B,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAS,CAAA;AAC/B,MAAA,IAAIthC,SAA0B,CAAA;AAC9B,MAAA,KAAK,IAAI9E,CAAC,GAAG,CAAC,EAAG8E,SAAS,GAAGgJ,SAAS,CAACnM,YAAY,CAAC,SAAS3B,CAAG,CAAA,CAAA,CAAC,EAAGA,CAAC,EAAE,EAAE;AACxE,QAAA,IAAIimC,SAAS,CAACpjC,GAAG,CAACiC,SAAS,CAAC,EAAE,SAAA;AAE9B,QAAA,KAAK,IAAI5E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4E,SAAS,CAAC9C,QAAQ,EAAE,EAAE9B,CAAC,EAAE,EAAE;AAC9C4E,UAAAA,SAAS,CAACiX,UAAU,CAAC7b,CAAC,EAAEkmC,KAAK,CAAC,CAAA;UAC9BA,KAAK,CAAC,CAAC,CAAC,GAAGF,YAAY,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;UACjCA,KAAK,CAAC,CAAC,CAAC,GAAGF,YAAY,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;UACjCA,KAAK,CAAC,CAAC,CAAC,GAAGF,YAAY,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;AACjCthC,UAAAA,SAAS,CAAC8Y,UAAU,CAAC1d,CAAC,EAAEkmC,KAAK,CAAC,CAAA;AAC/B,SAAA;AAEAH,QAAAA,SAAS,CAACljC,GAAG,CAAC+B,SAAS,CAAC,CAAA;AACzB,OAAA;AACD,KAAA;IAEAwE,GAAG,CAAC3B,OAAO,EAAE,CACXgG,UAAU,EAAE,CACZ7D,OAAO,CAAE8D,IAAI,IAAKA,IAAI,CAACC,cAAc,EAAE,CAAC/D,OAAO,CAACq8B,eAAe,CAAC,CAAC,CAAA;AAEnE58B,IAAAA,MAAM,CAACU,KAAK,EAAIjB,EAAAA,IAAI,aAAa,CAAC,CAAA;AACnC,GAAC,CAAC,CAAA;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}